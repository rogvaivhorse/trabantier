
trabantier_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005904  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005904  00005904  0000d904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000900  20000000  0000590c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000340  20000900  0000620c  00010900  2**2
                  ALLOC
  4 .stack        00001000  20000c40  0000654c  00010900  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00010900  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001092a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00038d73  00000000  00000000  0001099b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00009352  00000000  00000000  0004970e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e294  00000000  00000000  00052a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001358  00000000  00000000  00060cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000dc0  00000000  00000000  00062050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c0b1  00000000  00000000  00062e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00022617  00000000  00000000  0006eec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e7d94  00000000  00000000  000914d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a9c  00000000  00000000  0017926c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
       0:	20001c40 	.word	0x20001c40
       4:	000028ad 	.word	0x000028ad
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
       8:	000028a9 	.word	0x000028a9
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
       c:	000028a9 	.word	0x000028a9
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
      10:	000028a9 	.word	0x000028a9
		if (cpu_irq_is_enabled()) {
			cpu_irq_disable();
      14:	000028a9 	.word	0x000028a9
			cpu_irq_prev_interrupt_state = true;
      18:	000028a9 	.word	0x000028a9
	...
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
      2c:	000028a9 	.word	0x000028a9
      30:	000028a9 	.word	0x000028a9
      34:	00000000 	.word	0x00000000
      38:	000028a9 	.word	0x000028a9
      3c:	00000681 	.word	0x00000681
      40:	000028a9 	.word	0x000028a9
      44:	000028a9 	.word	0x000028a9
      48:	000028a9 	.word	0x000028a9
      4c:	000028a9 	.word	0x000028a9
      50:	000028a9 	.word	0x000028a9
      54:	000028a9 	.word	0x000028a9
      58:	000028a9 	.word	0x000028a9
      5c:	000028a9 	.word	0x000028a9
      60:	000028a9 	.word	0x000028a9
      64:	000028a9 	.word	0x000028a9
      68:	000028a9 	.word	0x000028a9
      6c:	000028a9 	.word	0x000028a9
      70:	000028a9 	.word	0x000028a9
      74:	000028a9 	.word	0x000028a9
      78:	000028a9 	.word	0x000028a9
      7c:	000028a9 	.word	0x000028a9
      80:	000028a9 	.word	0x000028a9
      84:	000028a9 	.word	0x000028a9
      88:	000028a9 	.word	0x000028a9
      8c:	000028a9 	.word	0x000028a9
      90:	000028a9 	.word	0x000028a9
      94:	000028a9 	.word	0x000028a9
      98:	000028a9 	.word	0x000028a9
      9c:	000028a9 	.word	0x000028a9
      a0:	000028a9 	.word	0x000028a9
      a4:	00001539 	.word	0x00001539
      a8:	00001549 	.word	0x00001549
      ac:	0000155d 	.word	0x0000155d
      b0:	00001571 	.word	0x00001571
      b4:	00001585 	.word	0x00001585
      b8:	00001595 	.word	0x00001595
      bc:	000015a9 	.word	0x000015a9
      c0:	000015bd 	.word	0x000015bd
      c4:	000015d1 	.word	0x000015d1
      c8:	000015e1 	.word	0x000015e1
      cc:	000015f5 	.word	0x000015f5
      d0:	00001609 	.word	0x00001609
      d4:	000028a9 	.word	0x000028a9
      d8:	000028a9 	.word	0x000028a9
      dc:	000028a9 	.word	0x000028a9
      e0:	000028a9 	.word	0x000028a9
      e4:	000028a9 	.word	0x000028a9
      e8:	000028a9 	.word	0x000028a9
      ec:	000028a9 	.word	0x000028a9
      f0:	000028a9 	.word	0x000028a9
      f4:	000028a9 	.word	0x000028a9
      f8:	000028a9 	.word	0x000028a9
      fc:	000028a9 	.word	0x000028a9
     100:	000028a9 	.word	0x000028a9
     104:	000028a9 	.word	0x000028a9
     108:	000028a9 	.word	0x000028a9
     10c:	000028a9 	.word	0x000028a9
     110:	000028a9 	.word	0x000028a9
     114:	000028a9 	.word	0x000028a9
     118:	000028a9 	.word	0x000028a9
     11c:	000028a9 	.word	0x000028a9
     120:	000028a9 	.word	0x000028a9
     124:	000028a9 	.word	0x000028a9
     128:	000028a9 	.word	0x000028a9
     12c:	000013f1 	.word	0x000013f1
     130:	00001405 	.word	0x00001405
     134:	000028a9 	.word	0x000028a9
     138:	000028a9 	.word	0x000028a9
     13c:	000028a9 	.word	0x000028a9
     140:	000028a9 	.word	0x000028a9
     144:	000028a9 	.word	0x000028a9
     148:	000028a9 	.word	0x000028a9
     14c:	000028a9 	.word	0x000028a9
     150:	000028a9 	.word	0x000028a9
     154:	000028a9 	.word	0x000028a9
     158:	000028a9 	.word	0x000028a9
     15c:	000028a9 	.word	0x000028a9
     160:	000028a9 	.word	0x000028a9
     164:	000028a9 	.word	0x000028a9
     168:	000028a9 	.word	0x000028a9
     16c:	000028a9 	.word	0x000028a9
     170:	000028a9 	.word	0x000028a9
     174:	000028a9 	.word	0x000028a9
     178:	000028a9 	.word	0x000028a9
     17c:	000028a9 	.word	0x000028a9

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a1b      	subs	r3, r3, r0
     188:	2b06      	cmp	r3, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4b04      	ldr	r3, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2b00      	cmp	r3, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4798      	blx	r3
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	0000590c 	.word	0x0000590c
     19c:	0000590f 	.word	0x0000590f
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a1b      	subs	r3, r3, r0
     1ac:	109b      	asrs	r3, r3, #2
     1ae:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	0000590c 	.word	0x0000590c
     1c8:	0000590c 	.word	0x0000590c
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b113      	cbz	r3, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2301      	movs	r3, #1
     1e8:	7023      	strb	r3, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000900 	.word	0x20000900
     1f0:	00000000 	.word	0x00000000
     1f4:	0000590c 	.word	0x0000590c

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6803      	ldr	r3, [r0, #0]
     20a:	b113      	cbz	r3, 212 <frame_dummy+0x1a>
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b103      	cbz	r3, 212 <frame_dummy+0x1a>
     210:	4798      	blx	r3
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	0000590c 	.word	0x0000590c
     224:	20000904 	.word	0x20000904
     228:	0000590c 	.word	0x0000590c
     22c:	00000000 	.word	0x00000000

00000230 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
     230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
     234:	69c3      	ldr	r3, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
     236:	f023 0303 	bic.w	r3, r3, #3
	pmcon |= BPM_PMCON_PS(ps_value);
     23a:	f043 030c 	orr.w	r3, r3, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     23e:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     242:	b672      	cpsid	i
     244:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     248:	2500      	movs	r5, #0
     24a:	4c0f      	ldr	r4, [pc, #60]	; (288 <bpm_power_scaling_cpu_failsafe+0x58>)
     24c:	7025      	strb	r5, [r4, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
     24e:	4c0f      	ldr	r4, [pc, #60]	; (28c <bpm_power_scaling_cpu_failsafe+0x5c>)
     250:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
     254:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
     256:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
     25a:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     25c:	2205      	movs	r2, #5
     25e:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
     260:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
     264:	4319      	orrs	r1, r3
     266:	4b0a      	ldr	r3, [pc, #40]	; (290 <bpm_power_scaling_cpu_failsafe+0x60>)
     268:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
     26a:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
     26c:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
     270:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
     274:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     276:	b92e      	cbnz	r6, 284 <bpm_power_scaling_cpu_failsafe+0x54>
		cpu_irq_enable();
     278:	2201      	movs	r2, #1
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <bpm_power_scaling_cpu_failsafe+0x58>)
     27c:	701a      	strb	r2, [r3, #0]
     27e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     282:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
     284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     288:	20000038 	.word	0x20000038
     28c:	e000e010 	.word	0xe000e010
     290:	20000001 	.word	0x20000001

00000294 <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
     294:	6940      	ldr	r0, [r0, #20]
}
     296:	4770      	bx	lr

00000298 <opt_enc_irq_callback_0>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->GPIO_PVR & arch_ioport_pin_to_mask(pin);
     298:	4b05      	ldr	r3, [pc, #20]	; (2b0 <opt_enc_irq_callback_0+0x18>)
     29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60

static opt_enc_type opt_enc[OPT_Enc_Count];

void opt_enc_irq_callback_0 (void) {
	//printf("Called opt_enc_callback_0.\r\n");
	if (!ioport_get_pin_level (IO_ENC_0))
     29c:	f413 6f80 	tst.w	r3, #1024	; 0x400
		enc_0_steps ++;
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <opt_enc_irq_callback_0+0x1c>)
     2a2:	681a      	ldr	r2, [r3, #0]
     2a4:	bf0c      	ite	eq
     2a6:	3201      	addeq	r2, #1
	else
		enc_0_steps --;
     2a8:	f102 32ff 	addne.w	r2, r2, #4294967295
     2ac:	601a      	str	r2, [r3, #0]
     2ae:	4770      	bx	lr
     2b0:	400e1200 	.word	0x400e1200
     2b4:	20000924 	.word	0x20000924

000002b8 <opt_enc_irq_callback_1>:
     2b8:	4b05      	ldr	r3, [pc, #20]	; (2d0 <opt_enc_irq_callback_1+0x18>)
     2ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
void opt_enc_irq_callback_1 (void) {
	//printf("Called opt_enc_callback_1.\r\n");
	if (!ioport_get_pin_level (IO_ENC_1))
     2bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
		enc_1_steps ++;
     2c0:	4b04      	ldr	r3, [pc, #16]	; (2d4 <opt_enc_irq_callback_1+0x1c>)
     2c2:	681a      	ldr	r2, [r3, #0]
     2c4:	bf0c      	ite	eq
     2c6:	3201      	addeq	r2, #1
	else
		enc_1_steps --;
     2c8:	f102 32ff 	addne.w	r2, r2, #4294967295
     2cc:	601a      	str	r2, [r3, #0]
     2ce:	4770      	bx	lr
     2d0:	400e1400 	.word	0x400e1400
     2d4:	20000930 	.word	0x20000930

000002d8 <opt_enc_irq_callback_2>:
     2d8:	4b05      	ldr	r3, [pc, #20]	; (2f0 <opt_enc_irq_callback_2+0x18>)
     2da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
void opt_enc_irq_callback_2 (void) {
	//printf("Called opt_enc_callback_2.\r\n");
	if (!ioport_get_pin_level (IO_ENC_2))
     2dc:	f013 0f08 	tst.w	r3, #8
		enc_2_steps --; //++;
     2e0:	4b04      	ldr	r3, [pc, #16]	; (2f4 <opt_enc_irq_callback_2+0x1c>)
     2e2:	681a      	ldr	r2, [r3, #0]
     2e4:	bf0c      	ite	eq
     2e6:	f102 32ff 	addeq.w	r2, r2, #4294967295
	else
		enc_2_steps ++; //--;
     2ea:	3201      	addne	r2, #1
     2ec:	601a      	str	r2, [r3, #0]
     2ee:	4770      	bx	lr
     2f0:	400e1200 	.word	0x400e1200
     2f4:	200009b8 	.word	0x200009b8

000002f8 <opt_enc_irq_callback_3>:
     2f8:	4b05      	ldr	r3, [pc, #20]	; (310 <opt_enc_irq_callback_3+0x18>)
     2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
void opt_enc_irq_callback_3 (void) {
	//printf("Called opt_enc_callback_3.\r\n");
	if (!ioport_get_pin_level (IO_ENC_3))
     2fc:	f013 0f10 	tst.w	r3, #16
		enc_3_steps --; //++;
     300:	4b04      	ldr	r3, [pc, #16]	; (314 <opt_enc_irq_callback_3+0x1c>)
     302:	681a      	ldr	r2, [r3, #0]
     304:	bf0c      	ite	eq
     306:	f102 32ff 	addeq.w	r2, r2, #4294967295
	else
		enc_3_steps ++; //--;
     30a:	3201      	addne	r2, #1
     30c:	601a      	str	r2, [r3, #0]
     30e:	4770      	bx	lr
     310:	400e1200 	.word	0x400e1200
     314:	20000920 	.word	0x20000920

00000318 <opt_enc_irq_callback_4>:
     318:	4b05      	ldr	r3, [pc, #20]	; (330 <opt_enc_irq_callback_4+0x18>)
     31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
void opt_enc_irq_callback_4 (void) {
	//printf("Called opt_enc_callback_4.\r\n");
	if (!ioport_get_pin_level (IO_ENC_4))
     31c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
		enc_4_steps --; //++;
     320:	4b04      	ldr	r3, [pc, #16]	; (334 <opt_enc_irq_callback_4+0x1c>)
     322:	681a      	ldr	r2, [r3, #0]
     324:	bf0c      	ite	eq
     326:	f102 32ff 	addeq.w	r2, r2, #4294967295
	else
		enc_4_steps ++; //--;
     32a:	3201      	addne	r2, #1
     32c:	601a      	str	r2, [r3, #0]
     32e:	4770      	bx	lr
     330:	400e1400 	.word	0x400e1400
     334:	2000092c 	.word	0x2000092c

00000338 <opt_enc_irq_callback_5>:
     338:	4b05      	ldr	r3, [pc, #20]	; (350 <opt_enc_irq_callback_5+0x18>)
     33a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
void opt_enc_irq_callback_5 (void) {
	//printf("Called opt_enc_callback_5.\r\n");
	if (!ioport_get_pin_level (IO_ENC_5))
     33c:	f013 0f80 	tst.w	r3, #128	; 0x80
		enc_5_steps --; //++;
     340:	4b04      	ldr	r3, [pc, #16]	; (354 <opt_enc_irq_callback_5+0x1c>)
     342:	681a      	ldr	r2, [r3, #0]
     344:	bf0c      	ite	eq
     346:	f102 32ff 	addeq.w	r2, r2, #4294967295
	else
		enc_5_steps ++; //--;
     34a:	3201      	addne	r2, #1
     34c:	601a      	str	r2, [r3, #0]
     34e:	4770      	bx	lr
     350:	400e1000 	.word	0x400e1000
     354:	200009b4 	.word	0x200009b4

00000358 <opt_enc_irq_callback_6>:
     358:	4b05      	ldr	r3, [pc, #20]	; (370 <opt_enc_irq_callback_6+0x18>)
     35a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
void opt_enc_irq_callback_6 (void) {
	//printf("Called opt_enc_callback_6.\r\n");
	if (!ioport_get_pin_level (IO_ENC_6))
     35c:	f013 0f04 	tst.w	r3, #4
		enc_6_steps ++;
     360:	4b04      	ldr	r3, [pc, #16]	; (374 <opt_enc_irq_callback_6+0x1c>)
     362:	681a      	ldr	r2, [r3, #0]
     364:	bf0c      	ite	eq
     366:	3201      	addeq	r2, #1
	else
		enc_6_steps --;
     368:	f102 32ff 	addne.w	r2, r2, #4294967295
     36c:	601a      	str	r2, [r3, #0]
     36e:	4770      	bx	lr
     370:	400e1200 	.word	0x400e1200
     374:	2000091c 	.word	0x2000091c

00000378 <opt_enc_irq_callback_7>:
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <opt_enc_irq_callback_7+0x18>)
     37a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
void opt_enc_irq_callback_7 (void) {
	//printf("Called opt_enc_callback_7.\r\n");
	if (!ioport_get_pin_level (IO_ENC_7))
     37c:	f413 7f80 	tst.w	r3, #256	; 0x100
		enc_7_steps ++;
     380:	4b04      	ldr	r3, [pc, #16]	; (394 <opt_enc_irq_callback_7+0x1c>)
     382:	681a      	ldr	r2, [r3, #0]
     384:	bf0c      	ite	eq
     386:	3201      	addeq	r2, #1
	else
		enc_7_steps --;
     388:	f102 32ff 	addne.w	r2, r2, #4294967295
     38c:	601a      	str	r2, [r3, #0]
     38e:	4770      	bx	lr
     390:	400e1400 	.word	0x400e1400
     394:	20000928 	.word	0x20000928

00000398 <opt_enc_setup_IRQ_eic>:
}

void opt_enc_setup_IRQ_eic (uint32_t IRQ_ID) {
     398:	b410      	push	{r4}
	ioport_set_pin_dir(opt_enc[IRQ_ID].IO_enc_A, IOPORT_DIR_INPUT);
     39a:	4921      	ldr	r1, [pc, #132]	; (420 <opt_enc_setup_IRQ_eic+0x88>)
     39c:	0100      	lsls	r0, r0, #4
     39e:	580a      	ldr	r2, [r1, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     3a0:	0953      	lsrs	r3, r2, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     3a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     3a6:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     3aa:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     3ac:	f002 021f 	and.w	r2, r2, #31
     3b0:	2401      	movs	r4, #1
     3b2:	fa04 f202 	lsl.w	r2, r4, r2
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     3b6:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     3b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	ioport_set_pin_level(opt_enc[IRQ_ID].IO_enc_A, IOPORT_PIN_LEVEL_LOW);
     3bc:	580a      	ldr	r2, [r1, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     3be:	0953      	lsrs	r3, r2, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     3c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     3c4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     3c8:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     3ca:	f002 021f 	and.w	r2, r2, #31
     3ce:	fa04 f202 	lsl.w	r2, r4, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
     3d2:	659a      	str	r2, [r3, #88]	; 0x58
	ioport_set_pin_mode(opt_enc[IRQ_ID].IO_enc_A, IOPORT_MODE_PULLDOWN | IOPORT_MODE_GLITCH_FILTER);
     3d4:	580b      	ldr	r3, [r1, r0]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     3d6:	f003 021f 	and.w	r2, r3, #31
     3da:	fa04 f202 	lsl.w	r2, r4, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     3de:	095b      	lsrs	r3, r3, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     3e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     3e4:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     3e8:	025b      	lsls	r3, r3, #9
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     3ea:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
     3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->GPIO_PDERC = mask;
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
     3f0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     3f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     3f8:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     3fa:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     3fc:	639a      	str	r2, [r3, #56]	; 0x38
	ioport_set_pin_sense_mode(opt_enc[IRQ_ID].IO_enc_A, IOPORT_SENSE_RISING);
     3fe:	580b      	ldr	r3, [r1, r0]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     400:	f003 021f 	and.w	r2, r3, #31
     404:	4094      	lsls	r4, r2
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     406:	095b      	lsrs	r3, r3, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     408:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     40c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     410:	025b      	lsls	r3, r3, #9
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (pin_sense & 0x01) {
		base->GPIO_IMR0S = mask;
     412:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	}

	if (pin_sense & 0x02) {
		base->GPIO_IMR1S = mask;
	} else {
		base->GPIO_IMR1C = mask;
     416:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
	#ifndef DEBUG
		printf("Setup IRQ pin_");
		printf_itoa (IRQ_ID);
		printf("\r\n");
	#endif
}
     41a:	f85d 4b04 	ldr.w	r4, [sp], #4
     41e:	4770      	bx	lr
     420:	20000934 	.word	0x20000934

00000424 <opt_enc_setup_IRQ_callback>:

void opt_enc_setup_IRQ_callback (uint32_t IRQ_ID) {
     424:	b538      	push	{r3, r4, r5, lr}
     426:	4605      	mov	r5, r0
	
	if (!gpio_set_pin_callback(opt_enc[IRQ_ID].IO_enc_A, opt_enc[IRQ_ID].callback, 1)) {
     428:	4a09      	ldr	r2, [pc, #36]	; (450 <opt_enc_setup_IRQ_callback+0x2c>)
     42a:	0103      	lsls	r3, r0, #4
     42c:	18d1      	adds	r1, r2, r3
     42e:	58d0      	ldr	r0, [r2, r3]
     430:	68c9      	ldr	r1, [r1, #12]
     432:	2201      	movs	r2, #1
     434:	4b07      	ldr	r3, [pc, #28]	; (454 <opt_enc_setup_IRQ_callback+0x30>)
     436:	4798      	blx	r3
     438:	b940      	cbnz	r0, 44c <opt_enc_setup_IRQ_callback+0x28>
		printf("Setup IRQ callback_");
     43a:	4807      	ldr	r0, [pc, #28]	; (458 <opt_enc_setup_IRQ_callback+0x34>)
     43c:	4c07      	ldr	r4, [pc, #28]	; (45c <opt_enc_setup_IRQ_callback+0x38>)
     43e:	47a0      	blx	r4
		printf_itoa (IRQ_ID);
     440:	4628      	mov	r0, r5
     442:	4b07      	ldr	r3, [pc, #28]	; (460 <opt_enc_setup_IRQ_callback+0x3c>)
     444:	4798      	blx	r3
		printf(" failure!\r\n");
     446:	4807      	ldr	r0, [pc, #28]	; (464 <opt_enc_setup_IRQ_callback+0x40>)
     448:	47a0      	blx	r4
     44a:	e7fe      	b.n	44a <opt_enc_setup_IRQ_callback+0x26>
     44c:	bd38      	pop	{r3, r4, r5, pc}
     44e:	bf00      	nop
     450:	20000934 	.word	0x20000934
     454:	00001489 	.word	0x00001489
     458:	000057a8 	.word	0x000057a8
     45c:	00002fb9 	.word	0x00002fb9
     460:	00000d11 	.word	0x00000d11
     464:	000057bc 	.word	0x000057bc

00000468 <opt_enc_setup_IO_B_gpio>:
		printf(" successful!\r\n");
	#endif
}

void opt_enc_setup_IO_B_gpio (uint32_t IO_ChB_ID) {
	ioport_set_pin_dir(opt_enc[IO_ChB_ID].IO_enc_B, IOPORT_DIR_INPUT);
     468:	4b13      	ldr	r3, [pc, #76]	; (4b8 <opt_enc_setup_IO_B_gpio+0x50>)
     46a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
     46e:	6841      	ldr	r1, [r0, #4]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     470:	094b      	lsrs	r3, r1, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     472:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     476:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     47a:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     47c:	f001 011f 	and.w	r1, r1, #31
     480:	2201      	movs	r2, #1
     482:	fa02 f101 	lsl.w	r1, r2, r1
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
     486:	6499      	str	r1, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
     488:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
	ioport_set_pin_mode(opt_enc[IO_ChB_ID].IO_enc_B, IOPORT_MODE_PULLDOWN | IOPORT_MODE_GLITCH_FILTER);
     48c:	6843      	ldr	r3, [r0, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     48e:	f003 011f 	and.w	r1, r3, #31
     492:	408a      	lsls	r2, r1
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     494:	095b      	lsrs	r3, r3, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
     496:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
     49a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
     49e:	025b      	lsls	r3, r3, #9
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
     4a0:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
     4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->GPIO_PDERC = mask;
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
     4a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
     4aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
     4ae:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
     4b0:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
     4b2:	639a      	str	r2, [r3, #56]	; 0x38
     4b4:	4770      	bx	lr
     4b6:	bf00      	nop
     4b8:	20000934 	.word	0x20000934

000004bc <opt_enc_enable_IRQ>:
	#endif
}
*/

void opt_enc_enable_IRQ (uint32_t IRQ_ID) {
	gpio_enable_pin_interrupt(opt_enc[IRQ_ID].IO_enc_A);
     4bc:	0100      	lsls	r0, r0, #4
     4be:	4b08      	ldr	r3, [pc, #32]	; (4e0 <opt_enc_enable_IRQ+0x24>)
     4c0:	581a      	ldr	r2, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     4c2:	0953      	lsrs	r3, r2, #5
 *
 * \param [in] pin The pin number
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
     4c4:	025b      	lsls	r3, r3, #9
     4c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     4ca:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     4ce:	f002 021f 	and.w	r2, r2, #31
     4d2:	2101      	movs	r1, #1
     4d4:	fa01 f202 	lsl.w	r2, r1, r2
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
     4d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     4dc:	4770      	bx	lr
     4de:	bf00      	nop
     4e0:	20000934 	.word	0x20000934

000004e4 <opt_enc_disable_IRQ>:
		printf("\r\n");
	#endif
}

void opt_enc_disable_IRQ (uint32_t IRQ_ID) {
	gpio_disable_pin_interrupt(opt_enc[IRQ_ID].IO_enc_A);
     4e4:	0100      	lsls	r0, r0, #4
     4e6:	4b08      	ldr	r3, [pc, #32]	; (508 <opt_enc_disable_IRQ+0x24>)
     4e8:	581a      	ldr	r2, [r3, r0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     4ea:	0953      	lsrs	r3, r2, #5
 *
 * \param [in] pin The pin number
 */
static inline void gpio_disable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
     4ec:	025b      	lsls	r3, r3, #9
     4ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     4f2:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     4f6:	f002 021f 	and.w	r2, r2, #31
     4fa:	2101      	movs	r1, #1
     4fc:	fa01 f202 	lsl.w	r2, r1, r2
	gpio_port->GPIO_IERC = ioport_pin_to_mask(pin);
     500:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     504:	4770      	bx	lr
     506:	bf00      	nop
     508:	20000934 	.word	0x20000934

0000050c <opt_enc_enable_IRQs>:
		printf_itoa (IRQ_ID);
		printf("\r\n");
	#endif
}

void opt_enc_enable_IRQs (void) {
     50c:	b410      	push	{r4}
     50e:	2300      	movs	r3, #0
	for (uint32_t i = 0; i < OPT_Enc_Count; i++) 
		gpio_enable_pin_interrupt(opt_enc[i].IO_enc_A);
     510:	4c0a      	ldr	r4, [pc, #40]	; (53c <opt_enc_enable_IRQs+0x30>)
     512:	2001      	movs	r0, #1
     514:	5919      	ldr	r1, [r3, r4]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
     516:	094a      	lsrs	r2, r1, #5
 *
 * \param [in] pin The pin number
 */
static inline void gpio_enable_pin_interrupt(ioport_pin_t pin)
{
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[ioport_pin_to_port_id(pin)]);
     518:	0252      	lsls	r2, r2, #9
     51a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     51e:	f502 2261 	add.w	r2, r2, #921600	; 0xe1000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
     522:	f001 011f 	and.w	r1, r1, #31
     526:	fa00 f101 	lsl.w	r1, r0, r1
	gpio_port->GPIO_IERS = ioport_pin_to_mask(pin);
     52a:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
     52e:	3310      	adds	r3, #16
		printf("\r\n");
	#endif
}

void opt_enc_enable_IRQs (void) {
	for (uint32_t i = 0; i < OPT_Enc_Count; i++) 
     530:	2b80      	cmp	r3, #128	; 0x80
     532:	d1ef      	bne.n	514 <opt_enc_enable_IRQs+0x8>
		gpio_enable_pin_interrupt(opt_enc[i].IO_enc_A);
}
     534:	f85d 4b04 	ldr.w	r4, [sp], #4
     538:	4770      	bx	lr
     53a:	bf00      	nop
     53c:	20000934 	.word	0x20000934

00000540 <opt_enc_init>:

bool opt_enc_get_pin_level (uint32_t IO_ChB_ID) {
	return ioport_get_pin_level (opt_enc[IO_ChB_ID].IO_enc_B);
}

void opt_enc_init(opt_enc_type **p_group_opt_enc) {
     540:	b538      	push	{r3, r4, r5, lr}
	*p_group_opt_enc = opt_enc;	
     542:	4b2f      	ldr	r3, [pc, #188]	; (600 <opt_enc_init+0xc0>)
     544:	6003      	str	r3, [r0, #0]
	
	opt_enc[0].IO_enc_A = EIC_0;
     546:	2210      	movs	r2, #16
     548:	601a      	str	r2, [r3, #0]
	opt_enc[0].IO_enc_B = IO_ENC_0;
     54a:	222a      	movs	r2, #42	; 0x2a
     54c:	605a      	str	r2, [r3, #4]
	opt_enc[0].p_enc_steps = &enc_0_steps;
     54e:	4a2d      	ldr	r2, [pc, #180]	; (604 <opt_enc_init+0xc4>)
     550:	609a      	str	r2, [r3, #8]
	opt_enc[0].callback = opt_enc_irq_callback_0;
     552:	4a2d      	ldr	r2, [pc, #180]	; (608 <opt_enc_init+0xc8>)
     554:	60da      	str	r2, [r3, #12]
	
	opt_enc[1].IO_enc_A = EIC_1;
     556:	2211      	movs	r2, #17
     558:	611a      	str	r2, [r3, #16]
	opt_enc[1].IO_enc_B = IO_ENC_1;
     55a:	2251      	movs	r2, #81	; 0x51
     55c:	615a      	str	r2, [r3, #20]
	opt_enc[1].p_enc_steps = &enc_1_steps;
     55e:	4a2b      	ldr	r2, [pc, #172]	; (60c <opt_enc_init+0xcc>)
     560:	619a      	str	r2, [r3, #24]
	opt_enc[1].callback = opt_enc_irq_callback_1;
     562:	4a2b      	ldr	r2, [pc, #172]	; (610 <opt_enc_init+0xd0>)
     564:	61da      	str	r2, [r3, #28]
	
	opt_enc[2].IO_enc_A = EIC_2;
     566:	2212      	movs	r2, #18
     568:	621a      	str	r2, [r3, #32]
	opt_enc[2].IO_enc_B = IO_ENC_2;
     56a:	2223      	movs	r2, #35	; 0x23
     56c:	625a      	str	r2, [r3, #36]	; 0x24
	opt_enc[2].p_enc_steps = &enc_2_steps;
     56e:	4a29      	ldr	r2, [pc, #164]	; (614 <opt_enc_init+0xd4>)
     570:	629a      	str	r2, [r3, #40]	; 0x28
	opt_enc[2].callback = opt_enc_irq_callback_2;
     572:	4a29      	ldr	r2, [pc, #164]	; (618 <opt_enc_init+0xd8>)
     574:	62da      	str	r2, [r3, #44]	; 0x2c
	
	opt_enc[3].IO_enc_A = EIC_3;
     576:	2213      	movs	r2, #19
     578:	631a      	str	r2, [r3, #48]	; 0x30
	opt_enc[3].IO_enc_B = IO_ENC_3;
     57a:	2224      	movs	r2, #36	; 0x24
     57c:	635a      	str	r2, [r3, #52]	; 0x34
	opt_enc[3].p_enc_steps = &enc_3_steps;
     57e:	4a27      	ldr	r2, [pc, #156]	; (61c <opt_enc_init+0xdc>)
     580:	639a      	str	r2, [r3, #56]	; 0x38
	opt_enc[3].callback = opt_enc_irq_callback_3;
     582:	4a27      	ldr	r2, [pc, #156]	; (620 <opt_enc_init+0xe0>)
     584:	63da      	str	r2, [r3, #60]	; 0x3c
	
	opt_enc[4].IO_enc_A = EIC_4;
     586:	2214      	movs	r2, #20
     588:	641a      	str	r2, [r3, #64]	; 0x40
	opt_enc[4].IO_enc_B = IO_ENC_4;
     58a:	2252      	movs	r2, #82	; 0x52
     58c:	645a      	str	r2, [r3, #68]	; 0x44
	opt_enc[4].p_enc_steps = &enc_4_steps;
     58e:	4a25      	ldr	r2, [pc, #148]	; (624 <opt_enc_init+0xe4>)
     590:	649a      	str	r2, [r3, #72]	; 0x48
	opt_enc[4].callback = opt_enc_irq_callback_4;
     592:	4a25      	ldr	r2, [pc, #148]	; (628 <opt_enc_init+0xe8>)
     594:	64da      	str	r2, [r3, #76]	; 0x4c
	
	opt_enc[5].IO_enc_A = EIC_5;
     596:	2244      	movs	r2, #68	; 0x44
     598:	651a      	str	r2, [r3, #80]	; 0x50
	opt_enc[5].IO_enc_B = IO_ENC_5;
     59a:	2207      	movs	r2, #7
     59c:	655a      	str	r2, [r3, #84]	; 0x54
	opt_enc[5].p_enc_steps = &enc_5_steps;
     59e:	4a23      	ldr	r2, [pc, #140]	; (62c <opt_enc_init+0xec>)
     5a0:	659a      	str	r2, [r3, #88]	; 0x58
	opt_enc[5].callback = opt_enc_irq_callback_5;
     5a2:	4a23      	ldr	r2, [pc, #140]	; (630 <opt_enc_init+0xf0>)
     5a4:	65da      	str	r2, [r3, #92]	; 0x5c
	
	opt_enc[6].IO_enc_A = EIC_6;
     5a6:	2245      	movs	r2, #69	; 0x45
     5a8:	661a      	str	r2, [r3, #96]	; 0x60
	opt_enc[6].IO_enc_B = IO_ENC_6;
     5aa:	2222      	movs	r2, #34	; 0x22
     5ac:	665a      	str	r2, [r3, #100]	; 0x64
	opt_enc[6].p_enc_steps = &enc_6_steps;
     5ae:	4a21      	ldr	r2, [pc, #132]	; (634 <opt_enc_init+0xf4>)
     5b0:	669a      	str	r2, [r3, #104]	; 0x68
	opt_enc[6].callback = opt_enc_irq_callback_6;
     5b2:	4a21      	ldr	r2, [pc, #132]	; (638 <opt_enc_init+0xf8>)
     5b4:	66da      	str	r2, [r3, #108]	; 0x6c
	
	opt_enc[7].IO_enc_A = EIC_7;
     5b6:	2246      	movs	r2, #70	; 0x46
     5b8:	671a      	str	r2, [r3, #112]	; 0x70
	opt_enc[7].IO_enc_B = IO_ENC_7;
     5ba:	2248      	movs	r2, #72	; 0x48
     5bc:	675a      	str	r2, [r3, #116]	; 0x74
	opt_enc[7].p_enc_steps = &enc_7_steps;
     5be:	4a1f      	ldr	r2, [pc, #124]	; (63c <opt_enc_init+0xfc>)
     5c0:	679a      	str	r2, [r3, #120]	; 0x78
	opt_enc[7].callback = opt_enc_irq_callback_7;
     5c2:	4a1f      	ldr	r2, [pc, #124]	; (640 <opt_enc_init+0x100>)
     5c4:	67da      	str	r2, [r3, #124]	; 0x7c
	
	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
     5c6:	2400      	movs	r4, #0
		opt_enc_setup_IRQ_eic (i);
     5c8:	4d1e      	ldr	r5, [pc, #120]	; (644 <opt_enc_init+0x104>)
     5ca:	4620      	mov	r0, r4
     5cc:	47a8      	blx	r5
	opt_enc[7].IO_enc_A = EIC_7;
	opt_enc[7].IO_enc_B = IO_ENC_7;
	opt_enc[7].p_enc_steps = &enc_7_steps;
	opt_enc[7].callback = opt_enc_irq_callback_7;
	
	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
     5ce:	3401      	adds	r4, #1
     5d0:	2c08      	cmp	r4, #8
     5d2:	d1fa      	bne.n	5ca <opt_enc_init+0x8a>
     5d4:	2400      	movs	r4, #0
	#ifndef DEBUG
		printf("All EICs initialized.\r\n");
	#endif

	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
		opt_enc_setup_IO_B_gpio (i);
     5d6:	4d1c      	ldr	r5, [pc, #112]	; (648 <opt_enc_init+0x108>)
     5d8:	4620      	mov	r0, r4
     5da:	47a8      	blx	r5
	
	#ifndef DEBUG
		printf("All EICs initialized.\r\n");
	#endif

	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
     5dc:	3401      	adds	r4, #1
     5de:	2c08      	cmp	r4, #8
     5e0:	d1fa      	bne.n	5d8 <opt_enc_init+0x98>
     5e2:	2400      	movs	r4, #0
	#ifndef DEBUG		
		printf("All I/O channel B lines setup.\r\n");
	#endif

	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
		opt_enc_setup_IRQ_callback (i);
     5e4:	4d19      	ldr	r5, [pc, #100]	; (64c <opt_enc_init+0x10c>)
     5e6:	4620      	mov	r0, r4
     5e8:	47a8      	blx	r5
	
	#ifndef DEBUG		
		printf("All I/O channel B lines setup.\r\n");
	#endif

	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
     5ea:	3401      	adds	r4, #1
     5ec:	2c08      	cmp	r4, #8
     5ee:	d1fa      	bne.n	5e6 <opt_enc_init+0xa6>
     5f0:	2400      	movs	r4, #0
	#ifndef DEBUG		
		printf("All test callbacks initialized.\r\n");
	#endif
	
	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
		opt_enc_disable_IRQ (i);
     5f2:	4d17      	ldr	r5, [pc, #92]	; (650 <opt_enc_init+0x110>)
     5f4:	4620      	mov	r0, r4
     5f6:	47a8      	blx	r5
	
	#ifndef DEBUG		
		printf("All test callbacks initialized.\r\n");
	#endif
	
	for (uint32_t i = 0; i < OPT_Enc_Count; i++)
     5f8:	3401      	adds	r4, #1
     5fa:	2c08      	cmp	r4, #8
     5fc:	d1fa      	bne.n	5f4 <opt_enc_init+0xb4>
		opt_enc_disable_IRQ (i);
	
	#ifndef DEBUG
		printf("All IRQs disabled.\r\n");
	#endif
     5fe:	bd38      	pop	{r3, r4, r5, pc}
     600:	20000934 	.word	0x20000934
     604:	20000924 	.word	0x20000924
     608:	00000299 	.word	0x00000299
     60c:	20000930 	.word	0x20000930
     610:	000002b9 	.word	0x000002b9
     614:	200009b8 	.word	0x200009b8
     618:	000002d9 	.word	0x000002d9
     61c:	20000920 	.word	0x20000920
     620:	000002f9 	.word	0x000002f9
     624:	2000092c 	.word	0x2000092c
     628:	00000319 	.word	0x00000319
     62c:	200009b4 	.word	0x200009b4
     630:	00000339 	.word	0x00000339
     634:	2000091c 	.word	0x2000091c
     638:	00000359 	.word	0x00000359
     63c:	20000928 	.word	0x20000928
     640:	00000379 	.word	0x00000379
     644:	00000399 	.word	0x00000399
     648:	00000469 	.word	0x00000469
     64c:	00000425 	.word	0x00000425
     650:	000004e5 	.word	0x000004e5

00000654 <system_tick_start>:
	uint32_t ticks = 0;
	
	//@48MHz & ticks = 0x00FFFFFF ==> 3.3Hz
	//sysclk_get_cpu_hz = 47972352 = 0x02DC0000
	ticks = sysclk_get_cpu_hz() / TICK_FREQ;
	*p_sys_ticks = &sys_ticks;
     654:	4b07      	ldr	r3, [pc, #28]	; (674 <system_tick_start+0x20>)
     656:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     658:	4b07      	ldr	r3, [pc, #28]	; (678 <system_tick_start+0x24>)
     65a:	f641 723a 	movw	r2, #7994	; 0x1f3a
     65e:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
     660:	21f0      	movs	r1, #240	; 0xf0
     662:	4a06      	ldr	r2, [pc, #24]	; (67c <system_tick_start+0x28>)
     664:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     668:	2200      	movs	r2, #0
     66a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     66c:	2207      	movs	r2, #7
     66e:	601a      	str	r2, [r3, #0]
     670:	4770      	bx	lr
     672:	bf00      	nop
     674:	200009bc 	.word	0x200009bc
     678:	e000e010 	.word	0xe000e010
     67c:	e000ed00 	.word	0xe000ed00

00000680 <SysTick_Handler>:
		puts(" Hz\r");
	#endif
}

void SysTick_Handler(void) {
	sys_ticks++;
     680:	4b02      	ldr	r3, [pc, #8]	; (68c <SysTick_Handler+0xc>)
     682:	681a      	ldr	r2, [r3, #0]
     684:	3201      	adds	r2, #1
     686:	601a      	str	r2, [r3, #0]
     688:	4770      	bx	lr
     68a:	bf00      	nop
     68c:	200009bc 	.word	0x200009bc

00000690 <task_measure_speed>:

volatile uint32_t *p_sys_ticks;
opt_enc_type *p_group_opt_enc;
static speed_measure_type group_speed_measure [SPEED_MEASURE_COUNT];

void task_measure_speed (uint32_t speed_measure_ID) {
     690:	b4f0      	push	{r4, r5, r6, r7}
	
	P.newposition = abs(*p_group_opt_enc[speed_measure_ID].p_enc_steps);
     692:	4b14      	ldr	r3, [pc, #80]	; (6e4 <task_measure_speed+0x54>)
     694:	681b      	ldr	r3, [r3, #0]
     696:	eb03 1300 	add.w	r3, r3, r0, lsl #4
     69a:	689b      	ldr	r3, [r3, #8]
     69c:	681d      	ldr	r5, [r3, #0]
     69e:	4a12      	ldr	r2, [pc, #72]	; (6e8 <task_measure_speed+0x58>)
     6a0:	0044      	lsls	r4, r0, #1
     6a2:	1821      	adds	r1, r4, r0
     6a4:	00c9      	lsls	r1, r1, #3
     6a6:	1853      	adds	r3, r2, r1
     6a8:	2d00      	cmp	r5, #0
     6aa:	bfb8      	it	lt
     6ac:	426d      	neglt	r5, r5
     6ae:	605d      	str	r5, [r3, #4]
	P.newtime = *p_sys_ticks;
     6b0:	4d0e      	ldr	r5, [pc, #56]	; (6ec <task_measure_speed+0x5c>)
     6b2:	682d      	ldr	r5, [r5, #0]
     6b4:	682d      	ldr	r5, [r5, #0]
     6b6:	60dd      	str	r5, [r3, #12]
	
	//speed = delta distance / delta time
	//P.speed = ((float)(P.newposition - P.oldposition) / ((float)(P.newtime - P.oldtime)));
	//P.speed = ((float)(P.newposition - P.oldposition) * 1000 / ((float)(P.newtime - P.oldtime)));
	P.speed = (P.newposition - P.oldposition) * 1000 / ((int32_t)(P.newtime - P.oldtime));
     6b8:	685f      	ldr	r7, [r3, #4]
     6ba:	5856      	ldr	r6, [r2, r1]
     6bc:	1bbe      	subs	r6, r7, r6
     6be:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
     6c2:	fb07 f706 	mul.w	r7, r7, r6
     6c6:	689e      	ldr	r6, [r3, #8]
     6c8:	1bad      	subs	r5, r5, r6
     6ca:	fb97 f6f5 	sdiv	r6, r7, r5
     6ce:	611e      	str	r6, [r3, #16]
	printf ("\t"); printf_ftoa (P.speed, 5);
	printf ("\t"); printf_itoa (P.newposition - P.oldposition);
	printf ("\t"); printf_utoa (P.newtime - P.oldtime);
	printf ("\n");
	*/
	P.oldposition = P.newposition;
     6d0:	685d      	ldr	r5, [r3, #4]
     6d2:	5055      	str	r5, [r2, r1]
	P.oldtime = P.newtime;
     6d4:	68db      	ldr	r3, [r3, #12]
     6d6:	4420      	add	r0, r4
     6d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
     6dc:	6093      	str	r3, [r2, #8]
}
     6de:	bcf0      	pop	{r4, r5, r6, r7}
     6e0:	4770      	bx	lr
     6e2:	bf00      	nop
     6e4:	20000c28 	.word	0x20000c28
     6e8:	200009c0 	.word	0x200009c0
     6ec:	20000c2c 	.word	0x20000c2c

000006f0 <task_measure_speed_init>:

void task_measure_speed_init (	speed_measure_type **p_group_speed_measure, 
								opt_enc_type **p_temp_group_opt_enc, 
								volatile uint32_t **p_temp_sys_ticks) {
     6f0:	b410      	push	{r4}
	*p_group_speed_measure = group_speed_measure;
     6f2:	4c0b      	ldr	r4, [pc, #44]	; (720 <task_measure_speed_init+0x30>)
     6f4:	6004      	str	r4, [r0, #0]
	p_group_opt_enc = *p_temp_group_opt_enc;
     6f6:	6809      	ldr	r1, [r1, #0]
     6f8:	4b0a      	ldr	r3, [pc, #40]	; (724 <task_measure_speed_init+0x34>)
     6fa:	6019      	str	r1, [r3, #0]
	p_sys_ticks = *p_temp_sys_ticks;
     6fc:	6812      	ldr	r2, [r2, #0]
     6fe:	4b0a      	ldr	r3, [pc, #40]	; (728 <task_measure_speed_init+0x38>)
     700:	601a      	str	r2, [r3, #0]
     702:	4623      	mov	r3, r4
     704:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	
	for (int32_t i = 0; i < SPEED_MEASURE_COUNT; i++) {
		group_speed_measure[i].oldposition = 0;
     708:	2200      	movs	r2, #0
		group_speed_measure[i].oldtime = 0;
		group_speed_measure[i].speed = 0;
		
		group_speed_measure[i].function = task_measure_speed;
     70a:	4908      	ldr	r1, [pc, #32]	; (72c <task_measure_speed_init+0x3c>)
	*p_group_speed_measure = group_speed_measure;
	p_group_opt_enc = *p_temp_group_opt_enc;
	p_sys_ticks = *p_temp_sys_ticks;
	
	for (int32_t i = 0; i < SPEED_MEASURE_COUNT; i++) {
		group_speed_measure[i].oldposition = 0;
     70c:	601a      	str	r2, [r3, #0]
		group_speed_measure[i].oldtime = 0;
     70e:	609a      	str	r2, [r3, #8]
		group_speed_measure[i].speed = 0;
     710:	611a      	str	r2, [r3, #16]
		
		group_speed_measure[i].function = task_measure_speed;
     712:	6159      	str	r1, [r3, #20]
     714:	3318      	adds	r3, #24
								volatile uint32_t **p_temp_sys_ticks) {
	*p_group_speed_measure = group_speed_measure;
	p_group_opt_enc = *p_temp_group_opt_enc;
	p_sys_ticks = *p_temp_sys_ticks;
	
	for (int32_t i = 0; i < SPEED_MEASURE_COUNT; i++) {
     716:	4283      	cmp	r3, r0
     718:	d1f8      	bne.n	70c <task_measure_speed_init+0x1c>
		group_speed_measure[i].oldtime = 0;
		group_speed_measure[i].speed = 0;
		
		group_speed_measure[i].function = task_measure_speed;
	}
}
     71a:	f85d 4b04 	ldr.w	r4, [sp], #4
     71e:	4770      	bx	lr
     720:	200009c0 	.word	0x200009c0
     724:	20000c28 	.word	0x20000c28
     728:	20000c2c 	.word	0x20000c2c
     72c:	00000691 	.word	0x00000691

00000730 <tester_test_static>:
#include <asf.h>
#include <modules.h>
#include "tester.h"


uint32_t tester_test_static (uint32_t m_state, uint32_t pwm_val) {
     730:	b570      	push	{r4, r5, r6, lr}
     732:	460c      	mov	r4, r1
	
	switch (m_state) {
     734:	2815      	cmp	r0, #21
     736:	f200 82af 	bhi.w	c98 <tester_test_static+0x568>
     73a:	e8df f010 	tbh	[pc, r0, lsl #1]
     73e:	0016      	.short	0x0016
     740:	00520034 	.word	0x00520034
     744:	00b4007e 	.word	0x00b4007e
     748:	00fa00dc 	.word	0x00fa00dc
     74c:	0142011e 	.word	0x0142011e
     750:	01750161 	.word	0x01750161
     754:	019f018a 	.word	0x019f018a
     758:	01c901b4 	.word	0x01c901b4
     75c:	01f101dd 	.word	0x01f101dd
     760:	025d0227 	.word	0x025d0227
     764:	02870272 	.word	0x02870272
     768:	029a      	.short	0x029a
		case 0:
			//Start X1, X2 left
			dc_motor_set_speed (6, 0);
     76a:	2006      	movs	r0, #6
     76c:	2100      	movs	r1, #0
     76e:	4d9f      	ldr	r5, [pc, #636]	; (9ec <tester_test_static+0x2bc>)
     770:	47a8      	blx	r5
			dc_motor_set_speed (7, 0);
     772:	2007      	movs	r0, #7
     774:	2100      	movs	r1, #0
     776:	47a8      	blx	r5
		
			opt_enc_disable_IRQ (0);
     778:	2000      	movs	r0, #0
     77a:	4e9d      	ldr	r6, [pc, #628]	; (9f0 <tester_test_static+0x2c0>)
     77c:	47b0      	blx	r6
			opt_enc_disable_IRQ (3);// off Z
     77e:	2003      	movs	r0, #3
     780:	47b0      	blx	r6
		
			opt_enc_enable_IRQ (6);
     782:	2006      	movs	r0, #6
     784:	4e9b      	ldr	r6, [pc, #620]	; (9f4 <tester_test_static+0x2c4>)
     786:	47b0      	blx	r6
			opt_enc_enable_IRQ (1);
     788:	2001      	movs	r0, #1
     78a:	47b0      	blx	r6
		
			dc_motor_left (0);
     78c:	2000      	movs	r0, #0
     78e:	4e9a      	ldr	r6, [pc, #616]	; (9f8 <tester_test_static+0x2c8>)
     790:	47b0      	blx	r6
			dc_motor_left (1);
     792:	2001      	movs	r0, #1
     794:	47b0      	blx	r6
		
			dc_motor_set_speed (0, pwm_val);
     796:	2000      	movs	r0, #0
     798:	4621      	mov	r1, r4
     79a:	47a8      	blx	r5
			dc_motor_set_speed (1, pwm_val);
     79c:	2001      	movs	r0, #1
     79e:	4621      	mov	r1, r4
     7a0:	47a8      	blx	r5
		
			m_state = 1;
			return m_state;
     7a2:	2001      	movs	r0, #1
     7a4:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 1:
			//Start X1, X2 right
			dc_motor_set_speed (0, 0);
     7a6:	2000      	movs	r0, #0
     7a8:	4601      	mov	r1, r0
     7aa:	4d90      	ldr	r5, [pc, #576]	; (9ec <tester_test_static+0x2bc>)
     7ac:	47a8      	blx	r5
			dc_motor_set_speed (1, 0);
     7ae:	2001      	movs	r0, #1
     7b0:	2100      	movs	r1, #0
     7b2:	47a8      	blx	r5
		
			opt_enc_disable_IRQ (6);
     7b4:	2006      	movs	r0, #6
     7b6:	4e8e      	ldr	r6, [pc, #568]	; (9f0 <tester_test_static+0x2c0>)
     7b8:	47b0      	blx	r6
			opt_enc_disable_IRQ (1);// off X
     7ba:	2001      	movs	r0, #1
     7bc:	47b0      	blx	r6
		
			opt_enc_enable_IRQ (6);
     7be:	2006      	movs	r0, #6
     7c0:	4e8c      	ldr	r6, [pc, #560]	; (9f4 <tester_test_static+0x2c4>)
     7c2:	47b0      	blx	r6
			opt_enc_enable_IRQ (1);
     7c4:	2001      	movs	r0, #1
     7c6:	47b0      	blx	r6
		
			dc_motor_right (0);
     7c8:	2000      	movs	r0, #0
     7ca:	4e8c      	ldr	r6, [pc, #560]	; (9fc <tester_test_static+0x2cc>)
     7cc:	47b0      	blx	r6
			dc_motor_right (1);
     7ce:	2001      	movs	r0, #1
     7d0:	47b0      	blx	r6
		
			dc_motor_set_speed (0, pwm_val);
     7d2:	2000      	movs	r0, #0
     7d4:	4621      	mov	r1, r4
     7d6:	47a8      	blx	r5
			dc_motor_set_speed (1, pwm_val);
     7d8:	2001      	movs	r0, #1
     7da:	4621      	mov	r1, r4
     7dc:	47a8      	blx	r5
		
			m_state = 2;
			return m_state;
     7de:	2002      	movs	r0, #2
     7e0:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 2:
			//Start Y1, Y2, Y3, Y4 left
			dc_motor_set_speed (0, 0);
     7e2:	2000      	movs	r0, #0
     7e4:	4601      	mov	r1, r0
     7e6:	4d81      	ldr	r5, [pc, #516]	; (9ec <tester_test_static+0x2bc>)
     7e8:	47a8      	blx	r5
			dc_motor_set_speed (1, 0);
     7ea:	2001      	movs	r0, #1
     7ec:	2100      	movs	r1, #0
     7ee:	47a8      	blx	r5
		
			opt_enc_disable_IRQ (6);
     7f0:	2006      	movs	r0, #6
     7f2:	4e7f      	ldr	r6, [pc, #508]	; (9f0 <tester_test_static+0x2c0>)
     7f4:	47b0      	blx	r6
			opt_enc_disable_IRQ (1);// off X
     7f6:	2001      	movs	r0, #1
     7f8:	47b0      	blx	r6
		
			opt_enc_enable_IRQ (7);
     7fa:	2007      	movs	r0, #7
     7fc:	4e7d      	ldr	r6, [pc, #500]	; (9f4 <tester_test_static+0x2c4>)
     7fe:	47b0      	blx	r6
			opt_enc_enable_IRQ (4);
     800:	2004      	movs	r0, #4
     802:	47b0      	blx	r6
			opt_enc_enable_IRQ (5);
     804:	2005      	movs	r0, #5
     806:	47b0      	blx	r6
			opt_enc_enable_IRQ (2);
     808:	2002      	movs	r0, #2
     80a:	47b0      	blx	r6
		
			dc_motor_left (2);
     80c:	2002      	movs	r0, #2
     80e:	4e7a      	ldr	r6, [pc, #488]	; (9f8 <tester_test_static+0x2c8>)
     810:	47b0      	blx	r6
			dc_motor_left (3);
     812:	2003      	movs	r0, #3
     814:	47b0      	blx	r6
			dc_motor_left (4);
     816:	2004      	movs	r0, #4
     818:	47b0      	blx	r6
			dc_motor_left (5);
     81a:	2005      	movs	r0, #5
     81c:	47b0      	blx	r6
		
			dc_motor_set_speed (2, pwm_val);
     81e:	2002      	movs	r0, #2
     820:	4621      	mov	r1, r4
     822:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     824:	2003      	movs	r0, #3
     826:	4621      	mov	r1, r4
     828:	47a8      	blx	r5
			dc_motor_set_speed (4, pwm_val);
     82a:	2004      	movs	r0, #4
     82c:	4621      	mov	r1, r4
     82e:	47a8      	blx	r5
			dc_motor_set_speed (5, pwm_val);
     830:	2005      	movs	r0, #5
     832:	4621      	mov	r1, r4
     834:	47a8      	blx	r5
		
			m_state = 3;
			return m_state;
     836:	2003      	movs	r0, #3
     838:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 3:
			//Start Y1, Y2, Y3, Y4 right
			dc_motor_set_speed (2, 0);
     83a:	2002      	movs	r0, #2
     83c:	2100      	movs	r1, #0
     83e:	4d6b      	ldr	r5, [pc, #428]	; (9ec <tester_test_static+0x2bc>)
     840:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);
     842:	2003      	movs	r0, #3
     844:	2100      	movs	r1, #0
     846:	47a8      	blx	r5
			dc_motor_set_speed (4, 0);
     848:	2004      	movs	r0, #4
     84a:	2100      	movs	r1, #0
     84c:	47a8      	blx	r5
			dc_motor_set_speed (5, 0);
     84e:	2005      	movs	r0, #5
     850:	2100      	movs	r1, #0
     852:	47a8      	blx	r5
		
			opt_enc_disable_IRQ (7);
     854:	2007      	movs	r0, #7
     856:	4e66      	ldr	r6, [pc, #408]	; (9f0 <tester_test_static+0x2c0>)
     858:	47b0      	blx	r6
			opt_enc_disable_IRQ (4);
     85a:	2004      	movs	r0, #4
     85c:	47b0      	blx	r6
			opt_enc_disable_IRQ (5);
     85e:	2005      	movs	r0, #5
     860:	47b0      	blx	r6
			opt_enc_disable_IRQ (2);// off Y
     862:	2002      	movs	r0, #2
     864:	47b0      	blx	r6

			opt_enc_enable_IRQ (7);
     866:	2007      	movs	r0, #7
     868:	4e62      	ldr	r6, [pc, #392]	; (9f4 <tester_test_static+0x2c4>)
     86a:	47b0      	blx	r6
			opt_enc_enable_IRQ (4);
     86c:	2004      	movs	r0, #4
     86e:	47b0      	blx	r6
			opt_enc_enable_IRQ (5);
     870:	2005      	movs	r0, #5
     872:	47b0      	blx	r6
			opt_enc_enable_IRQ (2);
     874:	2002      	movs	r0, #2
     876:	47b0      	blx	r6
		
			dc_motor_right (2);
     878:	2002      	movs	r0, #2
     87a:	4e60      	ldr	r6, [pc, #384]	; (9fc <tester_test_static+0x2cc>)
     87c:	47b0      	blx	r6
			dc_motor_right (3);
     87e:	2003      	movs	r0, #3
     880:	47b0      	blx	r6
			dc_motor_right (4);
     882:	2004      	movs	r0, #4
     884:	47b0      	blx	r6
			dc_motor_right (5);
     886:	2005      	movs	r0, #5
     888:	47b0      	blx	r6
		
			dc_motor_set_speed (2, pwm_val);
     88a:	2002      	movs	r0, #2
     88c:	4621      	mov	r1, r4
     88e:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     890:	2003      	movs	r0, #3
     892:	4621      	mov	r1, r4
     894:	47a8      	blx	r5
			dc_motor_set_speed (4, pwm_val);
     896:	2004      	movs	r0, #4
     898:	4621      	mov	r1, r4
     89a:	47a8      	blx	r5
			dc_motor_set_speed (5, pwm_val);
     89c:	2005      	movs	r0, #5
     89e:	4621      	mov	r1, r4
     8a0:	47a8      	blx	r5
		
			m_state = 4;
			return m_state;
     8a2:	2004      	movs	r0, #4
     8a4:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 4:
			//Start Z1, Z2 left
			dc_motor_set_speed (2, 0);
     8a6:	2002      	movs	r0, #2
     8a8:	2100      	movs	r1, #0
     8aa:	4d50      	ldr	r5, [pc, #320]	; (9ec <tester_test_static+0x2bc>)
     8ac:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);
     8ae:	2003      	movs	r0, #3
     8b0:	2100      	movs	r1, #0
     8b2:	47a8      	blx	r5
			dc_motor_set_speed (4, 0);
     8b4:	2004      	movs	r0, #4
     8b6:	2100      	movs	r1, #0
     8b8:	47a8      	blx	r5
			dc_motor_set_speed (5, 0);
     8ba:	2005      	movs	r0, #5
     8bc:	2100      	movs	r1, #0
     8be:	47a8      	blx	r5
		
			opt_enc_disable_IRQ (7);
     8c0:	2007      	movs	r0, #7
     8c2:	4e4b      	ldr	r6, [pc, #300]	; (9f0 <tester_test_static+0x2c0>)
     8c4:	47b0      	blx	r6
			opt_enc_disable_IRQ (4);
     8c6:	2004      	movs	r0, #4
     8c8:	47b0      	blx	r6
			opt_enc_disable_IRQ (5);
     8ca:	2005      	movs	r0, #5
     8cc:	47b0      	blx	r6
			opt_enc_disable_IRQ (2);// off Y
     8ce:	2002      	movs	r0, #2
     8d0:	47b0      	blx	r6
		
			opt_enc_enable_IRQ (0);
     8d2:	2000      	movs	r0, #0
     8d4:	4e47      	ldr	r6, [pc, #284]	; (9f4 <tester_test_static+0x2c4>)
     8d6:	47b0      	blx	r6
			opt_enc_enable_IRQ (3);
     8d8:	2003      	movs	r0, #3
     8da:	47b0      	blx	r6
		
			dc_motor_left (6);
     8dc:	2006      	movs	r0, #6
     8de:	4e46      	ldr	r6, [pc, #280]	; (9f8 <tester_test_static+0x2c8>)
     8e0:	47b0      	blx	r6
			dc_motor_left (7);
     8e2:	2007      	movs	r0, #7
     8e4:	47b0      	blx	r6
		
			dc_motor_set_speed (6, pwm_val);
     8e6:	2006      	movs	r0, #6
     8e8:	4621      	mov	r1, r4
     8ea:	47a8      	blx	r5
			dc_motor_set_speed (7, pwm_val);
     8ec:	2007      	movs	r0, #7
     8ee:	4621      	mov	r1, r4
     8f0:	47a8      	blx	r5
		
			m_state = 5;
			return m_state;
     8f2:	2005      	movs	r0, #5
     8f4:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 5:
			//Start Z1, Z2 right
			dc_motor_set_speed (6, 0);
     8f6:	2006      	movs	r0, #6
     8f8:	2100      	movs	r1, #0
     8fa:	4d3c      	ldr	r5, [pc, #240]	; (9ec <tester_test_static+0x2bc>)
     8fc:	47a8      	blx	r5
			dc_motor_set_speed (7, 0);
     8fe:	2007      	movs	r0, #7
     900:	2100      	movs	r1, #0
     902:	47a8      	blx	r5
		
			opt_enc_disable_IRQ (0);
     904:	2000      	movs	r0, #0
     906:	4e3a      	ldr	r6, [pc, #232]	; (9f0 <tester_test_static+0x2c0>)
     908:	47b0      	blx	r6
			opt_enc_disable_IRQ (3);// off Z
     90a:	2003      	movs	r0, #3
     90c:	47b0      	blx	r6

			opt_enc_enable_IRQ (0);
     90e:	2000      	movs	r0, #0
     910:	4e38      	ldr	r6, [pc, #224]	; (9f4 <tester_test_static+0x2c4>)
     912:	47b0      	blx	r6
			opt_enc_enable_IRQ (3);
     914:	2003      	movs	r0, #3
     916:	47b0      	blx	r6
		
			dc_motor_right (6);
     918:	2006      	movs	r0, #6
     91a:	4e38      	ldr	r6, [pc, #224]	; (9fc <tester_test_static+0x2cc>)
     91c:	47b0      	blx	r6
			dc_motor_right (7);
     91e:	2007      	movs	r0, #7
     920:	47b0      	blx	r6
		
			dc_motor_set_speed (6, pwm_val);
     922:	2006      	movs	r0, #6
     924:	4621      	mov	r1, r4
     926:	47a8      	blx	r5
			dc_motor_set_speed (7, pwm_val);
     928:	2007      	movs	r0, #7
     92a:	4621      	mov	r1, r4
     92c:	47a8      	blx	r5

			m_state = 0;
			return m_state;
     92e:	2000      	movs	r0, #0
     930:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 6:
			//Start Y1, Y2, Y3, Y4 left -- Only Y test
			dc_motor_set_speed (2, 0);
     932:	2002      	movs	r0, #2
     934:	2100      	movs	r1, #0
     936:	4d2d      	ldr	r5, [pc, #180]	; (9ec <tester_test_static+0x2bc>)
     938:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);
     93a:	2003      	movs	r0, #3
     93c:	2100      	movs	r1, #0
     93e:	47a8      	blx	r5
			dc_motor_set_speed (4, 0);
     940:	2004      	movs	r0, #4
     942:	2100      	movs	r1, #0
     944:	47a8      	blx	r5
			dc_motor_set_speed (5, 0);
     946:	2005      	movs	r0, #5
     948:	2100      	movs	r1, #0
     94a:	47a8      	blx	r5
			//opt_enc_enable_IRQ (7);
			//opt_enc_enable_IRQ (4);
			//opt_enc_enable_IRQ (5);
			//opt_enc_enable_IRQ (2);
		
			dc_motor_left (2);
     94c:	2002      	movs	r0, #2
     94e:	4e2a      	ldr	r6, [pc, #168]	; (9f8 <tester_test_static+0x2c8>)
     950:	47b0      	blx	r6
			dc_motor_left (3);
     952:	2003      	movs	r0, #3
     954:	47b0      	blx	r6
			dc_motor_left (4);
     956:	2004      	movs	r0, #4
     958:	47b0      	blx	r6
			dc_motor_left (5);
     95a:	2005      	movs	r0, #5
     95c:	47b0      	blx	r6
		
			dc_motor_set_speed (2, pwm_val);
     95e:	2002      	movs	r0, #2
     960:	4621      	mov	r1, r4
     962:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     964:	2003      	movs	r0, #3
     966:	4621      	mov	r1, r4
     968:	47a8      	blx	r5
			dc_motor_set_speed (4, pwm_val);
     96a:	2004      	movs	r0, #4
     96c:	4621      	mov	r1, r4
     96e:	47a8      	blx	r5
			dc_motor_set_speed (5, pwm_val);
     970:	2005      	movs	r0, #5
     972:	4621      	mov	r1, r4
     974:	47a8      	blx	r5
		
			m_state = 7;
			return m_state;
     976:	2007      	movs	r0, #7
     978:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 7:
			//Start Y1, Y2, Y3, Y4 right -- Only Y test
			dc_motor_set_speed (2, 0);
     97a:	2002      	movs	r0, #2
     97c:	2100      	movs	r1, #0
     97e:	4d1b      	ldr	r5, [pc, #108]	; (9ec <tester_test_static+0x2bc>)
     980:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);
     982:	2003      	movs	r0, #3
     984:	2100      	movs	r1, #0
     986:	47a8      	blx	r5
			dc_motor_set_speed (4, 0);
     988:	2004      	movs	r0, #4
     98a:	2100      	movs	r1, #0
     98c:	47a8      	blx	r5
			dc_motor_set_speed (5, 0);
     98e:	2005      	movs	r0, #5
     990:	2100      	movs	r1, #0
     992:	47a8      	blx	r5
			//opt_enc_enable_IRQ (7);
			//opt_enc_enable_IRQ (4);
			//opt_enc_enable_IRQ (5);
			//opt_enc_enable_IRQ (2);
		
			dc_motor_right (2);
     994:	2002      	movs	r0, #2
     996:	4e19      	ldr	r6, [pc, #100]	; (9fc <tester_test_static+0x2cc>)
     998:	47b0      	blx	r6
			dc_motor_right (3);
     99a:	2003      	movs	r0, #3
     99c:	47b0      	blx	r6
			dc_motor_right (4);
     99e:	2004      	movs	r0, #4
     9a0:	47b0      	blx	r6
			dc_motor_right (5);
     9a2:	2005      	movs	r0, #5
     9a4:	47b0      	blx	r6
		
			dc_motor_set_speed (2, pwm_val);
     9a6:	2002      	movs	r0, #2
     9a8:	4621      	mov	r1, r4
     9aa:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     9ac:	2003      	movs	r0, #3
     9ae:	4621      	mov	r1, r4
     9b0:	47a8      	blx	r5
			dc_motor_set_speed (4, pwm_val);
     9b2:	2004      	movs	r0, #4
     9b4:	4621      	mov	r1, r4
     9b6:	47a8      	blx	r5
			dc_motor_set_speed (5, pwm_val);
     9b8:	2005      	movs	r0, #5
     9ba:	4621      	mov	r1, r4
     9bc:	47a8      	blx	r5
		
			m_state = 6;
			return m_state;
     9be:	2006      	movs	r0, #6
     9c0:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 8:
			//Start Z1, Z2 left -- Only Z test
			dc_motor_set_speed (6, 0);
     9c2:	2006      	movs	r0, #6
     9c4:	2100      	movs	r1, #0
     9c6:	4d09      	ldr	r5, [pc, #36]	; (9ec <tester_test_static+0x2bc>)
     9c8:	47a8      	blx	r5
			dc_motor_set_speed (7, 0);
     9ca:	2007      	movs	r0, #7
     9cc:	2100      	movs	r1, #0
     9ce:	47a8      	blx	r5
			//opt_enc_disable_IRQ (0);
			//opt_enc_disable_IRQ (3);	//off Z
			//opt_enc_enable_IRQ (0);
			//opt_enc_enable_IRQ (3);
		
			dc_motor_left (6);
     9d0:	2006      	movs	r0, #6
     9d2:	4e09      	ldr	r6, [pc, #36]	; (9f8 <tester_test_static+0x2c8>)
     9d4:	47b0      	blx	r6
			dc_motor_left (7);
     9d6:	2007      	movs	r0, #7
     9d8:	47b0      	blx	r6
		
			dc_motor_set_speed (6, pwm_val);
     9da:	2006      	movs	r0, #6
     9dc:	4621      	mov	r1, r4
     9de:	47a8      	blx	r5
			dc_motor_set_speed (7, pwm_val);
     9e0:	2007      	movs	r0, #7
     9e2:	4621      	mov	r1, r4
     9e4:	47a8      	blx	r5
		
			m_state = 9;
			return m_state;
     9e6:	2009      	movs	r0, #9
     9e8:	bd70      	pop	{r4, r5, r6, pc}
     9ea:	bf00      	nop
     9ec:	00002b95 	.word	0x00002b95
     9f0:	000004e5 	.word	0x000004e5
     9f4:	000004bd 	.word	0x000004bd
     9f8:	00002b45 	.word	0x00002b45
     9fc:	00002b6d 	.word	0x00002b6d
		break;
		case 9:
			//Start Z1, Z2 right -- Only Z test
			dc_motor_set_speed (6, 0);
     a00:	2006      	movs	r0, #6
     a02:	2100      	movs	r1, #0
     a04:	4da5      	ldr	r5, [pc, #660]	; (c9c <tester_test_static+0x56c>)
     a06:	47a8      	blx	r5
			dc_motor_set_speed (7, 0);
     a08:	2007      	movs	r0, #7
     a0a:	2100      	movs	r1, #0
     a0c:	47a8      	blx	r5
			//opt_enc_disable_IRQ (0);
			//opt_enc_disable_IRQ (3);	//off Z
			//opt_enc_enable_IRQ (0);
			//opt_enc_enable_IRQ (3);
		
			dc_motor_right (6);
     a0e:	2006      	movs	r0, #6
     a10:	4ea3      	ldr	r6, [pc, #652]	; (ca0 <tester_test_static+0x570>)
     a12:	47b0      	blx	r6
			dc_motor_right (7);
     a14:	2007      	movs	r0, #7
     a16:	47b0      	blx	r6
		
			dc_motor_set_speed (6, pwm_val);
     a18:	2006      	movs	r0, #6
     a1a:	4621      	mov	r1, r4
     a1c:	47a8      	blx	r5
			dc_motor_set_speed (7, pwm_val);
     a1e:	2007      	movs	r0, #7
     a20:	4621      	mov	r1, r4
     a22:	47a8      	blx	r5

			m_state = 8;
			return m_state;
     a24:	2008      	movs	r0, #8
     a26:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 10:
			//Start X1, X2 left -- Only X test
			dc_motor_set_speed (0, 0);
     a28:	2000      	movs	r0, #0
     a2a:	4601      	mov	r1, r0
     a2c:	4d9b      	ldr	r5, [pc, #620]	; (c9c <tester_test_static+0x56c>)
     a2e:	47a8      	blx	r5
			dc_motor_set_speed (1, 0);
     a30:	2001      	movs	r0, #1
     a32:	2100      	movs	r1, #0
     a34:	47a8      	blx	r5
			//opt_enc_disable_IRQ (6);
			//opt_enc_disable_IRQ (1);	//off X
			//opt_enc_enable_IRQ (6);
			//opt_enc_enable_IRQ (1);
		
			dc_motor_left (0);
     a36:	2000      	movs	r0, #0
     a38:	4e9a      	ldr	r6, [pc, #616]	; (ca4 <tester_test_static+0x574>)
     a3a:	47b0      	blx	r6
			dc_motor_left (1);
     a3c:	2001      	movs	r0, #1
     a3e:	47b0      	blx	r6
		
			dc_motor_set_speed (0, pwm_val - 200);
     a40:	2000      	movs	r0, #0
     a42:	f1a4 01c8 	sub.w	r1, r4, #200	; 0xc8
     a46:	47a8      	blx	r5
			dc_motor_set_speed (1, pwm_val);
     a48:	2001      	movs	r0, #1
     a4a:	4621      	mov	r1, r4
     a4c:	47a8      	blx	r5
		
			m_state = 11;
			return m_state;
     a4e:	200b      	movs	r0, #11
     a50:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 11:
			//Start X1, X2 right -- Only X test
			dc_motor_set_speed (0, 0);
     a52:	2000      	movs	r0, #0
     a54:	4601      	mov	r1, r0
     a56:	4d91      	ldr	r5, [pc, #580]	; (c9c <tester_test_static+0x56c>)
     a58:	47a8      	blx	r5
			dc_motor_set_speed (1, 0);
     a5a:	2001      	movs	r0, #1
     a5c:	2100      	movs	r1, #0
     a5e:	47a8      	blx	r5
			//opt_enc_disable_IRQ (6);
			//opt_enc_disable_IRQ (1);	//off X
			//opt_enc_enable_IRQ (6);
			//opt_enc_enable_IRQ (1);
		
			dc_motor_right (0);
     a60:	2000      	movs	r0, #0
     a62:	4e8f      	ldr	r6, [pc, #572]	; (ca0 <tester_test_static+0x570>)
     a64:	47b0      	blx	r6
			dc_motor_right (1);
     a66:	2001      	movs	r0, #1
     a68:	47b0      	blx	r6
		
			dc_motor_set_speed (0, pwm_val - 200);
     a6a:	2000      	movs	r0, #0
     a6c:	f1a4 01c8 	sub.w	r1, r4, #200	; 0xc8
     a70:	47a8      	blx	r5
			dc_motor_set_speed (1, pwm_val);
     a72:	2001      	movs	r0, #1
     a74:	4621      	mov	r1, r4
     a76:	47a8      	blx	r5
		
			m_state = 10;
			return m_state;
     a78:	200a      	movs	r0, #10
     a7a:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 12:
			//Start Y1, Y2 left -- Only bottom Y test
			dc_motor_set_speed (2, 0);	//stop Y1
     a7c:	2002      	movs	r0, #2
     a7e:	2100      	movs	r1, #0
     a80:	4d86      	ldr	r5, [pc, #536]	; (c9c <tester_test_static+0x56c>)
     a82:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);	//stop Y2
     a84:	2003      	movs	r0, #3
     a86:	2100      	movs	r1, #0
     a88:	47a8      	blx	r5
			//opt_enc_disable_IRQ (7);
			//opt_enc_disable_IRQ (4);	//encoder interrupt off for Y1, Y2
			//opt_enc_enable_IRQ (7);
			//opt_enc_enable_IRQ (4);	//encoder interrupt on for Y1, Y2
		
			dc_motor_left (2);
     a8a:	2002      	movs	r0, #2
     a8c:	4e85      	ldr	r6, [pc, #532]	; (ca4 <tester_test_static+0x574>)
     a8e:	47b0      	blx	r6
			dc_motor_left (3);
     a90:	2003      	movs	r0, #3
     a92:	47b0      	blx	r6
		
			dc_motor_set_speed (2, pwm_val - 100);
     a94:	2002      	movs	r0, #2
     a96:	f1a4 0164 	sub.w	r1, r4, #100	; 0x64
     a9a:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     a9c:	2003      	movs	r0, #3
     a9e:	4621      	mov	r1, r4
     aa0:	47a8      	blx	r5
		
			m_state = 13;
			return m_state;
     aa2:	200d      	movs	r0, #13
     aa4:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 13:
			//Start Y1, Y2 right -- Only bottom Y test
			dc_motor_set_speed (2, 0);
     aa6:	2002      	movs	r0, #2
     aa8:	2100      	movs	r1, #0
     aaa:	4d7c      	ldr	r5, [pc, #496]	; (c9c <tester_test_static+0x56c>)
     aac:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);
     aae:	2003      	movs	r0, #3
     ab0:	2100      	movs	r1, #0
     ab2:	47a8      	blx	r5
			//opt_enc_disable_IRQ (7);
			//opt_enc_disable_IRQ (4);	//off Y
			//opt_enc_enable_IRQ (7);
			//opt_enc_enable_IRQ (4);
		
			dc_motor_right (2);
     ab4:	2002      	movs	r0, #2
     ab6:	4e7a      	ldr	r6, [pc, #488]	; (ca0 <tester_test_static+0x570>)
     ab8:	47b0      	blx	r6
			dc_motor_right (3);
     aba:	2003      	movs	r0, #3
     abc:	47b0      	blx	r6
		
			dc_motor_set_speed (2, pwm_val - 100);
     abe:	2002      	movs	r0, #2
     ac0:	f1a4 0164 	sub.w	r1, r4, #100	; 0x64
     ac4:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     ac6:	2003      	movs	r0, #3
     ac8:	4621      	mov	r1, r4
     aca:	47a8      	blx	r5
		
			m_state = 12;
			return m_state;
     acc:	200c      	movs	r0, #12
     ace:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 14:
			//Start Y3, Y4 left -- Only top Y test
			dc_motor_set_speed (4, 0);
     ad0:	2004      	movs	r0, #4
     ad2:	2100      	movs	r1, #0
     ad4:	4d71      	ldr	r5, [pc, #452]	; (c9c <tester_test_static+0x56c>)
     ad6:	47a8      	blx	r5
			dc_motor_set_speed (5, 0);
     ad8:	2005      	movs	r0, #5
     ada:	2100      	movs	r1, #0
     adc:	47a8      	blx	r5
			//opt_enc_disable_IRQ (5);
			//opt_enc_disable_IRQ (2);	//off Y
			//opt_enc_enable_IRQ (5);
			//opt_enc_enable_IRQ (2);
		
			dc_motor_left (4);
     ade:	2004      	movs	r0, #4
     ae0:	4e70      	ldr	r6, [pc, #448]	; (ca4 <tester_test_static+0x574>)
     ae2:	47b0      	blx	r6
			dc_motor_left (5);
     ae4:	2005      	movs	r0, #5
     ae6:	47b0      	blx	r6
		
			dc_motor_set_speed (4, pwm_val);
     ae8:	2004      	movs	r0, #4
     aea:	4621      	mov	r1, r4
     aec:	47a8      	blx	r5
			dc_motor_set_speed (5, pwm_val);
     aee:	2005      	movs	r0, #5
     af0:	4621      	mov	r1, r4
     af2:	47a8      	blx	r5
		
			m_state = 15;
			return m_state;
     af4:	200f      	movs	r0, #15
     af6:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 15:
			//Start Y3, Y4 right -- Only top Y test
			dc_motor_set_speed (4, 0);
     af8:	2004      	movs	r0, #4
     afa:	2100      	movs	r1, #0
     afc:	4d67      	ldr	r5, [pc, #412]	; (c9c <tester_test_static+0x56c>)
     afe:	47a8      	blx	r5
			dc_motor_set_speed (5, 0);
     b00:	2005      	movs	r0, #5
     b02:	2100      	movs	r1, #0
     b04:	47a8      	blx	r5
			//opt_enc_disable_IRQ (5);
			//opt_enc_disable_IRQ (2);	//off Y
			//opt_enc_enable_IRQ (5);
			//opt_enc_enable_IRQ (2);
		
			dc_motor_right (4);
     b06:	2004      	movs	r0, #4
     b08:	4e65      	ldr	r6, [pc, #404]	; (ca0 <tester_test_static+0x570>)
     b0a:	47b0      	blx	r6
			dc_motor_right (5);
     b0c:	2005      	movs	r0, #5
     b0e:	47b0      	blx	r6
		
			dc_motor_set_speed (4, pwm_val);
     b10:	2004      	movs	r0, #4
     b12:	4621      	mov	r1, r4
     b14:	47a8      	blx	r5
			dc_motor_set_speed (5, pwm_val);
     b16:	2005      	movs	r0, #5
     b18:	4621      	mov	r1, r4
     b1a:	47a8      	blx	r5
		
			m_state = 14;
			return m_state;
     b1c:	200e      	movs	r0, #14
     b1e:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 16:
			//Start X1, X2, Y1, Y2, Z1, Z2 left
			dc_motor_set_speed (0, 0);
     b20:	2000      	movs	r0, #0
     b22:	4601      	mov	r1, r0
     b24:	4d5d      	ldr	r5, [pc, #372]	; (c9c <tester_test_static+0x56c>)
     b26:	47a8      	blx	r5
			dc_motor_set_speed (1, 0);
     b28:	2001      	movs	r0, #1
     b2a:	2100      	movs	r1, #0
     b2c:	47a8      	blx	r5
			dc_motor_set_speed (2, 0);
     b2e:	2002      	movs	r0, #2
     b30:	2100      	movs	r1, #0
     b32:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);
     b34:	2003      	movs	r0, #3
     b36:	2100      	movs	r1, #0
     b38:	47a8      	blx	r5
			dc_motor_set_speed (6, 0);
     b3a:	2006      	movs	r0, #6
     b3c:	2100      	movs	r1, #0
     b3e:	47a8      	blx	r5
			dc_motor_set_speed (7, 0);
     b40:	2007      	movs	r0, #7
     b42:	2100      	movs	r1, #0
     b44:	47a8      	blx	r5
			
			dc_motor_left (0); //X1
     b46:	2000      	movs	r0, #0
     b48:	4e56      	ldr	r6, [pc, #344]	; (ca4 <tester_test_static+0x574>)
     b4a:	47b0      	blx	r6
			dc_motor_left (1); //X2
     b4c:	2001      	movs	r0, #1
     b4e:	47b0      	blx	r6
			dc_motor_left (2); //Y1
     b50:	2002      	movs	r0, #2
     b52:	47b0      	blx	r6
			dc_motor_left (3); //Y2
     b54:	2003      	movs	r0, #3
     b56:	47b0      	blx	r6
			dc_motor_left (6); //Z1
     b58:	2006      	movs	r0, #6
     b5a:	47b0      	blx	r6
			dc_motor_left (7); //Z2
     b5c:	2007      	movs	r0, #7
     b5e:	47b0      	blx	r6
		
			dc_motor_set_speed (0, pwm_val - 100);
     b60:	f1a4 0664 	sub.w	r6, r4, #100	; 0x64
     b64:	2000      	movs	r0, #0
     b66:	4631      	mov	r1, r6
     b68:	47a8      	blx	r5
			dc_motor_set_speed (1, pwm_val);
     b6a:	2001      	movs	r0, #1
     b6c:	4621      	mov	r1, r4
     b6e:	47a8      	blx	r5
			dc_motor_set_speed (2, pwm_val - 100);
     b70:	2002      	movs	r0, #2
     b72:	4631      	mov	r1, r6
     b74:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     b76:	2003      	movs	r0, #3
     b78:	4621      	mov	r1, r4
     b7a:	47a8      	blx	r5
			dc_motor_set_speed (6, pwm_val);
     b7c:	2006      	movs	r0, #6
     b7e:	4621      	mov	r1, r4
     b80:	47a8      	blx	r5
			dc_motor_set_speed (7, pwm_val);
     b82:	2007      	movs	r0, #7
     b84:	4621      	mov	r1, r4
     b86:	47a8      	blx	r5
		
			m_state = 17;
			return m_state;
     b88:	2011      	movs	r0, #17
     b8a:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 17:
			//Start X1, X2, Y1, Y2, Z1, Z2 right
			dc_motor_set_speed (0, 0);
     b8c:	2000      	movs	r0, #0
     b8e:	4601      	mov	r1, r0
     b90:	4d42      	ldr	r5, [pc, #264]	; (c9c <tester_test_static+0x56c>)
     b92:	47a8      	blx	r5
			dc_motor_set_speed (1, 0);
     b94:	2001      	movs	r0, #1
     b96:	2100      	movs	r1, #0
     b98:	47a8      	blx	r5
			dc_motor_set_speed (2, 0);
     b9a:	2002      	movs	r0, #2
     b9c:	2100      	movs	r1, #0
     b9e:	47a8      	blx	r5
			dc_motor_set_speed (3, 0);
     ba0:	2003      	movs	r0, #3
     ba2:	2100      	movs	r1, #0
     ba4:	47a8      	blx	r5
			dc_motor_set_speed (6, 0);
     ba6:	2006      	movs	r0, #6
     ba8:	2100      	movs	r1, #0
     baa:	47a8      	blx	r5
			dc_motor_set_speed (7, 0);
     bac:	2007      	movs	r0, #7
     bae:	2100      	movs	r1, #0
     bb0:	47a8      	blx	r5
		
			dc_motor_right (0); //X1
     bb2:	2000      	movs	r0, #0
     bb4:	4e3a      	ldr	r6, [pc, #232]	; (ca0 <tester_test_static+0x570>)
     bb6:	47b0      	blx	r6
			dc_motor_right (1); //X2
     bb8:	2001      	movs	r0, #1
     bba:	47b0      	blx	r6
			dc_motor_right (2); //Y1
     bbc:	2002      	movs	r0, #2
     bbe:	47b0      	blx	r6
			dc_motor_right (3); //Y2
     bc0:	2003      	movs	r0, #3
     bc2:	47b0      	blx	r6
			dc_motor_right (6); //Z1
     bc4:	2006      	movs	r0, #6
     bc6:	47b0      	blx	r6
			dc_motor_right (7); //Z2
     bc8:	2007      	movs	r0, #7
     bca:	47b0      	blx	r6
		
			dc_motor_set_speed (0, pwm_val);
     bcc:	2000      	movs	r0, #0
     bce:	4621      	mov	r1, r4
     bd0:	47a8      	blx	r5
			dc_motor_set_speed (1, pwm_val);
     bd2:	2001      	movs	r0, #1
     bd4:	4621      	mov	r1, r4
     bd6:	47a8      	blx	r5
			dc_motor_set_speed (2, pwm_val - 100);
     bd8:	f1a4 0664 	sub.w	r6, r4, #100	; 0x64
     bdc:	2002      	movs	r0, #2
     bde:	4631      	mov	r1, r6
     be0:	47a8      	blx	r5
			dc_motor_set_speed (3, pwm_val);
     be2:	2003      	movs	r0, #3
     be4:	4621      	mov	r1, r4
     be6:	47a8      	blx	r5
			dc_motor_set_speed (6, pwm_val - 100);
     be8:	2006      	movs	r0, #6
     bea:	4631      	mov	r1, r6
     bec:	47a8      	blx	r5
			dc_motor_set_speed (7, pwm_val);
     bee:	2007      	movs	r0, #7
     bf0:	4621      	mov	r1, r4
     bf2:	47a8      	blx	r5
		
			m_state = 16;
			return m_state;
     bf4:	2010      	movs	r0, #16
     bf6:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 18:
			//Start Y1, Y2 right -- Only bottom Y test
			dc_motor_set_speed (7, 0);
     bf8:	2007      	movs	r0, #7
     bfa:	2100      	movs	r1, #0
     bfc:	4d27      	ldr	r5, [pc, #156]	; (c9c <tester_test_static+0x56c>)
     bfe:	47a8      	blx	r5
			dc_motor_set_speed (4, 0);
     c00:	2004      	movs	r0, #4
     c02:	2100      	movs	r1, #0
     c04:	47a8      	blx	r5
		
			dc_motor_left (7);
     c06:	2007      	movs	r0, #7
     c08:	4e26      	ldr	r6, [pc, #152]	; (ca4 <tester_test_static+0x574>)
     c0a:	47b0      	blx	r6
			dc_motor_left (4);
     c0c:	2004      	movs	r0, #4
     c0e:	47b0      	blx	r6
		
			dc_motor_set_speed (7, pwm_val - 100);
     c10:	2007      	movs	r0, #7
     c12:	f1a4 0164 	sub.w	r1, r4, #100	; 0x64
     c16:	47a8      	blx	r5
			dc_motor_set_speed (4, pwm_val);
     c18:	2004      	movs	r0, #4
     c1a:	4621      	mov	r1, r4
     c1c:	47a8      	blx	r5
			m_state = 19;
			return m_state;
     c1e:	2013      	movs	r0, #19
     c20:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 19:
			//Start Y1, Y2 right -- Only bottom Y test
			dc_motor_set_speed (7, 0);
     c22:	2007      	movs	r0, #7
     c24:	2100      	movs	r1, #0
     c26:	4d1d      	ldr	r5, [pc, #116]	; (c9c <tester_test_static+0x56c>)
     c28:	47a8      	blx	r5
			dc_motor_set_speed (4, 0);
     c2a:	2004      	movs	r0, #4
     c2c:	2100      	movs	r1, #0
     c2e:	47a8      	blx	r5

			dc_motor_right (7);
     c30:	2007      	movs	r0, #7
     c32:	4e1b      	ldr	r6, [pc, #108]	; (ca0 <tester_test_static+0x570>)
     c34:	47b0      	blx	r6
			dc_motor_right (4);
     c36:	2004      	movs	r0, #4
     c38:	47b0      	blx	r6
			
			dc_motor_set_speed (7, pwm_val - 100);
     c3a:	2007      	movs	r0, #7
     c3c:	f1a4 0164 	sub.w	r1, r4, #100	; 0x64
     c40:	47a8      	blx	r5
			dc_motor_set_speed (4, pwm_val);
     c42:	2004      	movs	r0, #4
     c44:	4621      	mov	r1, r4
     c46:	47a8      	blx	r5
			m_state = 18;
			return m_state;
     c48:	2012      	movs	r0, #18
     c4a:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 20:
			dc_motor_stop (X1);
     c4c:	2006      	movs	r0, #6
     c4e:	4d16      	ldr	r5, [pc, #88]	; (ca8 <tester_test_static+0x578>)
     c50:	47a8      	blx	r5
			dc_motor_stop (X2);
     c52:	2001      	movs	r0, #1
     c54:	47a8      	blx	r5
			
			dc_motor_left (X1);
     c56:	2006      	movs	r0, #6
     c58:	4d12      	ldr	r5, [pc, #72]	; (ca4 <tester_test_static+0x574>)
     c5a:	47a8      	blx	r5
			dc_motor_left (X2);
     c5c:	2001      	movs	r0, #1
     c5e:	47a8      	blx	r5
			
			dc_motor_set_speed (X1, pwm_val);
     c60:	2006      	movs	r0, #6
     c62:	4621      	mov	r1, r4
     c64:	4d0d      	ldr	r5, [pc, #52]	; (c9c <tester_test_static+0x56c>)
     c66:	47a8      	blx	r5
			dc_motor_set_speed (X2, pwm_val);
     c68:	2001      	movs	r0, #1
     c6a:	4621      	mov	r1, r4
     c6c:	47a8      	blx	r5
			m_state = 21;
			return m_state;
     c6e:	2015      	movs	r0, #21
     c70:	bd70      	pop	{r4, r5, r6, pc}
		break;
		case 21:
			dc_motor_stop (X1);
     c72:	2006      	movs	r0, #6
     c74:	4d0c      	ldr	r5, [pc, #48]	; (ca8 <tester_test_static+0x578>)
     c76:	47a8      	blx	r5
			dc_motor_stop (X2);
     c78:	2001      	movs	r0, #1
     c7a:	47a8      	blx	r5
			
			dc_motor_right (X1);
     c7c:	2006      	movs	r0, #6
     c7e:	4d08      	ldr	r5, [pc, #32]	; (ca0 <tester_test_static+0x570>)
     c80:	47a8      	blx	r5
			dc_motor_right (X2);
     c82:	2001      	movs	r0, #1
     c84:	47a8      	blx	r5
			
			dc_motor_set_speed (X1, pwm_val);
     c86:	2006      	movs	r0, #6
     c88:	4621      	mov	r1, r4
     c8a:	4d04      	ldr	r5, [pc, #16]	; (c9c <tester_test_static+0x56c>)
     c8c:	47a8      	blx	r5
			dc_motor_set_speed (X2, pwm_val);
     c8e:	2001      	movs	r0, #1
     c90:	4621      	mov	r1, r4
     c92:	47a8      	blx	r5
			m_state = 20;
			return m_state;
     c94:	2014      	movs	r0, #20
     c96:	bd70      	pop	{r4, r5, r6, pc}
		break;
		default: break;
	}
	return 100;
     c98:	2064      	movs	r0, #100	; 0x64
     c9a:	bd70      	pop	{r4, r5, r6, pc}
     c9c:	00002b95 	.word	0x00002b95
     ca0:	00002b6d 	.word	0x00002b6d
     ca4:	00002b45 	.word	0x00002b45
     ca8:	00002c09 	.word	0x00002c09

00000cac <itoa>:
	while (s[++i] != '\0');

	return i;
}

int32_t itoa(int32_t n, char s[]) {
     cac:	b4f0      	push	{r4, r5, r6, r7}
     cae:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
     cb2:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
     cb6:	2400      	movs	r4, #0
	
	if ((sign = n) < 0)  /* record sign */
		n = -n;          /* make n positive */
	i = 0;
	do {       /* generate digits in reverse order */
		s[i++] = n % 10 + '0';   /* get next digit */
     cb8:	4f14      	ldr	r7, [pc, #80]	; (d0c <itoa+0x60>)
     cba:	1c65      	adds	r5, r4, #1
     cbc:	fb87 3602 	smull	r3, r6, r7, r2
     cc0:	17d3      	asrs	r3, r2, #31
     cc2:	ebc3 03a6 	rsb	r3, r3, r6, asr #2
     cc6:	eb03 0683 	add.w	r6, r3, r3, lsl #2
     cca:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
     cce:	3230      	adds	r2, #48	; 0x30
     cd0:	550a      	strb	r2, [r1, r4]
	} while ((n /= 10) > 0);     /* delete it */
     cd2:	461a      	mov	r2, r3
     cd4:	2b00      	cmp	r3, #0
     cd6:	dd01      	ble.n	cdc <itoa+0x30>
	
	if ((sign = n) < 0)  /* record sign */
		n = -n;          /* make n positive */
	i = 0;
	do {       /* generate digits in reverse order */
		s[i++] = n % 10 + '0';   /* get next digit */
     cd8:	462c      	mov	r4, r5
     cda:	e7ee      	b.n	cba <itoa+0xe>
     cdc:	462b      	mov	r3, r5
	} while ((n /= 10) > 0);     /* delete it */
		
	if (sign < 0)
     cde:	2800      	cmp	r0, #0
     ce0:	da02      	bge.n	ce8 <itoa+0x3c>
	s[i++] = '-';
     ce2:	1ca5      	adds	r5, r4, #2
     ce4:	222d      	movs	r2, #45	; 0x2d
     ce6:	54ca      	strb	r2, [r1, r3]
	s[i] = '\0';
     ce8:	2300      	movs	r3, #0
     cea:	554b      	strb	r3, [r1, r5]
	
	j = i - 1;
     cec:	1e6b      	subs	r3, r5, #1
	for (i = 0; i<j; i++, j--) {
     cee:	2b00      	cmp	r3, #0
     cf0:	dd09      	ble.n	d06 <itoa+0x5a>
     cf2:	2000      	movs	r0, #0
		c = s[i];
     cf4:	5c0a      	ldrb	r2, [r1, r0]
		s[i] = s[j];
     cf6:	5ccc      	ldrb	r4, [r1, r3]
     cf8:	540c      	strb	r4, [r1, r0]
		s[j] = c;
     cfa:	54ca      	strb	r2, [r1, r3]
	if (sign < 0)
	s[i++] = '-';
	s[i] = '\0';
	
	j = i - 1;
	for (i = 0; i<j; i++, j--) {
     cfc:	3001      	adds	r0, #1
     cfe:	3b01      	subs	r3, #1
     d00:	4298      	cmp	r0, r3
     d02:	dbf7      	blt.n	cf4 <itoa+0x48>
     d04:	e000      	b.n	d08 <itoa+0x5c>
     d06:	2000      	movs	r0, #0
		s[i] = s[j];
		s[j] = c;
		}

	return i;
}
     d08:	bcf0      	pop	{r4, r5, r6, r7}
     d0a:	4770      	bx	lr
     d0c:	66666667 	.word	0x66666667

00000d10 <printf_itoa>:
	}
	
	return i;
}

void printf_itoa (int32_t int_number) {
     d10:	b500      	push	{lr}
     d12:	b085      	sub	sp, #20
	char string_number[12];

	itoa (int_number, string_number);
     d14:	a901      	add	r1, sp, #4
     d16:	4b04      	ldr	r3, [pc, #16]	; (d28 <printf_itoa+0x18>)
     d18:	4798      	blx	r3
	printf(string_number);
     d1a:	a801      	add	r0, sp, #4
     d1c:	4b03      	ldr	r3, [pc, #12]	; (d2c <printf_itoa+0x1c>)
     d1e:	4798      	blx	r3
}
     d20:	b005      	add	sp, #20
     d22:	f85d fb04 	ldr.w	pc, [sp], #4
     d26:	bf00      	nop
     d28:	00000cad 	.word	0x00000cad
     d2c:	00002fb9 	.word	0x00002fb9

00000d30 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
     d30:	b510      	push	{r4, lr}
     d32:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
     d34:	4b10      	ldr	r3, [pc, #64]	; (d78 <spi_master_init+0x48>)
     d36:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
     d38:	2380      	movs	r3, #128	; 0x80
     d3a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
     d3c:	6863      	ldr	r3, [r4, #4]
     d3e:	f043 0301 	orr.w	r3, r3, #1
     d42:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
     d44:	6863      	ldr	r3, [r4, #4]
     d46:	f043 0310 	orr.w	r3, r3, #16
     d4a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
     d4c:	6863      	ldr	r3, [r4, #4]
     d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     d52:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
     d54:	4620      	mov	r0, r4
     d56:	2100      	movs	r1, #0
     d58:	4b08      	ldr	r3, [pc, #32]	; (d7c <spi_master_init+0x4c>)
     d5a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
     d5c:	6863      	ldr	r3, [r4, #4]
     d5e:	f023 0302 	bic.w	r3, r3, #2
     d62:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
     d64:	6863      	ldr	r3, [r4, #4]
     d66:	f023 0304 	bic.w	r3, r3, #4
     d6a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
     d6c:	4620      	mov	r0, r4
     d6e:	2100      	movs	r1, #0
     d70:	4b03      	ldr	r3, [pc, #12]	; (d80 <spi_master_init+0x50>)
     d72:	4798      	blx	r3
     d74:	bd10      	pop	{r4, pc}
     d76:	bf00      	nop
     d78:	00000ee1 	.word	0x00000ee1
     d7c:	00000eed 	.word	0x00000eed
     d80:	00000f05 	.word	0x00000f05

00000d84 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
     d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d86:	4605      	mov	r5, r0
     d88:	460c      	mov	r4, r1
     d8a:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
     d8c:	4618      	mov	r0, r3
     d8e:	f04f 7137 	mov.w	r1, #47972352	; 0x2dc0000
     d92:	4b13      	ldr	r3, [pc, #76]	; (de0 <spi_master_setup_device+0x5c>)
     d94:	4798      	blx	r3
     d96:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
     d98:	4628      	mov	r0, r5
     d9a:	6821      	ldr	r1, [r4, #0]
     d9c:	2200      	movs	r2, #0
     d9e:	4613      	mov	r3, r2
     da0:	f8df c054 	ldr.w	ip, [pc, #84]	; df8 <spi_master_setup_device+0x74>
     da4:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
     da6:	4628      	mov	r0, r5
     da8:	6821      	ldr	r1, [r4, #0]
     daa:	2208      	movs	r2, #8
     dac:	4b0d      	ldr	r3, [pc, #52]	; (de4 <spi_master_setup_device+0x60>)
     dae:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
     db0:	4628      	mov	r0, r5
     db2:	6821      	ldr	r1, [r4, #0]
     db4:	b2fa      	uxtb	r2, r7
     db6:	4b0c      	ldr	r3, [pc, #48]	; (de8 <spi_master_setup_device+0x64>)
     db8:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
     dba:	4628      	mov	r0, r5
     dbc:	6821      	ldr	r1, [r4, #0]
     dbe:	2208      	movs	r2, #8
     dc0:	4b0a      	ldr	r3, [pc, #40]	; (dec <spi_master_setup_device+0x68>)
     dc2:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
     dc4:	4628      	mov	r0, r5
     dc6:	6821      	ldr	r1, [r4, #0]
     dc8:	0872      	lsrs	r2, r6, #1
     dca:	4b09      	ldr	r3, [pc, #36]	; (df0 <spi_master_setup_device+0x6c>)
     dcc:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
     dce:	f086 0201 	eor.w	r2, r6, #1
     dd2:	4628      	mov	r0, r5
     dd4:	6821      	ldr	r1, [r4, #0]
     dd6:	f002 0201 	and.w	r2, r2, #1
     dda:	4b06      	ldr	r3, [pc, #24]	; (df4 <spi_master_setup_device+0x70>)
     ddc:	4798      	blx	r3
     dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     de0:	00000fb1 	.word	0x00000fb1
     de4:	00000f9d 	.word	0x00000f9d
     de8:	00000fc9 	.word	0x00000fc9
     dec:	00000f59 	.word	0x00000f59
     df0:	00000f19 	.word	0x00000f19
     df4:	00000f39 	.word	0x00000f39
     df8:	00000fe1 	.word	0x00000fe1

00000dfc <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
     dfc:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
     dfe:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
     e00:	f013 0f04 	tst.w	r3, #4
     e04:	d005      	beq.n	e12 <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
     e06:	6809      	ldr	r1, [r1, #0]
     e08:	290f      	cmp	r1, #15
     e0a:	d80b      	bhi.n	e24 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
     e0c:	4b06      	ldr	r3, [pc, #24]	; (e28 <spi_select_device+0x2c>)
     e0e:	4798      	blx	r3
     e10:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
     e12:	680b      	ldr	r3, [r1, #0]
     e14:	2b03      	cmp	r3, #3
     e16:	d805      	bhi.n	e24 <spi_select_device+0x28>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
     e18:	2201      	movs	r2, #1
     e1a:	fa02 f103 	lsl.w	r1, r2, r3
     e1e:	43c9      	mvns	r1, r1
     e20:	4b01      	ldr	r3, [pc, #4]	; (e28 <spi_select_device+0x2c>)
     e22:	4798      	blx	r3
     e24:	bd08      	pop	{r3, pc}
     e26:	bf00      	nop
     e28:	00000eed 	.word	0x00000eed

00000e2c <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
     e2c:	b510      	push	{r4, lr}
     e2e:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
     e30:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
     e32:	f413 7f00 	tst.w	r3, #512	; 0x200
     e36:	d0fb      	beq.n	e30 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
     e38:	4620      	mov	r0, r4
     e3a:	210f      	movs	r1, #15
     e3c:	4b02      	ldr	r3, [pc, #8]	; (e48 <spi_deselect_device+0x1c>)
     e3e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
     e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     e44:	6023      	str	r3, [r4, #0]
     e46:	bd10      	pop	{r4, pc}
     e48:	00000eed 	.word	0x00000eed

00000e4c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e50:	460c      	mov	r4, r1
     e52:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     e54:	b960      	cbnz	r0, e70 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
     e56:	2a00      	cmp	r2, #0
     e58:	dd0e      	ble.n	e78 <_read+0x2c>
     e5a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     e5c:	4e09      	ldr	r6, [pc, #36]	; (e84 <_read+0x38>)
     e5e:	4d0a      	ldr	r5, [pc, #40]	; (e88 <_read+0x3c>)
     e60:	6830      	ldr	r0, [r6, #0]
     e62:	4621      	mov	r1, r4
     e64:	682b      	ldr	r3, [r5, #0]
     e66:	4798      	blx	r3
		ptr++;
     e68:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     e6a:	42bc      	cmp	r4, r7
     e6c:	d1f8      	bne.n	e60 <_read+0x14>
     e6e:	e006      	b.n	e7e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     e70:	f04f 30ff 	mov.w	r0, #4294967295
     e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
     e78:	2000      	movs	r0, #0
     e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     e7e:	4640      	mov	r0, r8
	}
	return nChars;
}
     e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e84:	20000c38 	.word	0x20000c38
     e88:	20000c30 	.word	0x20000c30

00000e8c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
     e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e90:	460e      	mov	r6, r1
     e92:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     e94:	3801      	subs	r0, #1
     e96:	2802      	cmp	r0, #2
     e98:	d80f      	bhi.n	eba <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
     e9a:	b192      	cbz	r2, ec2 <_write+0x36>
     e9c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     e9e:	f8df 803c 	ldr.w	r8, [pc, #60]	; edc <_write+0x50>
     ea2:	4f0d      	ldr	r7, [pc, #52]	; (ed8 <_write+0x4c>)
     ea4:	f8d8 0000 	ldr.w	r0, [r8]
     ea8:	5d31      	ldrb	r1, [r6, r4]
     eaa:	683b      	ldr	r3, [r7, #0]
     eac:	4798      	blx	r3
     eae:	2800      	cmp	r0, #0
     eb0:	db0a      	blt.n	ec8 <_write+0x3c>
			return -1;
		}
		++nChars;
     eb2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     eb4:	42a5      	cmp	r5, r4
     eb6:	d1f5      	bne.n	ea4 <_write+0x18>
     eb8:	e00a      	b.n	ed0 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     eba:	f04f 30ff 	mov.w	r0, #4294967295
     ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
     ec2:	2000      	movs	r0, #0
     ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     ec8:	f04f 30ff 	mov.w	r0, #4294967295
     ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
     ed0:	4620      	mov	r0, r4
	}
	return nChars;
}
     ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ed6:	bf00      	nop
     ed8:	20000c34 	.word	0x20000c34
     edc:	20000c38 	.word	0x20000c38

00000ee0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
     ee0:	b508      	push	{r3, lr}
	else if (p_spi == SPI7) {
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
     ee2:	4b01      	ldr	r3, [pc, #4]	; (ee8 <spi_enable_clock+0x8>)
     ee4:	4798      	blx	r3
     ee6:	bd08      	pop	{r3, pc}
     ee8:	00001cd1 	.word	0x00001cd1

00000eec <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
     eec:	6843      	ldr	r3, [r0, #4]
     eee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
     ef2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
     ef4:	6843      	ldr	r3, [r0, #4]
     ef6:	0409      	lsls	r1, r1, #16
     ef8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
     efc:	430b      	orrs	r3, r1
     efe:	6043      	str	r3, [r0, #4]
     f00:	4770      	bx	lr
     f02:	bf00      	nop

00000f04 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
     f04:	6843      	ldr	r3, [r0, #4]
     f06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     f0a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
     f0c:	6843      	ldr	r3, [r0, #4]
     f0e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
     f12:	6041      	str	r1, [r0, #4]
     f14:	4770      	bx	lr
     f16:	bf00      	nop

00000f18 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
     f18:	b132      	cbz	r2, f28 <spi_set_clock_polarity+0x10>
     f1a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
     f1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f20:	f043 0301 	orr.w	r3, r3, #1
     f24:	6303      	str	r3, [r0, #48]	; 0x30
     f26:	4770      	bx	lr
     f28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
     f2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f2e:	f023 0301 	bic.w	r3, r3, #1
     f32:	6303      	str	r3, [r0, #48]	; 0x30
     f34:	4770      	bx	lr
     f36:	bf00      	nop

00000f38 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
     f38:	b132      	cbz	r2, f48 <spi_set_clock_phase+0x10>
     f3a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
     f3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f40:	f043 0302 	orr.w	r3, r3, #2
     f44:	6303      	str	r3, [r0, #48]	; 0x30
     f46:	4770      	bx	lr
     f48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
     f4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f4e:	f023 0302 	bic.w	r3, r3, #2
     f52:	6303      	str	r3, [r0, #48]	; 0x30
     f54:	4770      	bx	lr
     f56:	bf00      	nop

00000f58 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
     f58:	2a04      	cmp	r2, #4
     f5a:	d10a      	bne.n	f72 <spi_configure_cs_behavior+0x1a>
     f5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
     f60:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f62:	f023 0308 	bic.w	r3, r3, #8
     f66:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
     f68:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f6a:	f043 0304 	orr.w	r3, r3, #4
     f6e:	6303      	str	r3, [r0, #48]	; 0x30
     f70:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
     f72:	b952      	cbnz	r2, f8a <spi_configure_cs_behavior+0x32>
     f74:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
     f78:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f7a:	f023 0308 	bic.w	r3, r3, #8
     f7e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
     f80:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f82:	f023 0304 	bic.w	r3, r3, #4
     f86:	6303      	str	r3, [r0, #48]	; 0x30
     f88:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
     f8a:	2a08      	cmp	r2, #8
     f8c:	d105      	bne.n	f9a <spi_configure_cs_behavior+0x42>
     f8e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
     f92:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f94:	f043 0308 	orr.w	r3, r3, #8
     f98:	6303      	str	r3, [r0, #48]	; 0x30
     f9a:	4770      	bx	lr

00000f9c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
     f9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
     fa0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
     fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     fa6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
     fa8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
     faa:	431a      	orrs	r2, r3
     fac:	630a      	str	r2, [r1, #48]	; 0x30
     fae:	4770      	bx	lr

00000fb0 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
     fb0:	1e43      	subs	r3, r0, #1
     fb2:	4419      	add	r1, r3
     fb4:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
     fb8:	1e43      	subs	r3, r0, #1
     fba:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
     fbc:	bf94      	ite	ls
     fbe:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
     fc0:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
     fc4:	b200      	sxth	r0, r0
     fc6:	4770      	bx	lr

00000fc8 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
     fc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
     fcc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
     fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
     fd2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
     fd4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
     fd6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
     fda:	630a      	str	r2, [r1, #48]	; 0x30
     fdc:	4770      	bx	lr
     fde:	bf00      	nop

00000fe0 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
     fe0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
     fe4:	6b08      	ldr	r0, [r1, #48]	; 0x30
     fe6:	b280      	uxth	r0, r0
     fe8:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
     fea:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
     fec:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
     ff0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     ff4:	630a      	str	r2, [r1, #48]	; 0x30
     ff6:	4770      	bx	lr

00000ff8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
     ff8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
     ffa:	010b      	lsls	r3, r1, #4
     ffc:	4293      	cmp	r3, r2
     ffe:	d90d      	bls.n	101c <__stack_size__+0x1c>
    1000:	e01a      	b.n	1038 <__stack_size__+0x38>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
    1002:	6841      	ldr	r1, [r0, #4]
    1004:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
    1008:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
    100a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    100e:	6203      	str	r3, [r0, #32]

	return 0;
    1010:	2000      	movs	r0, #0
    1012:	e020      	b.n	1056 <__stack_size__+0x56>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
    1014:	2001      	movs	r0, #1
    1016:	e01e      	b.n	1056 <__stack_size__+0x56>
    1018:	2001      	movs	r0, #1
    101a:	e01c      	b.n	1056 <__stack_size__+0x56>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    101c:	00d2      	lsls	r2, r2, #3
    101e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    1022:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
    1026:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
    1028:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    102c:	1e54      	subs	r4, r2, #1
    102e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1032:	428c      	cmp	r4, r1
    1034:	d9e9      	bls.n	100a <__stack_size__+0xa>
    1036:	e7ed      	b.n	1014 <__stack_size__+0x14>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
    1038:	00c9      	lsls	r1, r1, #3
    103a:	00d3      	lsls	r3, r2, #3
    103c:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    1040:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
    1044:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
    1046:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
    104a:	1e54      	subs	r4, r2, #1
    104c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1050:	428c      	cmp	r4, r1
    1052:	d9d6      	bls.n	1002 <__stack_size__+0x2>
    1054:	e7e0      	b.n	1018 <__stack_size__+0x18>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
    1056:	f85d 4b04 	ldr.w	r4, [sp], #4
    105a:	4770      	bx	lr

0000105c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
    105c:	4b0a      	ldr	r3, [pc, #40]	; (1088 <usart_reset+0x2c>)
    105e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
    1062:	2300      	movs	r3, #0
    1064:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
    1066:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
    1068:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
    106a:	2388      	movs	r3, #136	; 0x88
    106c:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
    106e:	2324      	movs	r3, #36	; 0x24
    1070:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
    1072:	f44f 7380 	mov.w	r3, #256	; 0x100
    1076:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
    1078:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    107c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
    107e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1082:	6003      	str	r3, [r0, #0]
    1084:	4770      	bx	lr
    1086:	bf00      	nop
    1088:	55534100 	.word	0x55534100

0000108c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
    108c:	b570      	push	{r4, r5, r6, lr}
    108e:	4605      	mov	r5, r0
    1090:	460c      	mov	r4, r1
    1092:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
    1094:	4b0f      	ldr	r3, [pc, #60]	; (10d4 <usart_init_rs232+0x48>)
    1096:	4798      	blx	r3

	ul_reg_val = 0;
    1098:	2100      	movs	r1, #0
    109a:	4b0f      	ldr	r3, [pc, #60]	; (10d8 <usart_init_rs232+0x4c>)
    109c:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
    109e:	b19c      	cbz	r4, 10c8 <usart_init_rs232+0x3c>
    10a0:	4628      	mov	r0, r5
    10a2:	6821      	ldr	r1, [r4, #0]
    10a4:	4632      	mov	r2, r6
    10a6:	4b0d      	ldr	r3, [pc, #52]	; (10dc <usart_init_rs232+0x50>)
    10a8:	4798      	blx	r3
    10aa:	4603      	mov	r3, r0
    10ac:	b970      	cbnz	r0, 10cc <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    10ae:	68a1      	ldr	r1, [r4, #8]
    10b0:	6862      	ldr	r2, [r4, #4]
    10b2:	430a      	orrs	r2, r1
    10b4:	6921      	ldr	r1, [r4, #16]
    10b6:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
    10b8:	68e0      	ldr	r0, [r4, #12]
    10ba:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
    10bc:	4906      	ldr	r1, [pc, #24]	; (10d8 <usart_init_rs232+0x4c>)
    10be:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
    10c0:	6869      	ldr	r1, [r5, #4]
    10c2:	430a      	orrs	r2, r1
    10c4:	606a      	str	r2, [r5, #4]

	return 0;
    10c6:	e002      	b.n	10ce <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
    10c8:	2301      	movs	r3, #1
    10ca:	e000      	b.n	10ce <usart_init_rs232+0x42>
    10cc:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
    10ce:	4618      	mov	r0, r3
    10d0:	bd70      	pop	{r4, r5, r6, pc}
    10d2:	bf00      	nop
    10d4:	0000105d 	.word	0x0000105d
    10d8:	20000a80 	.word	0x20000a80
    10dc:	00000ff9 	.word	0x00000ff9

000010e0 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
    10e0:	2340      	movs	r3, #64	; 0x40
    10e2:	6003      	str	r3, [r0, #0]
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop

000010e8 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
    10e8:	2310      	movs	r3, #16
    10ea:	6003      	str	r3, [r0, #0]
    10ec:	4770      	bx	lr
    10ee:	bf00      	nop

000010f0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
    10f0:	6943      	ldr	r3, [r0, #20]
    10f2:	f013 0f02 	tst.w	r3, #2
    10f6:	d004      	beq.n	1102 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
    10f8:	f3c1 0108 	ubfx	r1, r1, #0, #9
    10fc:	61c1      	str	r1, [r0, #28]
	return 0;
    10fe:	2000      	movs	r0, #0
    1100:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
    1102:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
    1104:	4770      	bx	lr
    1106:	bf00      	nop

00001108 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
    1108:	6943      	ldr	r3, [r0, #20]
    110a:	f013 0f01 	tst.w	r3, #1
    110e:	d005      	beq.n	111c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
    1110:	6983      	ldr	r3, [r0, #24]
    1112:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1116:	600b      	str	r3, [r1, #0]

	return 0;
    1118:	2000      	movs	r0, #0
    111a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
    111c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
    111e:	4770      	bx	lr

00001120 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    1120:	b570      	push	{r4, r5, r6, lr}
    1122:	b082      	sub	sp, #8
    1124:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
    1126:	ac02      	add	r4, sp, #8
    1128:	2300      	movs	r3, #0
    112a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
    112e:	4d09      	ldr	r5, [pc, #36]	; (1154 <ssd1306_write_command+0x34>)
    1130:	4628      	mov	r0, r5
    1132:	4621      	mov	r1, r4
    1134:	4b08      	ldr	r3, [pc, #32]	; (1158 <ssd1306_write_command+0x38>)
    1136:	4798      	blx	r3
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    1138:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    113c:	4b07      	ldr	r3, [pc, #28]	; (115c <ssd1306_write_command+0x3c>)
    113e:	659a      	str	r2, [r3, #88]	; 0x58
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
    1140:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
    1142:	2023      	movs	r0, #35	; 0x23
    1144:	4b06      	ldr	r3, [pc, #24]	; (1160 <ssd1306_write_command+0x40>)
    1146:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
    1148:	4628      	mov	r0, r5
    114a:	4621      	mov	r1, r4
    114c:	4b05      	ldr	r3, [pc, #20]	; (1164 <ssd1306_write_command+0x44>)
    114e:	4798      	blx	r3
#endif
}
    1150:	b002      	add	sp, #8
    1152:	bd70      	pop	{r4, r5, r6, pc}
    1154:	40008000 	.word	0x40008000
    1158:	00000dfd 	.word	0x00000dfd
    115c:	400e1200 	.word	0x400e1200
    1160:	2000002d 	.word	0x2000002d
    1164:	00000e2d 	.word	0x00000e2d

00001168 <oled_init>:
	ssd1306_set_page_address(x);
	ssd1306_set_column_address(y);
	ssd1306_write_text(print_string);
}

void oled_init (void) {
    1168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    116c:	b083      	sub	sp, #12

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    116e:	4b24      	ldr	r3, [pc, #144]	; (1200 <oled_init+0x98>)
    1170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1174:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    1176:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    117a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    117e:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    1180:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
	
	ssd1306_init();
    1184:	4b1f      	ldr	r3, [pc, #124]	; (1204 <oled_init+0x9c>)
    1186:	4798      	blx	r3
    1188:	f04f 0b00 	mov.w	fp, #0
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
    118c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1214 <oled_init+0xac>
    1190:	f8df a084 	ldr.w	sl, [pc, #132]	; 1218 <oled_init+0xb0>

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    1194:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1200 <oled_init+0x98>
    1198:	4647      	mov	r7, r8
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    119a:	f00b 0007 	and.w	r0, fp, #7
    119e:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
    11a2:	4b19      	ldr	r3, [pc, #100]	; (1208 <oled_init+0xa0>)
    11a4:	4798      	blx	r3
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    11a6:	2010      	movs	r0, #16
    11a8:	4b17      	ldr	r3, [pc, #92]	; (1208 <oled_init+0xa0>)
    11aa:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    11ac:	2000      	movs	r0, #0
    11ae:	4b16      	ldr	r3, [pc, #88]	; (1208 <oled_init+0xa0>)
    11b0:	4798      	blx	r3
    11b2:	2580      	movs	r5, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
    11b4:	2600      	movs	r6, #0
    11b6:	ac02      	add	r4, sp, #8
    11b8:	f844 6d04 	str.w	r6, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
    11bc:	4638      	mov	r0, r7
    11be:	4621      	mov	r1, r4
    11c0:	47d0      	blx	sl
    11c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11c6:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
    11ca:	f8c8 600c 	str.w	r6, [r8, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
    11ce:	2023      	movs	r0, #35	; 0x23
    11d0:	4b0e      	ldr	r3, [pc, #56]	; (120c <oled_init+0xa4>)
    11d2:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
    11d4:	4638      	mov	r0, r7
    11d6:	4621      	mov	r1, r4
    11d8:	4b0d      	ldr	r3, [pc, #52]	; (1210 <oled_init+0xa8>)
    11da:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    11dc:	3d01      	subs	r5, #1
    11de:	d1e9      	bne.n	11b4 <oled_init+0x4c>
    11e0:	f10b 0b01 	add.w	fp, fp, #1
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    11e4:	f1bb 0f04 	cmp.w	fp, #4
    11e8:	d1d7      	bne.n	119a <oled_init+0x32>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    11ea:	20b0      	movs	r0, #176	; 0xb0
    11ec:	4c06      	ldr	r4, [pc, #24]	; (1208 <oled_init+0xa0>)
    11ee:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    11f0:	2010      	movs	r0, #16
    11f2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    11f4:	4630      	mov	r0, r6
    11f6:	47a0      	blx	r4
	ssd1306_set_column_address(0);
	
	#ifndef DEBUG
		puts("-I- oled_init\r");
	#endif
}
    11f8:	b003      	add	sp, #12
    11fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11fe:	bf00      	nop
    1200:	400e1200 	.word	0x400e1200
    1204:	000016a9 	.word	0x000016a9
    1208:	00001121 	.word	0x00001121
    120c:	2000002d 	.word	0x2000002d
    1210:	00000e2d 	.word	0x00000e2d
    1214:	40008000 	.word	0x40008000
    1218:	00000dfd 	.word	0x00000dfd

0000121c <tc_pwm_init>:
	//PWM_start(TC1, TC_CHANNEL_2);
	
	RC_Value = PWM_get_RC (TC0, TC_CHANNEL_0);
}

void tc_pwm_init(Tc *p_tc, uint32_t ul_channel) {
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	4604      	mov	r4, r0
    1220:	460d      	mov	r5, r1
	uint32_t ra, rc;

	// Init TC to waveform mode.
	tc_init(p_tc, ul_channel,
    1222:	4a10      	ldr	r2, [pc, #64]	; (1264 <tc_pwm_init+0x48>)
    1224:	4b10      	ldr	r3, [pc, #64]	; (1268 <tc_pwm_init+0x4c>)
    1226:	4798      	blx	r3
						| TC_CMR_BCPC_CLEAR		 // RC Compare Effect: clear
						| TC_CMR_EEVT_XC0_OUTPUT //if this isn't set, TIOB is by default an input
	);
	
	// Configure waveform frequency and duty cycle.
	rc = (sysclk_get_peripheral_bus_hz(p_tc) /		//48Mhz
    1228:	4620      	mov	r0, r4
    122a:	4b10      	ldr	r3, [pc, #64]	; (126c <tc_pwm_init+0x50>)
    122c:	4798      	blx	r3
    122e:	4b10      	ldr	r3, [pc, #64]	; (1270 <tc_pwm_init+0x54>)
    1230:	fba3 2600 	umull	r2, r6, r3, r0
    1234:	0a36      	lsrs	r6, r6, #8
					TC_PWM_DIVISOR /
					TC_PWM_FREQUENCY);
			
	tc_write_rc(p_tc, ul_channel, rc);
    1236:	4620      	mov	r0, r4
    1238:	4629      	mov	r1, r5
    123a:	4632      	mov	r2, r6
    123c:	4b0d      	ldr	r3, [pc, #52]	; (1274 <tc_pwm_init+0x58>)
    123e:	4798      	blx	r3
	
	ra = (100 - TC_PWM_DUTY_CYCLE) * rc / 100;
    1240:	2364      	movs	r3, #100	; 0x64
    1242:	fb03 f606 	mul.w	r6, r3, r6
    1246:	4b0c      	ldr	r3, [pc, #48]	; (1278 <tc_pwm_init+0x5c>)
    1248:	fba3 2606 	umull	r2, r6, r3, r6
    124c:	0976      	lsrs	r6, r6, #5
	
	tc_write_ra(p_tc, ul_channel, ra);
    124e:	4620      	mov	r0, r4
    1250:	4629      	mov	r1, r5
    1252:	4632      	mov	r2, r6
    1254:	4b09      	ldr	r3, [pc, #36]	; (127c <tc_pwm_init+0x60>)
    1256:	4798      	blx	r3
	tc_write_rb(p_tc, ul_channel, ra);
    1258:	4620      	mov	r0, r4
    125a:	4629      	mov	r1, r5
    125c:	4632      	mov	r2, r6
    125e:	4b08      	ldr	r3, [pc, #32]	; (1280 <tc_pwm_init+0x64>)
    1260:	4798      	blx	r3
    1262:	bd70      	pop	{r4, r5, r6, pc}
    1264:	0909c402 	.word	0x0909c402
    1268:	0000161d 	.word	0x0000161d
    126c:	00001b0d 	.word	0x00001b0d
    1270:	10624dd3 	.word	0x10624dd3
    1274:	00001659 	.word	0x00001659
    1278:	51eb851f 	.word	0x51eb851f
    127c:	00001649 	.word	0x00001649
    1280:	00001651 	.word	0x00001651

00001284 <PWM_init>:
#include <asf.h>
#include "timer_counter.h"

static uint32_t RC_Value;

void PWM_init(void) {
    1284:	b570      	push	{r4, r5, r6, lr}
	
	sysclk_enable_peripheral_clock(TC0);
    1286:	4c49      	ldr	r4, [pc, #292]	; (13ac <PWM_init+0x128>)
    1288:	4620      	mov	r0, r4
    128a:	4e49      	ldr	r6, [pc, #292]	; (13b0 <PWM_init+0x12c>)
    128c:	47b0      	blx	r6
	sysclk_enable_peripheral_clock(TC1);
    128e:	4d49      	ldr	r5, [pc, #292]	; (13b4 <PWM_init+0x130>)
    1290:	4628      	mov	r0, r5
    1292:	47b0      	blx	r6
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1294:	4b48      	ldr	r3, [pc, #288]	; (13b8 <PWM_init+0x134>)
    1296:	f44f 7280 	mov.w	r2, #256	; 0x100
    129a:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    129c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    12a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    12a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    12a8:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    12aa:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    12ac:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    12ae:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    12b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    12b4:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    12b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    12ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    12be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    12c2:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    12c4:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    12c6:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    12c8:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    12ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    12ce:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    12d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    12d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    12d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    12dc:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    12de:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    12e0:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    12e2:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    12e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    12e8:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    12ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    12ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    12f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    12f6:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    12f8:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    12fa:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    12fc:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    12fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1302:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1308:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    130c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    1310:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1312:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1314:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1316:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    131c:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    131e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1322:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1326:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    132a:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    132c:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    132e:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1330:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1336:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    133a:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    133c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    1340:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    1344:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1348:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    134a:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    134c:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    134e:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    1350:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1354:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    1356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    135a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    135e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    1362:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    1364:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    1366:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    1368:	609a      	str	r2, [r3, #8]
		
	ioport_set_pin_mode(PIN_PWM_12_B, PIN_PWM_12_B_M);
	ioport_disable_pin(PIN_PWM_12_B);
	*/
	
	tc_pwm_init(TC0, TC_CHANNEL_0);
    136a:	4620      	mov	r0, r4
    136c:	2100      	movs	r1, #0
    136e:	4e13      	ldr	r6, [pc, #76]	; (13bc <PWM_init+0x138>)
    1370:	47b0      	blx	r6
	tc_pwm_init(TC0, TC_CHANNEL_1);
    1372:	4620      	mov	r0, r4
    1374:	2101      	movs	r1, #1
    1376:	47b0      	blx	r6
	tc_pwm_init(TC0, TC_CHANNEL_2);
    1378:	4620      	mov	r0, r4
    137a:	2102      	movs	r1, #2
    137c:	47b0      	blx	r6
	tc_pwm_init(TC1, TC_CHANNEL_0);
    137e:	4628      	mov	r0, r5
    1380:	2100      	movs	r1, #0
    1382:	47b0      	blx	r6
	tc_write_ra(p_tc, ul_channel, ra);
	tc_write_rb(p_tc, ul_channel, ra);
}

void PWM_start (Tc *p_tc, uint32_t ul_channel) {
	tc_start(p_tc, ul_channel);
    1384:	4620      	mov	r0, r4
    1386:	2100      	movs	r1, #0
    1388:	4e0d      	ldr	r6, [pc, #52]	; (13c0 <PWM_init+0x13c>)
    138a:	47b0      	blx	r6
    138c:	4620      	mov	r0, r4
    138e:	2101      	movs	r1, #1
    1390:	47b0      	blx	r6
    1392:	4620      	mov	r0, r4
    1394:	2102      	movs	r1, #2
    1396:	47b0      	blx	r6
    1398:	4628      	mov	r0, r5
    139a:	2100      	movs	r1, #0
    139c:	47b0      	blx	r6
uint32_t PWM_get_RB (Tc *p_tc, uint32_t ul_channel) {
	return tc_read_rb(p_tc, ul_channel);
}

uint32_t PWM_get_RC (Tc *p_tc, uint32_t ul_channel) {
	return tc_read_rc(p_tc, ul_channel);	
    139e:	4620      	mov	r0, r4
    13a0:	2100      	movs	r1, #0
    13a2:	4b08      	ldr	r3, [pc, #32]	; (13c4 <PWM_init+0x140>)
    13a4:	4798      	blx	r3
	PWM_start(TC0, TC_CHANNEL_2);
	PWM_start(TC1, TC_CHANNEL_0);
	//PWM_start(TC1, TC_CHANNEL_1);
	//PWM_start(TC1, TC_CHANNEL_2);
	
	RC_Value = PWM_get_RC (TC0, TC_CHANNEL_0);
    13a6:	4b08      	ldr	r3, [pc, #32]	; (13c8 <PWM_init+0x144>)
    13a8:	6018      	str	r0, [r3, #0]
    13aa:	bd70      	pop	{r4, r5, r6, pc}
    13ac:	40010000 	.word	0x40010000
    13b0:	00001cd1 	.word	0x00001cd1
    13b4:	40014000 	.word	0x40014000
    13b8:	400e1000 	.word	0x400e1000
    13bc:	0000121d 	.word	0x0000121d
    13c0:	00001639 	.word	0x00001639
    13c4:	00001641 	.word	0x00001641
    13c8:	20000a84 	.word	0x20000a84

000013cc <PWM_set_RA>:

void PWM_stop (Tc *p_tc, uint32_t ul_channel) {
	tc_stop(p_tc, ul_channel);
}

void PWM_set_RA (Tc *p_tc, uint32_t ul_channel, uint32_t ra) {
    13cc:	b508      	push	{r3, lr}
	tc_write_ra(p_tc, ul_channel, ra);
    13ce:	4b01      	ldr	r3, [pc, #4]	; (13d4 <PWM_set_RA+0x8>)
    13d0:	4798      	blx	r3
    13d2:	bd08      	pop	{r3, pc}
    13d4:	00001649 	.word	0x00001649

000013d8 <PWM_set_RB>:
}

void PWM_set_RB (Tc *p_tc, uint32_t ul_channel, uint32_t rb) {
    13d8:	b508      	push	{r3, lr}
	tc_write_rb(p_tc, ul_channel, rb);
    13da:	4b01      	ldr	r3, [pc, #4]	; (13e0 <PWM_set_RB+0x8>)
    13dc:	4798      	blx	r3
    13de:	bd08      	pop	{r3, pc}
    13e0:	00001651 	.word	0x00001651

000013e4 <PWM_get_RC_Value>:
	return tc_read_rc(p_tc, ul_channel);	
}

uint32_t PWM_get_RC_Value (void) {
	return RC_Value;
}
    13e4:	4b01      	ldr	r3, [pc, #4]	; (13ec <PWM_get_RC_Value+0x8>)
    13e6:	6818      	ldr	r0, [r3, #0]
    13e8:	4770      	bx	lr
    13ea:	bf00      	nop
    13ec:	20000a84 	.word	0x20000a84

000013f0 <TC11_Handler>:

	//start counting
	tc_start (p_tc, ul_channel);
}

void TC11_Handler (void) {
    13f0:	b508      	push	{r3, lr}
	puts("-8-\r");
    13f2:	4802      	ldr	r0, [pc, #8]	; (13fc <TC11_Handler+0xc>)
    13f4:	4b02      	ldr	r3, [pc, #8]	; (1400 <TC11_Handler+0x10>)
    13f6:	4798      	blx	r3
    13f8:	bd08      	pop	{r3, pc}
    13fa:	bf00      	nop
    13fc:	00005874 	.word	0x00005874
    1400:	00003075 	.word	0x00003075

00001404 <TC12_Handler>:
	//LED_Toggle(LED_0_PIN);
}

void TC12_Handler (void) {
    1404:	b508      	push	{r3, lr}
	puts("-9-\r");
    1406:	4802      	ldr	r0, [pc, #8]	; (1410 <TC12_Handler+0xc>)
    1408:	4b02      	ldr	r3, [pc, #8]	; (1414 <TC12_Handler+0x10>)
    140a:	4798      	blx	r3
    140c:	bd08      	pop	{r3, pc}
    140e:	bf00      	nop
    1410:	0000587c 	.word	0x0000587c
    1414:	00003075 	.word	0x00003075

00001418 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    1418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    141c:	b083      	sub	sp, #12
    141e:	4607      	mov	r7, r0
    1420:	9101      	str	r1, [sp, #4]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    1422:	ea4f 2940 	mov.w	r9, r0, lsl #9
    1426:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
    142a:	f509 2961 	add.w	r9, r9, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    142e:	f8d9 a0d0 	ldr.w	sl, [r9, #208]	; 0xd0

	for (i = 0; i < gpio_nb_sources; i++) {
    1432:	4b13      	ldr	r3, [pc, #76]	; (1480 <gpio_common_handler+0x68>)
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	b1db      	cbz	r3, 1470 <gpio_common_handler+0x58>
    1438:	2400      	movs	r4, #0
    143a:	4625      	mov	r5, r4
		pin = gpio_int_sources[i].pin;
    143c:	4e11      	ldr	r6, [pc, #68]	; (1484 <gpio_common_handler+0x6c>)
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    143e:	f04f 0b01 	mov.w	fp, #1
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;

	for (i = 0; i < gpio_nb_sources; i++) {
    1442:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1480 <gpio_common_handler+0x68>
		pin = gpio_int_sources[i].pin;
    1446:	59a3      	ldr	r3, [r4, r6]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    1448:	ebb7 1f53 	cmp.w	r7, r3, lsr #5
    144c:	d10a      	bne.n	1464 <gpio_common_handler+0x4c>
    144e:	f003 031f 	and.w	r3, r3, #31
    1452:	fa0b f303 	lsl.w	r3, fp, r3
    1456:	ea13 0f0a 	tst.w	r3, sl
    145a:	d003      	beq.n	1464 <gpio_common_handler+0x4c>
    145c:	1933      	adds	r3, r6, r4
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
    145e:	685b      	ldr	r3, [r3, #4]
    1460:	b103      	cbz	r3, 1464 <gpio_common_handler+0x4c>
				gpio_int_sources[i].callback();
    1462:	4798      	blx	r3
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;

	for (i = 0; i < gpio_nb_sources; i++) {
    1464:	3501      	adds	r5, #1
    1466:	3408      	adds	r4, #8
    1468:	f8d8 3000 	ldr.w	r3, [r8]
    146c:	42ab      	cmp	r3, r5
    146e:	d8ea      	bhi.n	1446 <gpio_common_handler+0x2e>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    1470:	9a01      	ldr	r2, [sp, #4]
    1472:	ea02 030a 	and.w	r3, r2, sl
    1476:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
}
    147a:	b003      	add	sp, #12
    147c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1480:	20000a88 	.word	0x20000a88
    1484:	20000a8c 	.word	0x20000a8c

00001488 <gpio_set_pin_callback>:
 * \retval false Wrong parameters or maximum number of interrupt
 *                  sources has been exceeding
 */
bool gpio_set_pin_callback(ioport_pin_t pin, gpio_pin_callback_t callback,
		uint8_t irq_level)
{
    1488:	b430      	push	{r4, r5}
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
    148a:	4b28      	ldr	r3, [pc, #160]	; (152c <gpio_set_pin_callback+0xa4>)
    148c:	681b      	ldr	r3, [r3, #0]
    148e:	2b07      	cmp	r3, #7
    1490:	d849      	bhi.n	1526 <gpio_set_pin_callback+0x9e>
    1492:	f000 041f 	and.w	r4, r0, #31
    1496:	2501      	movs	r5, #1
    1498:	fa05 f404 	lsl.w	r4, r5, r4
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    149c:	f014 0fff 	tst.w	r4, #255	; 0xff
    14a0:	d110      	bne.n	14c4 <gpio_set_pin_callback+0x3c>
    14a2:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    14a6:	d109      	bne.n	14bc <gpio_set_pin_callback+0x34>
    14a8:	f414 0f7f 	tst.w	r4, #16711680	; 0xff0000
    14ac:	d108      	bne.n	14c0 <gpio_set_pin_callback+0x38>
    14ae:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
	 * Get IRQ line for the given pin.
	 *
	 * \note Grouping interrupt generators into groups of eight, four
	 * different interrupt handlers can be installed for each GPIO port.
	 */
	for (i = 0; i < 4; i++) {
    14b2:	2c00      	cmp	r4, #0
    14b4:	bf0c      	ite	eq
    14b6:	2504      	moveq	r5, #4
    14b8:	2503      	movne	r5, #3
    14ba:	e004      	b.n	14c6 <gpio_set_pin_callback+0x3e>
    14bc:	2501      	movs	r5, #1
    14be:	e002      	b.n	14c6 <gpio_set_pin_callback+0x3e>
    14c0:	2502      	movs	r5, #2
    14c2:	e000      	b.n	14c6 <gpio_set_pin_callback+0x3e>
		if (ioport_pin_to_mask(pin) & (GPIO_INT_GROUP_MASK << (i * 8))) {
    14c4:	2500      	movs	r5, #0
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    14c6:	0944      	lsrs	r4, r0, #5
			break;
		}
	}
	irq_line = GPIO_0_IRQn + ioport_pin_to_port_id(pin) * 4 + i;
    14c8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    14cc:	3419      	adds	r4, #25
    14ce:	b2e4      	uxtb	r4, r4

	gpio_int_sources[gpio_nb_sources].pin = pin;
    14d0:	4d17      	ldr	r5, [pc, #92]	; (1530 <gpio_set_pin_callback+0xa8>)
    14d2:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
	gpio_int_sources[gpio_nb_sources].callback = callback;
    14d6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    14da:	6059      	str	r1, [r3, #4]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    14dc:	b261      	sxtb	r1, r4
    14de:	f004 031f 	and.w	r3, r4, #31
    14e2:	2001      	movs	r0, #1
    14e4:	4098      	lsls	r0, r3
    14e6:	094b      	lsrs	r3, r1, #5
    14e8:	009b      	lsls	r3, r3, #2
    14ea:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    14ee:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    14f2:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    14f6:	2900      	cmp	r1, #0
    14f8:	da06      	bge.n	1508 <gpio_set_pin_callback+0x80>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    14fa:	f004 040f 	and.w	r4, r4, #15
    14fe:	0112      	lsls	r2, r2, #4
    1500:	b2d2      	uxtb	r2, r2
    1502:	490c      	ldr	r1, [pc, #48]	; (1534 <gpio_set_pin_callback+0xac>)
    1504:	550a      	strb	r2, [r1, r4]
    1506:	e007      	b.n	1518 <gpio_set_pin_callback+0x90>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1508:	0112      	lsls	r2, r2, #4
    150a:	b2d2      	uxtb	r2, r2
    150c:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
    1510:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
    1514:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    1518:	6018      	str	r0, [r3, #0]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;
    151a:	4b04      	ldr	r3, [pc, #16]	; (152c <gpio_set_pin_callback+0xa4>)
    151c:	681a      	ldr	r2, [r3, #0]
    151e:	3201      	adds	r2, #1
    1520:	601a      	str	r2, [r3, #0]

	return true;
    1522:	2001      	movs	r0, #1
    1524:	e000      	b.n	1528 <gpio_set_pin_callback+0xa0>
{
	int8_t i;
	int8_t irq_line;

	if (gpio_nb_sources >= GPIO_MAX_INTERRUPT_SOURCES) {
		return false;
    1526:	2000      	movs	r0, #0
	NVIC_EnableIRQ((IRQn_Type)irq_line);

	gpio_nb_sources++;

	return true;
}
    1528:	bc30      	pop	{r4, r5}
    152a:	4770      	bx	lr
    152c:	20000a88 	.word	0x20000a88
    1530:	20000a8c 	.word	0x20000a8c
    1534:	e000ed14 	.word	0xe000ed14

00001538 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    1538:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    153a:	2000      	movs	r0, #0
    153c:	21ff      	movs	r1, #255	; 0xff
    153e:	4b01      	ldr	r3, [pc, #4]	; (1544 <GPIO_0_Handler+0xc>)
    1540:	4798      	blx	r3
    1542:	bd08      	pop	{r3, pc}
    1544:	00001419 	.word	0x00001419

00001548 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    1548:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    154a:	2000      	movs	r0, #0
    154c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1550:	4b01      	ldr	r3, [pc, #4]	; (1558 <GPIO_1_Handler+0x10>)
    1552:	4798      	blx	r3
    1554:	bd08      	pop	{r3, pc}
    1556:	bf00      	nop
    1558:	00001419 	.word	0x00001419

0000155c <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    155c:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    155e:	2000      	movs	r0, #0
    1560:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    1564:	4b01      	ldr	r3, [pc, #4]	; (156c <GPIO_2_Handler+0x10>)
    1566:	4798      	blx	r3
    1568:	bd08      	pop	{r3, pc}
    156a:	bf00      	nop
    156c:	00001419 	.word	0x00001419

00001570 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    1570:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
    1572:	2000      	movs	r0, #0
    1574:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1578:	4b01      	ldr	r3, [pc, #4]	; (1580 <GPIO_3_Handler+0x10>)
    157a:	4798      	blx	r3
    157c:	bd08      	pop	{r3, pc}
    157e:	bf00      	nop
    1580:	00001419 	.word	0x00001419

00001584 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    1584:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    1586:	2001      	movs	r0, #1
    1588:	21ff      	movs	r1, #255	; 0xff
    158a:	4b01      	ldr	r3, [pc, #4]	; (1590 <GPIO_4_Handler+0xc>)
    158c:	4798      	blx	r3
    158e:	bd08      	pop	{r3, pc}
    1590:	00001419 	.word	0x00001419

00001594 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    1594:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    1596:	2001      	movs	r0, #1
    1598:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    159c:	4b01      	ldr	r3, [pc, #4]	; (15a4 <GPIO_5_Handler+0x10>)
    159e:	4798      	blx	r3
    15a0:	bd08      	pop	{r3, pc}
    15a2:	bf00      	nop
    15a4:	00001419 	.word	0x00001419

000015a8 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    15a8:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    15aa:	2001      	movs	r0, #1
    15ac:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    15b0:	4b01      	ldr	r3, [pc, #4]	; (15b8 <GPIO_6_Handler+0x10>)
    15b2:	4798      	blx	r3
    15b4:	bd08      	pop	{r3, pc}
    15b6:	bf00      	nop
    15b8:	00001419 	.word	0x00001419

000015bc <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    15bc:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    15be:	2001      	movs	r0, #1
    15c0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    15c4:	4b01      	ldr	r3, [pc, #4]	; (15cc <GPIO_7_Handler+0x10>)
    15c6:	4798      	blx	r3
    15c8:	bd08      	pop	{r3, pc}
    15ca:	bf00      	nop
    15cc:	00001419 	.word	0x00001419

000015d0 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    15d0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    15d2:	2002      	movs	r0, #2
    15d4:	21ff      	movs	r1, #255	; 0xff
    15d6:	4b01      	ldr	r3, [pc, #4]	; (15dc <GPIO_8_Handler+0xc>)
    15d8:	4798      	blx	r3
    15da:	bd08      	pop	{r3, pc}
    15dc:	00001419 	.word	0x00001419

000015e0 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    15e0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    15e2:	2002      	movs	r0, #2
    15e4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    15e8:	4b01      	ldr	r3, [pc, #4]	; (15f0 <GPIO_9_Handler+0x10>)
    15ea:	4798      	blx	r3
    15ec:	bd08      	pop	{r3, pc}
    15ee:	bf00      	nop
    15f0:	00001419 	.word	0x00001419

000015f4 <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    15f4:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    15f6:	2002      	movs	r0, #2
    15f8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    15fc:	4b01      	ldr	r3, [pc, #4]	; (1604 <GPIO_10_Handler+0x10>)
    15fe:	4798      	blx	r3
    1600:	bd08      	pop	{r3, pc}
    1602:	bf00      	nop
    1604:	00001419 	.word	0x00001419

00001608 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    1608:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    160a:	2002      	movs	r0, #2
    160c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1610:	4b01      	ldr	r3, [pc, #4]	; (1618 <GPIO_11_Handler+0x10>)
    1612:	4798      	blx	r3
    1614:	bd08      	pop	{r3, pc}
    1616:	bf00      	nop
    1618:	00001419 	.word	0x00001419

0000161c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
    161c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
    161e:	0189      	lsls	r1, r1, #6
    1620:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
    1622:	2402      	movs	r4, #2
    1624:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
    1626:	f04f 31ff 	mov.w	r1, #4294967295
    162a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
    162c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
    162e:	605a      	str	r2, [r3, #4]
}
    1630:	f85d 4b04 	ldr.w	r4, [sp], #4
    1634:	4770      	bx	lr
    1636:	bf00      	nop

00001638 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
    1638:	0189      	lsls	r1, r1, #6
    163a:	2305      	movs	r3, #5
    163c:	5043      	str	r3, [r0, r1]
    163e:	4770      	bx	lr

00001640 <tc_read_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RC;
    1640:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    1644:	69c8      	ldr	r0, [r1, #28]
}
    1646:	4770      	bx	lr

00001648 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
    1648:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    164c:	614a      	str	r2, [r1, #20]
    164e:	4770      	bx	lr

00001650 <tc_write_rb>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RB = ul_value;
    1650:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    1654:	618a      	str	r2, [r1, #24]
    1656:	4770      	bx	lr

00001658 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
    1658:	eb00 1181 	add.w	r1, r0, r1, lsl #6
    165c:	61ca      	str	r2, [r1, #28]
    165e:	4770      	bx	lr

00001660 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    1660:	b570      	push	{r4, r5, r6, lr}
    1662:	b082      	sub	sp, #8
    1664:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
    1666:	ac02      	add	r4, sp, #8
    1668:	2300      	movs	r3, #0
    166a:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
    166e:	4d09      	ldr	r5, [pc, #36]	; (1694 <ssd1306_write_command+0x34>)
    1670:	4628      	mov	r0, r5
    1672:	4621      	mov	r1, r4
    1674:	4b08      	ldr	r3, [pc, #32]	; (1698 <ssd1306_write_command+0x38>)
    1676:	4798      	blx	r3
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    1678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    167c:	4b07      	ldr	r3, [pc, #28]	; (169c <ssd1306_write_command+0x3c>)
    167e:	659a      	str	r2, [r3, #88]	; 0x58
    1680:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
    1682:	2023      	movs	r0, #35	; 0x23
    1684:	4b06      	ldr	r3, [pc, #24]	; (16a0 <ssd1306_write_command+0x40>)
    1686:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
    1688:	4628      	mov	r0, r5
    168a:	4621      	mov	r1, r4
    168c:	4b05      	ldr	r3, [pc, #20]	; (16a4 <ssd1306_write_command+0x44>)
    168e:	4798      	blx	r3
#endif
}
    1690:	b002      	add	sp, #8
    1692:	bd70      	pop	{r4, r5, r6, pc}
    1694:	40008000 	.word	0x40008000
    1698:	00000dfd 	.word	0x00000dfd
    169c:	400e1200 	.word	0x400e1200
    16a0:	2000002d 	.word	0x2000002d
    16a4:	00000e2d 	.word	0x00000e2d

000016a8 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	b084      	sub	sp, #16
    16ac:	4d24      	ldr	r5, [pc, #144]	; (1740 <ssd1306_init+0x98>)
    16ae:	f44f 5600 	mov.w	r6, #8192	; 0x2000
    16b2:	65ae      	str	r6, [r5, #88]	; 0x58
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
    16b4:	2023      	movs	r0, #35	; 0x23
    16b6:	4c23      	ldr	r4, [pc, #140]	; (1744 <ssd1306_init+0x9c>)
    16b8:	47a0      	blx	r4

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    16ba:	656e      	str	r6, [r5, #84]	; 0x54
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
    16bc:	2023      	movs	r0, #35	; 0x23
    16be:	47a0      	blx	r4
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
    16c0:	2500      	movs	r5, #0
    16c2:	ae04      	add	r6, sp, #16
    16c4:	f846 5d04 	str.w	r5, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
    16c8:	4c1f      	ldr	r4, [pc, #124]	; (1748 <ssd1306_init+0xa0>)
    16ca:	4620      	mov	r0, r4
    16cc:	4b1f      	ldr	r3, [pc, #124]	; (174c <ssd1306_init+0xa4>)
    16ce:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
    16d0:	9500      	str	r5, [sp, #0]
    16d2:	4620      	mov	r0, r4
    16d4:	4631      	mov	r1, r6
    16d6:	462a      	mov	r2, r5
    16d8:	4b1d      	ldr	r3, [pc, #116]	; (1750 <ssd1306_init+0xa8>)
    16da:	4e1e      	ldr	r6, [pc, #120]	; (1754 <ssd1306_init+0xac>)
    16dc:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
    16de:	2301      	movs	r3, #1
    16e0:	6023      	str	r3, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    16e2:	20a8      	movs	r0, #168	; 0xa8
    16e4:	4c1c      	ldr	r4, [pc, #112]	; (1758 <ssd1306_init+0xb0>)
    16e6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
    16e8:	201f      	movs	r0, #31
    16ea:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    16ec:	20d3      	movs	r0, #211	; 0xd3
    16ee:	47a0      	blx	r4
	ssd1306_write_command(0x00);
    16f0:	4628      	mov	r0, r5
    16f2:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
    16f4:	2040      	movs	r0, #64	; 0x40
    16f6:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    16f8:	20a1      	movs	r0, #161	; 0xa1
    16fa:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    16fc:	20c8      	movs	r0, #200	; 0xc8
    16fe:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    1700:	20da      	movs	r0, #218	; 0xda
    1702:	47a0      	blx	r4
	ssd1306_write_command(0x02);
    1704:	2002      	movs	r0, #2
    1706:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    1708:	2081      	movs	r0, #129	; 0x81
    170a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
    170c:	208f      	movs	r0, #143	; 0x8f
    170e:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    1710:	20a4      	movs	r0, #164	; 0xa4
    1712:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    1714:	20a6      	movs	r0, #166	; 0xa6
    1716:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    1718:	20d5      	movs	r0, #213	; 0xd5
    171a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
    171c:	2080      	movs	r0, #128	; 0x80
    171e:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    1720:	208d      	movs	r0, #141	; 0x8d
    1722:	47a0      	blx	r4
	ssd1306_write_command(0x14);
    1724:	2014      	movs	r0, #20
    1726:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    1728:	20db      	movs	r0, #219	; 0xdb
    172a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    172c:	2040      	movs	r0, #64	; 0x40
    172e:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    1730:	20d9      	movs	r0, #217	; 0xd9
    1732:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
    1734:	20f1      	movs	r0, #241	; 0xf1
    1736:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    1738:	20af      	movs	r0, #175	; 0xaf
    173a:	47a0      	blx	r4

	ssd1306_display_on();
}
    173c:	b004      	add	sp, #16
    173e:	bd70      	pop	{r4, r5, r6, pc}
    1740:	400e1200 	.word	0x400e1200
    1744:	2000002d 	.word	0x2000002d
    1748:	40008000 	.word	0x40008000
    174c:	00000d31 	.word	0x00000d31
    1750:	00b71b00 	.word	0x00b71b00
    1754:	00000d85 	.word	0x00000d85
    1758:	00001661 	.word	0x00001661

0000175c <dfll_enable_closed_loop>:
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    175c:	6803      	ldr	r3, [r0, #0]
    175e:	f043 0301 	orr.w	r3, r3, #1
    1762:	4a3e      	ldr	r2, [pc, #248]	; (185c <dfll_enable_closed_loop+0x100>)
    1764:	6753      	str	r3, [r2, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1766:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    176a:	b672      	cpsid	i
    176c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1770:	2100      	movs	r1, #0
    1772:	4b3b      	ldr	r3, [pc, #236]	; (1860 <dfll_enable_closed_loop+0x104>)
    1774:	7019      	strb	r1, [r3, #0]
	 * Enable the DFLL first, but don't wait for the DFLL0RDY bit
	 * because if the DFLL has been disabled before, the DFLL0RDY
	 * bit stays cleared until it is re-enabled.
	 */
	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAUL)
    1776:	4b39      	ldr	r3, [pc, #228]	; (185c <dfll_enable_closed_loop+0x100>)
    1778:	493a      	ldr	r1, [pc, #232]	; (1864 <dfll_enable_closed_loop+0x108>)
    177a:	6199      	str	r1, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_DFLL0CONF - (uint32_t)SCIF);
	SCIF->SCIF_DFLL0CONF = SCIF_DFLL0CONF_EN;
    177c:	2101      	movs	r1, #1
    177e:	6299      	str	r1, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1780:	b922      	cbnz	r2, 178c <dfll_enable_closed_loop+0x30>
		cpu_irq_enable();
    1782:	4b37      	ldr	r3, [pc, #220]	; (1860 <dfll_enable_closed_loop+0x104>)
    1784:	7019      	strb	r1, [r3, #0]
    1786:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    178a:	b662      	cpsie	i

	/*
	 * Then, configure the DFLL, taking care to wait for the
	 * DFLL0RDY bit before every step.
	 */
	dfll_write_reg(DFLL0STEP, cfg->step);
    178c:	4a33      	ldr	r2, [pc, #204]	; (185c <dfll_enable_closed_loop+0x100>)
    178e:	6953      	ldr	r3, [r2, #20]
    1790:	f013 0f08 	tst.w	r3, #8
    1794:	d0fb      	beq.n	178e <dfll_enable_closed_loop+0x32>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1796:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    179a:	b672      	cpsid	i
    179c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    17a0:	2200      	movs	r2, #0
    17a2:	4b2f      	ldr	r3, [pc, #188]	; (1860 <dfll_enable_closed_loop+0x104>)
    17a4:	701a      	strb	r2, [r3, #0]
    17a6:	4b2d      	ldr	r3, [pc, #180]	; (185c <dfll_enable_closed_loop+0x100>)
    17a8:	4a2f      	ldr	r2, [pc, #188]	; (1868 <dfll_enable_closed_loop+0x10c>)
    17aa:	619a      	str	r2, [r3, #24]
    17ac:	68c2      	ldr	r2, [r0, #12]
    17ae:	635a      	str	r2, [r3, #52]	; 0x34
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    17b0:	b929      	cbnz	r1, 17be <dfll_enable_closed_loop+0x62>
		cpu_irq_enable();
    17b2:	2201      	movs	r2, #1
    17b4:	4b2a      	ldr	r3, [pc, #168]	; (1860 <dfll_enable_closed_loop+0x104>)
    17b6:	701a      	strb	r2, [r3, #0]
    17b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    17bc:	b662      	cpsie	i
	dfll_write_reg(DFLL0MUL, cfg->mul);
    17be:	4a27      	ldr	r2, [pc, #156]	; (185c <dfll_enable_closed_loop+0x100>)
    17c0:	6953      	ldr	r3, [r2, #20]
    17c2:	f013 0f08 	tst.w	r3, #8
    17c6:	d0fb      	beq.n	17c0 <dfll_enable_closed_loop+0x64>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17c8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    17cc:	b672      	cpsid	i
    17ce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    17d2:	2200      	movs	r2, #0
    17d4:	4b22      	ldr	r3, [pc, #136]	; (1860 <dfll_enable_closed_loop+0x104>)
    17d6:	701a      	strb	r2, [r3, #0]
    17d8:	4b20      	ldr	r3, [pc, #128]	; (185c <dfll_enable_closed_loop+0x100>)
    17da:	4a24      	ldr	r2, [pc, #144]	; (186c <dfll_enable_closed_loop+0x110>)
    17dc:	619a      	str	r2, [r3, #24]
    17de:	6882      	ldr	r2, [r0, #8]
    17e0:	631a      	str	r2, [r3, #48]	; 0x30
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    17e2:	b929      	cbnz	r1, 17f0 <dfll_enable_closed_loop+0x94>
		cpu_irq_enable();
    17e4:	2201      	movs	r2, #1
    17e6:	4b1e      	ldr	r3, [pc, #120]	; (1860 <dfll_enable_closed_loop+0x104>)
    17e8:	701a      	strb	r2, [r3, #0]
    17ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    17ee:	b662      	cpsie	i
	dfll_write_reg(DFLL0SSG, cfg->ssg);
    17f0:	4a1a      	ldr	r2, [pc, #104]	; (185c <dfll_enable_closed_loop+0x100>)
    17f2:	6953      	ldr	r3, [r2, #20]
    17f4:	f013 0f08 	tst.w	r3, #8
    17f8:	d0fb      	beq.n	17f2 <dfll_enable_closed_loop+0x96>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    17fa:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    17fe:	b672      	cpsid	i
    1800:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1804:	2200      	movs	r2, #0
    1806:	4b16      	ldr	r3, [pc, #88]	; (1860 <dfll_enable_closed_loop+0x104>)
    1808:	701a      	strb	r2, [r3, #0]
    180a:	4b14      	ldr	r3, [pc, #80]	; (185c <dfll_enable_closed_loop+0x100>)
    180c:	4a18      	ldr	r2, [pc, #96]	; (1870 <dfll_enable_closed_loop+0x114>)
    180e:	619a      	str	r2, [r3, #24]
    1810:	6902      	ldr	r2, [r0, #16]
    1812:	639a      	str	r2, [r3, #56]	; 0x38
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1814:	b929      	cbnz	r1, 1822 <dfll_enable_closed_loop+0xc6>
		cpu_irq_enable();
    1816:	2201      	movs	r2, #1
    1818:	4b11      	ldr	r3, [pc, #68]	; (1860 <dfll_enable_closed_loop+0x104>)
    181a:	701a      	strb	r2, [r3, #0]
    181c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1820:	b662      	cpsie	i
	dfll_write_reg(DFLL0CONF, cfg->conf | SCIF_DFLL0CONF_EN);
    1822:	4a0e      	ldr	r2, [pc, #56]	; (185c <dfll_enable_closed_loop+0x100>)
    1824:	6953      	ldr	r3, [r2, #20]
    1826:	f013 0f08 	tst.w	r3, #8
    182a:	d0fb      	beq.n	1824 <dfll_enable_closed_loop+0xc8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    182c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1830:	b672      	cpsid	i
    1832:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1836:	2100      	movs	r1, #0
    1838:	4b09      	ldr	r3, [pc, #36]	; (1860 <dfll_enable_closed_loop+0x104>)
    183a:	7019      	strb	r1, [r3, #0]
    183c:	4b07      	ldr	r3, [pc, #28]	; (185c <dfll_enable_closed_loop+0x100>)
    183e:	4909      	ldr	r1, [pc, #36]	; (1864 <dfll_enable_closed_loop+0x108>)
    1840:	6199      	str	r1, [r3, #24]
    1842:	6841      	ldr	r1, [r0, #4]
    1844:	f041 0101 	orr.w	r1, r1, #1
    1848:	6299      	str	r1, [r3, #40]	; 0x28
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    184a:	b92a      	cbnz	r2, 1858 <dfll_enable_closed_loop+0xfc>
		cpu_irq_enable();
    184c:	2201      	movs	r2, #1
    184e:	4b04      	ldr	r3, [pc, #16]	; (1860 <dfll_enable_closed_loop+0x104>)
    1850:	701a      	strb	r2, [r3, #0]
    1852:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1856:	b662      	cpsie	i
    1858:	4770      	bx	lr
    185a:	bf00      	nop
    185c:	400e0800 	.word	0x400e0800
    1860:	20000038 	.word	0x20000038
    1864:	aa000028 	.word	0xaa000028
    1868:	aa000034 	.word	0xaa000034
    186c:	aa000030 	.word	0xaa000030
    1870:	aa000038 	.word	0xaa000038

00001874 <dfll_enable_config_defaults>:
	/* Finally, stop the reference clock */
	genclk_disable(0);
}

void dfll_enable_config_defaults(uint32_t dfll_id)
{
    1874:	b500      	push	{lr}
    1876:	b089      	sub	sp, #36	; 0x24
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if((SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) &&
    1878:	4b22      	ldr	r3, [pc, #136]	; (1904 <dfll_enable_config_defaults+0x90>)
    187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    187c:	f013 0f02 	tst.w	r3, #2
    1880:	d009      	beq.n	1896 <dfll_enable_config_defaults+0x22>
	   (SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_EN)) {
    1882:	4b20      	ldr	r3, [pc, #128]	; (1904 <dfll_enable_config_defaults+0x90>)
    1884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
#ifdef CONFIG_DFLL0_SOURCE
	struct dfll_config dfllcfg;
#endif
	static bool open_loop_done = false;

	if((SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_MODE) &&
    1886:	f013 0f01 	tst.w	r3, #1
    188a:	d004      	beq.n	1896 <dfll_enable_config_defaults+0x22>
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    188c:	4b1d      	ldr	r3, [pc, #116]	; (1904 <dfll_enable_config_defaults+0x90>)
    188e:	695b      	ldr	r3, [r3, #20]
	   (SCIF->SCIF_DFLL0CONF & SCIF_DFLL0CONF_EN)) {
		// Closed-loop mode
		if (dfll_is_fine_locked(dfll_id)) {
    1890:	f013 0f04 	tst.w	r3, #4
    1894:	d133      	bne.n	18fe <dfll_enable_config_defaults+0x8a>
	}
	if (open_loop_done == true) {
		return;
	}

	switch (dfll_id) {
    1896:	2800      	cmp	r0, #0
    1898:	d131      	bne.n	18fe <dfll_enable_config_defaults+0x8a>
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    189a:	4b1b      	ldr	r3, [pc, #108]	; (1908 <dfll_enable_config_defaults+0x94>)
    189c:	695b      	ldr	r3, [r3, #20]
		/* Nothing to do */
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
		if (!osc_is_ready(OSC_ID_OSC32)) {
    189e:	f013 0f01 	tst.w	r3, #1
    18a2:	d106      	bne.n	18b2 <dfll_enable_config_defaults+0x3e>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    18a4:	4b19      	ldr	r3, [pc, #100]	; (190c <dfll_enable_config_defaults+0x98>)
    18a6:	4798      	blx	r3
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    18a8:	4a17      	ldr	r2, [pc, #92]	; (1908 <dfll_enable_config_defaults+0x94>)
    18aa:	6953      	ldr	r3, [r2, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    18ac:	f013 0f01 	tst.w	r3, #1
    18b0:	d0fb      	beq.n	18aa <dfll_enable_config_defaults+0x36>
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~SCIF_GCCTRL_OSCSEL_Msk)
    18b2:	f44f 7380 	mov.w	r3, #256	; 0x100
    18b6:	9301      	str	r3, [sp, #4]
	genclk_config_defaults(&cfg->ref_cfg, 0);
	genclk_config_set_source(&cfg->ref_cfg, refclk);
	genclk_config_set_divider(&cfg->ref_cfg, divide);

	// Do a sync before reading a dfll conf register
	SCIF->SCIF_DFLL0SYNC = SCIF_DFLL0SYNC_SYNC;
    18b8:	2201      	movs	r2, #1
    18ba:	4b12      	ldr	r3, [pc, #72]	; (1904 <dfll_enable_config_defaults+0x90>)
    18bc:	641a      	str	r2, [r3, #64]	; 0x40
	while (!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0RDY));
    18be:	461a      	mov	r2, r3
    18c0:	6953      	ldr	r3, [r2, #20]
    18c2:	f013 0f08 	tst.w	r3, #8
    18c6:	d0fb      	beq.n	18c0 <dfll_enable_config_defaults+0x4c>
	cfg->conf = SCIF->SCIF_DFLL0CONF;
    18c8:	4b0e      	ldr	r3, [pc, #56]	; (1904 <dfll_enable_config_defaults+0x90>)
    18ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
	if (freq < DFLL_MAX_RANGE3){
		cfg->freq_range = DFLL_RANGE3;
	}
	else if (freq < DFLL_MAX_RANGE2){
		cfg->freq_range = DFLL_RANGE2;
    18cc:	2202      	movs	r2, #2
    18ce:	f88d 201c 	strb.w	r2, [sp, #28]
		cfg->freq_range = DFLL_RANGE1;
	}
	else {
		cfg->freq_range = DFLL_RANGE0;
	}
	cfg->conf &= ~SCIF_DFLL0CONF_RANGE_Msk;
    18d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
	cfg->conf |=SCIF_DFLL0CONF_RANGE(cfg->freq_range);
    18d6:	f043 1302 	orr.w	r3, r3, #131074	; 0x20002
    18da:	9302      	str	r3, [sp, #8]
	// Select Closed Loop Mode
	cfg->conf |= SCIF_DFLL0CONF_MODE;
	// Write DFLL Frequency Range
	dfll_priv_set_frequency_range(cfg, CONFIG_DFLL0_FREQ);

	cfg->mul = mul;
    18dc:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    18e0:	9303      	str	r3, [sp, #12]
	cfg->val = 0;
    18e2:	2100      	movs	r1, #0
    18e4:	9106      	str	r1, [sp, #24]
};

static inline void dfll_config_set_max_step(struct dfll_config *cfg,
		uint16_t coarse, uint16_t fine)
{
	cfg->step = (SCIF_DFLL0STEP_CSTEP(coarse)
    18e6:	f04f 1304 	mov.w	r3, #262148	; 0x40004
    18ea:	9304      	str	r3, [sp, #16]
	/*
	 * Initial step length of 4. If this is set too high, the DFLL
	 * may fail to lock.
	 */
	dfll_config_set_max_step(cfg, 4, 4);
	cfg->ssg = 0;
    18ec:	9105      	str	r1, [sp, #20]
		dfll_config_init_closed_loop_mode(&dfllcfg,
			CONFIG_DFLL0_SOURCE,
			CONFIG_DFLL0_DIV,
			CONFIG_DFLL0_MUL);

		dfll_enable_closed_loop(&dfllcfg, dfll_id);
    18ee:	a801      	add	r0, sp, #4
    18f0:	4b07      	ldr	r3, [pc, #28]	; (1910 <dfll_enable_config_defaults+0x9c>)
    18f2:	4798      	blx	r3
}

static inline bool dfll_is_fine_locked(uint32_t dfll_id)
{
	UNUSED(dfll_id);
	return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_DFLL0LOCKF);
    18f4:	4a03      	ldr	r2, [pc, #12]	; (1904 <dfll_enable_config_defaults+0x90>)
    18f6:	6953      	ldr	r3, [r2, #20]
		while (!dfll_is_fine_locked(dfll_id));
    18f8:	f013 0f04 	tst.w	r3, #4
    18fc:	d0fb      	beq.n	18f6 <dfll_enable_config_defaults+0x82>

	default:
		Assert(false);
		break;
	}
}
    18fe:	b009      	add	sp, #36	; 0x24
    1900:	f85d fb04 	ldr.w	pc, [sp], #4
    1904:	400e0800 	.word	0x400e0800
    1908:	400f0400 	.word	0x400f0400
    190c:	00001915 	.word	0x00001915
    1910:	0000175d 	.word	0x0000175d

00001914 <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1914:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1918:	b672      	cpsid	i
    191a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    191e:	2100      	movs	r1, #0
    1920:	4b07      	ldr	r3, [pc, #28]	; (1940 <osc_priv_enable_osc32+0x2c>)
    1922:	7019      	strb	r1, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    1924:	4b07      	ldr	r3, [pc, #28]	; (1944 <osc_priv_enable_osc32+0x30>)
    1926:	4908      	ldr	r1, [pc, #32]	; (1948 <osc_priv_enable_osc32+0x34>)
    1928:	6199      	str	r1, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    192a:	4908      	ldr	r1, [pc, #32]	; (194c <osc_priv_enable_osc32+0x38>)
    192c:	6219      	str	r1, [r3, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    192e:	b92a      	cbnz	r2, 193c <osc_priv_enable_osc32+0x28>
		cpu_irq_enable();
    1930:	2201      	movs	r2, #1
    1932:	4b03      	ldr	r3, [pc, #12]	; (1940 <osc_priv_enable_osc32+0x2c>)
    1934:	701a      	strb	r2, [r3, #0]
    1936:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    193a:	b662      	cpsie	i
    193c:	4770      	bx	lr
    193e:	bf00      	nop
    1940:	20000038 	.word	0x20000038
    1944:	400f0400 	.word	0x400f0400
    1948:	aa000020 	.word	0xaa000020
    194c:	0005a10d 	.word	0x0005a10d

00001950 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    1950:	b470      	push	{r4, r5, r6}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1952:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1956:	b672      	cpsid	i
    1958:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    195c:	2400      	movs	r4, #0
    195e:	4b0d      	ldr	r3, [pc, #52]	; (1994 <sysclk_priv_enable_module+0x44>)
    1960:	701c      	strb	r4, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    1962:	0085      	lsls	r5, r0, #2
    1964:	4b0c      	ldr	r3, [pc, #48]	; (1998 <sysclk_priv_enable_module+0x48>)
    1966:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    196a:	2601      	movs	r6, #1
    196c:	fa06 f101 	lsl.w	r1, r6, r1
    1970:	4321      	orrs	r1, r4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    1972:	3520      	adds	r5, #32
    1974:	f405 757f 	and.w	r5, r5, #1020	; 0x3fc
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    1978:	f045 452a 	orr.w	r5, r5, #2852126720	; 0xaa000000
    197c:	4c07      	ldr	r4, [pc, #28]	; (199c <sysclk_priv_enable_module+0x4c>)
    197e:	65a5      	str	r5, [r4, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    1980:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1984:	b922      	cbnz	r2, 1990 <sysclk_priv_enable_module+0x40>
		cpu_irq_enable();
    1986:	4b03      	ldr	r3, [pc, #12]	; (1994 <sysclk_priv_enable_module+0x44>)
    1988:	701e      	strb	r6, [r3, #0]
    198a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    198e:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    1990:	bc70      	pop	{r4, r5, r6}
    1992:	4770      	bx	lr
    1994:	20000038 	.word	0x20000038
    1998:	400e0020 	.word	0x400e0020
    199c:	400e0000 	.word	0x400e0000

000019a0 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    19a0:	b470      	push	{r4, r5, r6}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19a2:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    19a6:	b672      	cpsid	i
    19a8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    19ac:	2400      	movs	r4, #0
    19ae:	4b0e      	ldr	r3, [pc, #56]	; (19e8 <sysclk_priv_disable_module+0x48>)
    19b0:	701c      	strb	r4, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    19b2:	0085      	lsls	r5, r0, #2
    19b4:	4b0d      	ldr	r3, [pc, #52]	; (19ec <sysclk_priv_disable_module+0x4c>)
    19b6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    19ba:	2601      	movs	r6, #1
    19bc:	fa06 f101 	lsl.w	r1, r6, r1
    19c0:	ea24 0101 	bic.w	r1, r4, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    19c4:	3520      	adds	r5, #32
    19c6:	f405 757f 	and.w	r5, r5, #1020	; 0x3fc
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    19ca:	f045 452a 	orr.w	r5, r5, #2852126720	; 0xaa000000
    19ce:	4c08      	ldr	r4, [pc, #32]	; (19f0 <sysclk_priv_disable_module+0x50>)
    19d0:	65a5      	str	r5, [r4, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    19d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    19d6:	b922      	cbnz	r2, 19e2 <sysclk_priv_disable_module+0x42>
		cpu_irq_enable();
    19d8:	4b03      	ldr	r3, [pc, #12]	; (19e8 <sysclk_priv_disable_module+0x48>)
    19da:	701e      	strb	r6, [r3, #0]
    19dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    19e0:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    19e2:	bc70      	pop	{r4, r5, r6}
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop
    19e8:	20000038 	.word	0x20000038
    19ec:	400e0020 	.word	0x400e0020
    19f0:	400e0000 	.word	0x400e0000

000019f4 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    19f4:	b538      	push	{r3, r4, r5, lr}
    19f6:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19f8:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    19fc:	b672      	cpsid	i
    19fe:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a02:	2200      	movs	r2, #0
    1a04:	4b0a      	ldr	r3, [pc, #40]	; (1a30 <sysclk_enable_pba_module+0x3c>)
    1a06:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1a08:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <sysclk_enable_pba_module+0x40>)
    1a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a0c:	b91b      	cbnz	r3, 1a16 <sysclk_enable_pba_module+0x22>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1a0e:	2001      	movs	r0, #1
    1a10:	2105      	movs	r1, #5
    1a12:	4b09      	ldr	r3, [pc, #36]	; (1a38 <sysclk_enable_pba_module+0x44>)
    1a14:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1a16:	b92d      	cbnz	r5, 1a24 <sysclk_enable_pba_module+0x30>
		cpu_irq_enable();
    1a18:	2201      	movs	r2, #1
    1a1a:	4b05      	ldr	r3, [pc, #20]	; (1a30 <sysclk_enable_pba_module+0x3c>)
    1a1c:	701a      	strb	r2, [r3, #0]
    1a1e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1a22:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    1a24:	2002      	movs	r0, #2
    1a26:	4621      	mov	r1, r4
    1a28:	4b03      	ldr	r3, [pc, #12]	; (1a38 <sysclk_enable_pba_module+0x44>)
    1a2a:	4798      	blx	r3
    1a2c:	bd38      	pop	{r3, r4, r5, pc}
    1a2e:	bf00      	nop
    1a30:	20000038 	.word	0x20000038
    1a34:	400e0000 	.word	0x400e0000
    1a38:	00001951 	.word	0x00001951

00001a3c <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    1a3c:	b510      	push	{r4, lr}
    1a3e:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    1a40:	2002      	movs	r0, #2
    1a42:	4b0c      	ldr	r3, [pc, #48]	; (1a74 <sysclk_disable_pba_module+0x38>)
    1a44:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a46:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1a4a:	b672      	cpsid	i
    1a4c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a50:	2200      	movs	r2, #0
    1a52:	4b09      	ldr	r3, [pc, #36]	; (1a78 <sysclk_disable_pba_module+0x3c>)
    1a54:	701a      	strb	r2, [r3, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    1a56:	4b09      	ldr	r3, [pc, #36]	; (1a7c <sysclk_disable_pba_module+0x40>)
    1a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a5a:	b91b      	cbnz	r3, 1a64 <sysclk_disable_pba_module+0x28>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1a5c:	2001      	movs	r0, #1
    1a5e:	2105      	movs	r1, #5
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <sysclk_disable_pba_module+0x38>)
    1a62:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1a64:	b92c      	cbnz	r4, 1a72 <sysclk_disable_pba_module+0x36>
		cpu_irq_enable();
    1a66:	2201      	movs	r2, #1
    1a68:	4b03      	ldr	r3, [pc, #12]	; (1a78 <sysclk_disable_pba_module+0x3c>)
    1a6a:	701a      	strb	r2, [r3, #0]
    1a6c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1a70:	b662      	cpsie	i
    1a72:	bd10      	pop	{r4, pc}
    1a74:	000019a1 	.word	0x000019a1
    1a78:	20000038 	.word	0x20000038
    1a7c:	400e0000 	.word	0x400e0000

00001a80 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    1a80:	b538      	push	{r3, r4, r5, lr}
    1a82:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a84:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1a88:	b672      	cpsid	i
    1a8a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a8e:	2200      	movs	r2, #0
    1a90:	4b0a      	ldr	r3, [pc, #40]	; (1abc <sysclk_enable_pbb_module+0x3c>)
    1a92:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1a94:	4b0a      	ldr	r3, [pc, #40]	; (1ac0 <sysclk_enable_pbb_module+0x40>)
    1a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a98:	b91b      	cbnz	r3, 1aa2 <sysclk_enable_pbb_module+0x22>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1a9a:	2001      	movs	r0, #1
    1a9c:	2106      	movs	r1, #6
    1a9e:	4b09      	ldr	r3, [pc, #36]	; (1ac4 <sysclk_enable_pbb_module+0x44>)
    1aa0:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1aa2:	b92d      	cbnz	r5, 1ab0 <sysclk_enable_pbb_module+0x30>
		cpu_irq_enable();
    1aa4:	2201      	movs	r2, #1
    1aa6:	4b05      	ldr	r3, [pc, #20]	; (1abc <sysclk_enable_pbb_module+0x3c>)
    1aa8:	701a      	strb	r2, [r3, #0]
    1aaa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1aae:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    1ab0:	2003      	movs	r0, #3
    1ab2:	4621      	mov	r1, r4
    1ab4:	4b03      	ldr	r3, [pc, #12]	; (1ac4 <sysclk_enable_pbb_module+0x44>)
    1ab6:	4798      	blx	r3
    1ab8:	bd38      	pop	{r3, r4, r5, pc}
    1aba:	bf00      	nop
    1abc:	20000038 	.word	0x20000038
    1ac0:	400e0000 	.word	0x400e0000
    1ac4:	00001951 	.word	0x00001951

00001ac8 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    1ac8:	b510      	push	{r4, lr}
    1aca:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    1acc:	2003      	movs	r0, #3
    1ace:	4b0c      	ldr	r3, [pc, #48]	; (1b00 <sysclk_disable_pbb_module+0x38>)
    1ad0:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ad2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1ad6:	b672      	cpsid	i
    1ad8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1adc:	2200      	movs	r2, #0
    1ade:	4b09      	ldr	r3, [pc, #36]	; (1b04 <sysclk_disable_pbb_module+0x3c>)
    1ae0:	701a      	strb	r2, [r3, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    1ae2:	4b09      	ldr	r3, [pc, #36]	; (1b08 <sysclk_disable_pbb_module+0x40>)
    1ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ae6:	b91b      	cbnz	r3, 1af0 <sysclk_disable_pbb_module+0x28>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    1ae8:	2001      	movs	r0, #1
    1aea:	2106      	movs	r1, #6
    1aec:	4b04      	ldr	r3, [pc, #16]	; (1b00 <sysclk_disable_pbb_module+0x38>)
    1aee:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1af0:	b92c      	cbnz	r4, 1afe <sysclk_disable_pbb_module+0x36>
		cpu_irq_enable();
    1af2:	2201      	movs	r2, #1
    1af4:	4b03      	ldr	r3, [pc, #12]	; (1b04 <sysclk_disable_pbb_module+0x3c>)
    1af6:	701a      	strb	r2, [r3, #0]
    1af8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1afc:	b662      	cpsie	i
    1afe:	bd10      	pop	{r4, pc}
    1b00:	000019a1 	.word	0x000019a1
    1b04:	20000038 	.word	0x20000038
    1b08:	400e0000 	.word	0x400e0000

00001b0c <sysclk_get_peripheral_bus_hz>:
 * \return Frequency of the bus attached to the specified peripheral, in Hz.
 */
uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
{
	/* Fallthroughs intended for modules sharing the same peripheral bus. */
	switch ((uintptr_t)module) {
    1b0c:	4b60      	ldr	r3, [pc, #384]	; (1c90 <sysclk_get_peripheral_bus_hz+0x184>)
    1b0e:	4298      	cmp	r0, r3
    1b10:	f000 80b8 	beq.w	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b14:	d860      	bhi.n	1bd8 <sysclk_get_peripheral_bus_hz+0xcc>
    1b16:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
    1b1a:	4298      	cmp	r0, r3
    1b1c:	f000 80b2 	beq.w	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b20:	d82f      	bhi.n	1b82 <sysclk_get_peripheral_bus_hz+0x76>
    1b22:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1b26:	4298      	cmp	r0, r3
    1b28:	f000 80ac 	beq.w	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b2c:	d814      	bhi.n	1b58 <sysclk_get_peripheral_bus_hz+0x4c>
    1b2e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1b32:	4298      	cmp	r0, r3
    1b34:	f000 80a6 	beq.w	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b38:	d804      	bhi.n	1b44 <sysclk_get_peripheral_bus_hz+0x38>
    1b3a:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1b3e:	f040 80a4 	bne.w	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1b42:	e09f      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b44:	4b53      	ldr	r3, [pc, #332]	; (1c94 <sysclk_get_peripheral_bus_hz+0x188>)
    1b46:	4298      	cmp	r0, r3
    1b48:	f000 809c 	beq.w	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1b50:	4298      	cmp	r0, r3
    1b52:	f040 809a 	bne.w	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1b56:	e095      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b58:	4b4f      	ldr	r3, [pc, #316]	; (1c98 <sysclk_get_peripheral_bus_hz+0x18c>)
    1b5a:	4298      	cmp	r0, r3
    1b5c:	f000 8092 	beq.w	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b60:	d805      	bhi.n	1b6e <sysclk_get_peripheral_bus_hz+0x62>
    1b62:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
    1b66:	4298      	cmp	r0, r3
    1b68:	f040 808f 	bne.w	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1b6c:	e08a      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b6e:	4b4b      	ldr	r3, [pc, #300]	; (1c9c <sysclk_get_peripheral_bus_hz+0x190>)
    1b70:	4298      	cmp	r0, r3
    1b72:	f000 8087 	beq.w	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b76:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
    1b7a:	4298      	cmp	r0, r3
    1b7c:	f040 8085 	bne.w	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1b80:	e080      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b82:	4b47      	ldr	r3, [pc, #284]	; (1ca0 <sysclk_get_peripheral_bus_hz+0x194>)
    1b84:	4298      	cmp	r0, r3
    1b86:	d07d      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b88:	d811      	bhi.n	1bae <sysclk_get_peripheral_bus_hz+0xa2>
    1b8a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1b8e:	4298      	cmp	r0, r3
    1b90:	d078      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b92:	d804      	bhi.n	1b9e <sysclk_get_peripheral_bus_hz+0x92>
    1b94:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1b98:	4298      	cmp	r0, r3
    1b9a:	d176      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1b9c:	e072      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1b9e:	4b41      	ldr	r3, [pc, #260]	; (1ca4 <sysclk_get_peripheral_bus_hz+0x198>)
    1ba0:	4298      	cmp	r0, r3
    1ba2:	d06f      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1ba4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1ba8:	4298      	cmp	r0, r3
    1baa:	d16e      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1bac:	e06a      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bae:	4b3e      	ldr	r3, [pc, #248]	; (1ca8 <sysclk_get_peripheral_bus_hz+0x19c>)
    1bb0:	4298      	cmp	r0, r3
    1bb2:	d067      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bb4:	d808      	bhi.n	1bc8 <sysclk_get_peripheral_bus_hz+0xbc>
    1bb6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1bba:	4298      	cmp	r0, r3
    1bbc:	d062      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1bc2:	4298      	cmp	r0, r3
    1bc4:	d161      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1bc6:	e05d      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bc8:	4b38      	ldr	r3, [pc, #224]	; (1cac <sysclk_get_peripheral_bus_hz+0x1a0>)
    1bca:	4298      	cmp	r0, r3
    1bcc:	d05a      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1bd2:	4298      	cmp	r0, r3
    1bd4:	d159      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1bd6:	e055      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bd8:	4b35      	ldr	r3, [pc, #212]	; (1cb0 <sysclk_get_peripheral_bus_hz+0x1a4>)
    1bda:	4298      	cmp	r0, r3
    1bdc:	d052      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bde:	d827      	bhi.n	1c30 <sysclk_get_peripheral_bus_hz+0x124>
    1be0:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
    1be4:	4298      	cmp	r0, r3
    1be6:	d04d      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1be8:	d811      	bhi.n	1c0e <sysclk_get_peripheral_bus_hz+0x102>
    1bea:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
    1bee:	4298      	cmp	r0, r3
    1bf0:	d048      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bf2:	d804      	bhi.n	1bfe <sysclk_get_peripheral_bus_hz+0xf2>
    1bf4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1bf8:	4298      	cmp	r0, r3
    1bfa:	d146      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1bfc:	e042      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1bfe:	4b2d      	ldr	r3, [pc, #180]	; (1cb4 <sysclk_get_peripheral_bus_hz+0x1a8>)
    1c00:	4298      	cmp	r0, r3
    1c02:	d03f      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1c08:	4298      	cmp	r0, r3
    1c0a:	d13e      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1c0c:	e03a      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c0e:	4b2a      	ldr	r3, [pc, #168]	; (1cb8 <sysclk_get_peripheral_bus_hz+0x1ac>)
    1c10:	4298      	cmp	r0, r3
    1c12:	d037      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c14:	d804      	bhi.n	1c20 <sysclk_get_peripheral_bus_hz+0x114>
    1c16:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    1c1a:	4298      	cmp	r0, r3
    1c1c:	d135      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1c1e:	e031      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c20:	4b26      	ldr	r3, [pc, #152]	; (1cbc <sysclk_get_peripheral_bus_hz+0x1b0>)
    1c22:	4298      	cmp	r0, r3
    1c24:	d02e      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1c2a:	4298      	cmp	r0, r3
    1c2c:	d12d      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1c2e:	e029      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c30:	4b23      	ldr	r3, [pc, #140]	; (1cc0 <sysclk_get_peripheral_bus_hz+0x1b4>)
    1c32:	4298      	cmp	r0, r3
    1c34:	d026      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c36:	d811      	bhi.n	1c5c <sysclk_get_peripheral_bus_hz+0x150>
    1c38:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
    1c3c:	4298      	cmp	r0, r3
    1c3e:	d021      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c40:	d804      	bhi.n	1c4c <sysclk_get_peripheral_bus_hz+0x140>
    1c42:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
    1c46:	4298      	cmp	r0, r3
    1c48:	d11f      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1c4a:	e01b      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c4c:	4b1d      	ldr	r3, [pc, #116]	; (1cc4 <sysclk_get_peripheral_bus_hz+0x1b8>)
    1c4e:	4298      	cmp	r0, r3
    1c50:	d018      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1c56:	4298      	cmp	r0, r3
    1c58:	d117      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1c5a:	e013      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c5c:	4b1a      	ldr	r3, [pc, #104]	; (1cc8 <sysclk_get_peripheral_bus_hz+0x1bc>)
    1c5e:	4298      	cmp	r0, r3
    1c60:	d010      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c62:	d808      	bhi.n	1c76 <sysclk_get_peripheral_bus_hz+0x16a>
    1c64:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    1c68:	4298      	cmp	r0, r3
    1c6a:	d00b      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1c70:	4298      	cmp	r0, r3
    1c72:	d10a      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
    1c74:	e006      	b.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c76:	4b15      	ldr	r3, [pc, #84]	; (1ccc <sysclk_get_peripheral_bus_hz+0x1c0>)
    1c78:	4298      	cmp	r0, r3
    1c7a:	d003      	beq.n	1c84 <sysclk_get_peripheral_bus_hz+0x178>
    1c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1c80:	4298      	cmp	r0, r3
    1c82:	d102      	bne.n	1c8a <sysclk_get_peripheral_bus_hz+0x17e>
	case TWIM2_ADDR:
	case TWIM3_ADDR:
	#if !SAM4LS
	case LCDCA_ADDR:
	#endif
		return sysclk_get_pba_hz();
    1c84:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    1c88:	4770      	bx	lr
	case PICOUART_ADDR:
		return sysclk_get_pbd_hz();

	default:
		Assert(false);
		return 0;
    1c8a:	2000      	movs	r0, #0
	}
}
    1c8c:	4770      	bx	lr
    1c8e:	bf00      	nop
    1c90:	40078000 	.word	0x40078000
    1c94:	40010000 	.word	0x40010000
    1c98:	4001c000 	.word	0x4001c000
    1c9c:	4001c400 	.word	0x4001c400
    1ca0:	40040000 	.word	0x40040000
    1ca4:	40038000 	.word	0x40038000
    1ca8:	40068000 	.word	0x40068000
    1cac:	4006c000 	.word	0x4006c000
    1cb0:	400e0000 	.word	0x400e0000
    1cb4:	400a0000 	.word	0x400a0000
    1cb8:	400a4000 	.word	0x400a4000
    1cbc:	400a5000 	.word	0x400a5000
    1cc0:	400f0000 	.word	0x400f0000
    1cc4:	400e0c00 	.word	0x400e0c00
    1cc8:	400f0c00 	.word	0x400f0c00
    1ccc:	400f1000 	.word	0x400f1000

00001cd0 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    1cd0:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    1cd2:	4bb3      	ldr	r3, [pc, #716]	; (1fa0 <sysclk_enable_peripheral_clock+0x2d0>)
    1cd4:	4298      	cmp	r0, r3
    1cd6:	f000 815a 	beq.w	1f8e <sysclk_enable_peripheral_clock+0x2be>
    1cda:	d86a      	bhi.n	1db2 <sysclk_enable_peripheral_clock+0xe2>
    1cdc:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
    1ce0:	4298      	cmp	r0, r3
    1ce2:	f000 8113 	beq.w	1f0c <sysclk_enable_peripheral_clock+0x23c>
    1ce6:	d82f      	bhi.n	1d48 <sysclk_enable_peripheral_clock+0x78>
    1ce8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1cec:	4298      	cmp	r0, r3
    1cee:	f000 80f2 	beq.w	1ed6 <sysclk_enable_peripheral_clock+0x206>
    1cf2:	d814      	bhi.n	1d1e <sysclk_enable_peripheral_clock+0x4e>
    1cf4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1cf8:	4298      	cmp	r0, r3
    1cfa:	f000 80d2 	beq.w	1ea2 <sysclk_enable_peripheral_clock+0x1d2>
    1cfe:	d804      	bhi.n	1d0a <sysclk_enable_peripheral_clock+0x3a>
    1d00:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    1d04:	f000 80c9 	beq.w	1e9a <sysclk_enable_peripheral_clock+0x1ca>
    1d08:	bd08      	pop	{r3, pc}
    1d0a:	4ba6      	ldr	r3, [pc, #664]	; (1fa4 <sysclk_enable_peripheral_clock+0x2d4>)
    1d0c:	4298      	cmp	r0, r3
    1d0e:	f000 80cc 	beq.w	1eaa <sysclk_enable_peripheral_clock+0x1da>
    1d12:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1d16:	4298      	cmp	r0, r3
    1d18:	f000 80d2 	beq.w	1ec0 <sysclk_enable_peripheral_clock+0x1f0>
    1d1c:	bd08      	pop	{r3, pc}
    1d1e:	4ba2      	ldr	r3, [pc, #648]	; (1fa8 <sysclk_enable_peripheral_clock+0x2d8>)
    1d20:	4298      	cmp	r0, r3
    1d22:	f000 80e0 	beq.w	1ee6 <sysclk_enable_peripheral_clock+0x216>
    1d26:	d805      	bhi.n	1d34 <sysclk_enable_peripheral_clock+0x64>
    1d28:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
    1d2c:	4298      	cmp	r0, r3
    1d2e:	f000 80d6 	beq.w	1ede <sysclk_enable_peripheral_clock+0x20e>
    1d32:	bd08      	pop	{r3, pc}
    1d34:	4b9d      	ldr	r3, [pc, #628]	; (1fac <sysclk_enable_peripheral_clock+0x2dc>)
    1d36:	4298      	cmp	r0, r3
    1d38:	f000 80d9 	beq.w	1eee <sysclk_enable_peripheral_clock+0x21e>
    1d3c:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
    1d40:	4298      	cmp	r0, r3
    1d42:	f000 80d8 	beq.w	1ef6 <sysclk_enable_peripheral_clock+0x226>
    1d46:	bd08      	pop	{r3, pc}
    1d48:	4b99      	ldr	r3, [pc, #612]	; (1fb0 <sysclk_enable_peripheral_clock+0x2e0>)
    1d4a:	4298      	cmp	r0, r3
    1d4c:	f000 8107 	beq.w	1f5e <sysclk_enable_peripheral_clock+0x28e>
    1d50:	d815      	bhi.n	1d7e <sysclk_enable_peripheral_clock+0xae>
    1d52:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    1d56:	4298      	cmp	r0, r3
    1d58:	f000 80ee 	beq.w	1f38 <sysclk_enable_peripheral_clock+0x268>
    1d5c:	d805      	bhi.n	1d6a <sysclk_enable_peripheral_clock+0x9a>
    1d5e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1d62:	4298      	cmp	r0, r3
    1d64:	f000 80dd 	beq.w	1f22 <sysclk_enable_peripheral_clock+0x252>
    1d68:	bd08      	pop	{r3, pc}
    1d6a:	4b92      	ldr	r3, [pc, #584]	; (1fb4 <sysclk_enable_peripheral_clock+0x2e4>)
    1d6c:	4298      	cmp	r0, r3
    1d6e:	f000 80ee 	beq.w	1f4e <sysclk_enable_peripheral_clock+0x27e>
    1d72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1d76:	4298      	cmp	r0, r3
    1d78:	f000 80ed 	beq.w	1f56 <sysclk_enable_peripheral_clock+0x286>
    1d7c:	bd08      	pop	{r3, pc}
    1d7e:	4b8e      	ldr	r3, [pc, #568]	; (1fb8 <sysclk_enable_peripheral_clock+0x2e8>)
    1d80:	4298      	cmp	r0, r3
    1d82:	f000 80f8 	beq.w	1f76 <sysclk_enable_peripheral_clock+0x2a6>
    1d86:	d80a      	bhi.n	1d9e <sysclk_enable_peripheral_clock+0xce>
    1d88:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1d8c:	4298      	cmp	r0, r3
    1d8e:	f000 80ea 	beq.w	1f66 <sysclk_enable_peripheral_clock+0x296>
    1d92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1d96:	4298      	cmp	r0, r3
    1d98:	f000 80e9 	beq.w	1f6e <sysclk_enable_peripheral_clock+0x29e>
    1d9c:	bd08      	pop	{r3, pc}
    1d9e:	4b87      	ldr	r3, [pc, #540]	; (1fbc <sysclk_enable_peripheral_clock+0x2ec>)
    1da0:	4298      	cmp	r0, r3
    1da2:	f000 80ec 	beq.w	1f7e <sysclk_enable_peripheral_clock+0x2ae>
    1da6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1daa:	4298      	cmp	r0, r3
    1dac:	f000 80eb 	beq.w	1f86 <sysclk_enable_peripheral_clock+0x2b6>
    1db0:	bd08      	pop	{r3, pc}
    1db2:	4b83      	ldr	r3, [pc, #524]	; (1fc0 <sysclk_enable_peripheral_clock+0x2f0>)
    1db4:	4298      	cmp	r0, r3
    1db6:	f000 814d 	beq.w	2054 <sysclk_enable_peripheral_clock+0x384>
    1dba:	d834      	bhi.n	1e26 <sysclk_enable_peripheral_clock+0x156>
    1dbc:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
    1dc0:	4298      	cmp	r0, r3
    1dc2:	f000 8127 	beq.w	2014 <sysclk_enable_peripheral_clock+0x344>
    1dc6:	d815      	bhi.n	1df4 <sysclk_enable_peripheral_clock+0x124>
    1dc8:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
    1dcc:	4298      	cmp	r0, r3
    1dce:	f000 810d 	beq.w	1fec <sysclk_enable_peripheral_clock+0x31c>
    1dd2:	d805      	bhi.n	1de0 <sysclk_enable_peripheral_clock+0x110>
    1dd4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1dd8:	4298      	cmp	r0, r3
    1dda:	f000 80dc 	beq.w	1f96 <sysclk_enable_peripheral_clock+0x2c6>
    1dde:	bd08      	pop	{r3, pc}
    1de0:	4b78      	ldr	r3, [pc, #480]	; (1fc4 <sysclk_enable_peripheral_clock+0x2f4>)
    1de2:	4298      	cmp	r0, r3
    1de4:	f000 8106 	beq.w	1ff4 <sysclk_enable_peripheral_clock+0x324>
    1de8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1dec:	4298      	cmp	r0, r3
    1dee:	f000 8109 	beq.w	2004 <sysclk_enable_peripheral_clock+0x334>
    1df2:	bd08      	pop	{r3, pc}
    1df4:	4b74      	ldr	r3, [pc, #464]	; (1fc8 <sysclk_enable_peripheral_clock+0x2f8>)
    1df6:	4298      	cmp	r0, r3
    1df8:	f000 8120 	beq.w	203c <sysclk_enable_peripheral_clock+0x36c>
    1dfc:	d80a      	bhi.n	1e14 <sysclk_enable_peripheral_clock+0x144>
    1dfe:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
    1e02:	4298      	cmp	r0, r3
    1e04:	f000 810a 	beq.w	201c <sysclk_enable_peripheral_clock+0x34c>
    1e08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    1e0c:	4298      	cmp	r0, r3
    1e0e:	f000 810d 	beq.w	202c <sysclk_enable_peripheral_clock+0x35c>
    1e12:	bd08      	pop	{r3, pc}
    1e14:	4b6d      	ldr	r3, [pc, #436]	; (1fcc <sysclk_enable_peripheral_clock+0x2fc>)
    1e16:	4298      	cmp	r0, r3
    1e18:	f000 8118 	beq.w	204c <sysclk_enable_peripheral_clock+0x37c>
    1e1c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    1e20:	4298      	cmp	r0, r3
    1e22:	d035      	beq.n	1e90 <sysclk_enable_peripheral_clock+0x1c0>
    1e24:	bd08      	pop	{r3, pc}
    1e26:	4b6a      	ldr	r3, [pc, #424]	; (1fd0 <sysclk_enable_peripheral_clock+0x300>)
    1e28:	4298      	cmp	r0, r3
    1e2a:	f000 812c 	beq.w	2086 <sysclk_enable_peripheral_clock+0x3b6>
    1e2e:	d815      	bhi.n	1e5c <sysclk_enable_peripheral_clock+0x18c>
    1e30:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
    1e34:	4298      	cmp	r0, r3
    1e36:	f000 8117 	beq.w	2068 <sysclk_enable_peripheral_clock+0x398>
    1e3a:	d805      	bhi.n	1e48 <sysclk_enable_peripheral_clock+0x178>
    1e3c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
    1e40:	4298      	cmp	r0, r3
    1e42:	f000 810c 	beq.w	205e <sysclk_enable_peripheral_clock+0x38e>
    1e46:	bd08      	pop	{r3, pc}
    1e48:	4b62      	ldr	r3, [pc, #392]	; (1fd4 <sysclk_enable_peripheral_clock+0x304>)
    1e4a:	4298      	cmp	r0, r3
    1e4c:	f000 8111 	beq.w	2072 <sysclk_enable_peripheral_clock+0x3a2>
    1e50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1e54:	4298      	cmp	r0, r3
    1e56:	f000 8111 	beq.w	207c <sysclk_enable_peripheral_clock+0x3ac>
    1e5a:	bd08      	pop	{r3, pc}
    1e5c:	4b5e      	ldr	r3, [pc, #376]	; (1fd8 <sysclk_enable_peripheral_clock+0x308>)
    1e5e:	4298      	cmp	r0, r3
    1e60:	f000 8120 	beq.w	20a4 <sysclk_enable_peripheral_clock+0x3d4>
    1e64:	d80a      	bhi.n	1e7c <sysclk_enable_peripheral_clock+0x1ac>
    1e66:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    1e6a:	4298      	cmp	r0, r3
    1e6c:	f000 8110 	beq.w	2090 <sysclk_enable_peripheral_clock+0x3c0>
    1e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1e74:	4298      	cmp	r0, r3
    1e76:	f000 8110 	beq.w	209a <sysclk_enable_peripheral_clock+0x3ca>
    1e7a:	bd08      	pop	{r3, pc}
    1e7c:	4b57      	ldr	r3, [pc, #348]	; (1fdc <sysclk_enable_peripheral_clock+0x30c>)
    1e7e:	4298      	cmp	r0, r3
    1e80:	f000 8115 	beq.w	20ae <sysclk_enable_peripheral_clock+0x3de>
    1e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1e88:	4298      	cmp	r0, r3
    1e8a:	f000 8115 	beq.w	20b8 <sysclk_enable_peripheral_clock+0x3e8>
    1e8e:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1e90:	2001      	movs	r0, #1
    1e92:	2109      	movs	r1, #9
    1e94:	4b52      	ldr	r3, [pc, #328]	; (1fe0 <sysclk_enable_peripheral_clock+0x310>)
    1e96:	4798      	blx	r3
    1e98:	bd08      	pop	{r3, pc}
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;
	#endif

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    1e9a:	2000      	movs	r0, #0
    1e9c:	4b51      	ldr	r3, [pc, #324]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1e9e:	4798      	blx	r3
		break;
    1ea0:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    1ea2:	2001      	movs	r0, #1
    1ea4:	4b4f      	ldr	r3, [pc, #316]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1ea6:	4798      	blx	r3
		break;
    1ea8:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    1eaa:	2002      	movs	r0, #2
    1eac:	4b4d      	ldr	r3, [pc, #308]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1eae:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1eb0:	4b43      	ldr	r3, [pc, #268]	; (1fc0 <sysclk_enable_peripheral_clock+0x2f0>)
    1eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1eb4:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1eb8:	494b      	ldr	r1, [pc, #300]	; (1fe8 <sysclk_enable_peripheral_clock+0x318>)
    1eba:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1ebc:	641a      	str	r2, [r3, #64]	; 0x40
    1ebe:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    1ec0:	2003      	movs	r0, #3
    1ec2:	4b48      	ldr	r3, [pc, #288]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1ec4:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1ec6:	4b3e      	ldr	r3, [pc, #248]	; (1fc0 <sysclk_enable_peripheral_clock+0x2f0>)
    1ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1eca:	f042 0255 	orr.w	r2, r2, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1ece:	4946      	ldr	r1, [pc, #280]	; (1fe8 <sysclk_enable_peripheral_clock+0x318>)
    1ed0:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1ed2:	641a      	str	r2, [r3, #64]	; 0x40
    1ed4:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    1ed6:	2004      	movs	r0, #4
    1ed8:	4b42      	ldr	r3, [pc, #264]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1eda:	4798      	blx	r3
		break;
    1edc:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    1ede:	2005      	movs	r0, #5
    1ee0:	4b40      	ldr	r3, [pc, #256]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1ee2:	4798      	blx	r3
		break;
    1ee4:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    1ee6:	2006      	movs	r0, #6
    1ee8:	4b3e      	ldr	r3, [pc, #248]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1eea:	4798      	blx	r3
		break;
    1eec:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    1eee:	2007      	movs	r0, #7
    1ef0:	4b3c      	ldr	r3, [pc, #240]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1ef2:	4798      	blx	r3
		break;
    1ef4:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    1ef6:	2008      	movs	r0, #8
    1ef8:	4b3a      	ldr	r3, [pc, #232]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1efa:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1efc:	4b30      	ldr	r3, [pc, #192]	; (1fc0 <sysclk_enable_peripheral_clock+0x2f0>)
    1efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1f00:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f04:	4938      	ldr	r1, [pc, #224]	; (1fe8 <sysclk_enable_peripheral_clock+0x318>)
    1f06:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f08:	641a      	str	r2, [r3, #64]	; 0x40
    1f0a:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    1f0c:	2009      	movs	r0, #9
    1f0e:	4b35      	ldr	r3, [pc, #212]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f10:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1f12:	4b2b      	ldr	r3, [pc, #172]	; (1fc0 <sysclk_enable_peripheral_clock+0x2f0>)
    1f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1f16:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f1a:	4933      	ldr	r1, [pc, #204]	; (1fe8 <sysclk_enable_peripheral_clock+0x318>)
    1f1c:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f1e:	641a      	str	r2, [r3, #64]	; 0x40
    1f20:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    1f22:	200a      	movs	r0, #10
    1f24:	4b2f      	ldr	r3, [pc, #188]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f26:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1f28:	4b25      	ldr	r3, [pc, #148]	; (1fc0 <sysclk_enable_peripheral_clock+0x2f0>)
    1f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1f2c:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f30:	492d      	ldr	r1, [pc, #180]	; (1fe8 <sysclk_enable_peripheral_clock+0x318>)
    1f32:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f34:	641a      	str	r2, [r3, #64]	; 0x40
    1f36:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    1f38:	200b      	movs	r0, #11
    1f3a:	4b2a      	ldr	r3, [pc, #168]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f3c:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    1f3e:	4b20      	ldr	r3, [pc, #128]	; (1fc0 <sysclk_enable_peripheral_clock+0x2f0>)
    1f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask |= mask;
    1f42:	f042 0204 	orr.w	r2, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    1f46:	4928      	ldr	r1, [pc, #160]	; (1fe8 <sysclk_enable_peripheral_clock+0x318>)
    1f48:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    1f4a:	641a      	str	r2, [r3, #64]	; 0x40
    1f4c:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    1f4e:	200c      	movs	r0, #12
    1f50:	4b24      	ldr	r3, [pc, #144]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f52:	4798      	blx	r3
		break;
    1f54:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    1f56:	200d      	movs	r0, #13
    1f58:	4b22      	ldr	r3, [pc, #136]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f5a:	4798      	blx	r3
		break;
    1f5c:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    1f5e:	200e      	movs	r0, #14
    1f60:	4b20      	ldr	r3, [pc, #128]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f62:	4798      	blx	r3
		break;
    1f64:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    1f66:	200f      	movs	r0, #15
    1f68:	4b1e      	ldr	r3, [pc, #120]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f6a:	4798      	blx	r3
		break;
    1f6c:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    1f6e:	2010      	movs	r0, #16
    1f70:	4b1c      	ldr	r3, [pc, #112]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f72:	4798      	blx	r3
		break;
    1f74:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    1f76:	2011      	movs	r0, #17
    1f78:	4b1a      	ldr	r3, [pc, #104]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f7a:	4798      	blx	r3
		break;
    1f7c:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    1f7e:	2012      	movs	r0, #18
    1f80:	4b18      	ldr	r3, [pc, #96]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f82:	4798      	blx	r3
		break;
    1f84:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    1f86:	2013      	movs	r0, #19
    1f88:	4b16      	ldr	r3, [pc, #88]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f8a:	4798      	blx	r3
		break;
    1f8c:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    1f8e:	2015      	movs	r0, #21
    1f90:	4b14      	ldr	r3, [pc, #80]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f92:	4798      	blx	r3
		break;
    1f94:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    1f96:	2016      	movs	r0, #22
    1f98:	4b12      	ldr	r3, [pc, #72]	; (1fe4 <sysclk_enable_peripheral_clock+0x314>)
    1f9a:	4798      	blx	r3
		break;
    1f9c:	bd08      	pop	{r3, pc}
    1f9e:	bf00      	nop
    1fa0:	40078000 	.word	0x40078000
    1fa4:	40010000 	.word	0x40010000
    1fa8:	4001c000 	.word	0x4001c000
    1fac:	4001c400 	.word	0x4001c400
    1fb0:	40040000 	.word	0x40040000
    1fb4:	40038000 	.word	0x40038000
    1fb8:	40068000 	.word	0x40068000
    1fbc:	4006c000 	.word	0x4006c000
    1fc0:	400e0000 	.word	0x400e0000
    1fc4:	400a0000 	.word	0x400a0000
    1fc8:	400a5000 	.word	0x400a5000
    1fcc:	400a6000 	.word	0x400a6000
    1fd0:	400f0000 	.word	0x400f0000
    1fd4:	400e0c00 	.word	0x400e0c00
    1fd8:	400f0c00 	.word	0x400f0c00
    1fdc:	400f1000 	.word	0x400f1000
    1fe0:	00001951 	.word	0x00001951
    1fe4:	000019f5 	.word	0x000019f5
    1fe8:	aa000040 	.word	0xaa000040

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    1fec:	2017      	movs	r0, #23
    1fee:	4b35      	ldr	r3, [pc, #212]	; (20c4 <sysclk_enable_peripheral_clock+0x3f4>)
    1ff0:	4798      	blx	r3
		break;
    1ff2:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    1ff4:	2001      	movs	r0, #1
    1ff6:	4601      	mov	r1, r0
    1ff8:	4b33      	ldr	r3, [pc, #204]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    1ffa:	4798      	blx	r3
	#endif

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    1ffc:	2000      	movs	r0, #0
    1ffe:	4b33      	ldr	r3, [pc, #204]	; (20cc <sysclk_enable_peripheral_clock+0x3fc>)
    2000:	4798      	blx	r3
		break;
    2002:	bd08      	pop	{r3, pc}
    2004:	2001      	movs	r0, #1
    2006:	2102      	movs	r1, #2
    2008:	4b2f      	ldr	r3, [pc, #188]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    200a:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    200c:	2001      	movs	r0, #1
    200e:	4b2f      	ldr	r3, [pc, #188]	; (20cc <sysclk_enable_peripheral_clock+0x3fc>)
    2010:	4798      	blx	r3
		break;
    2012:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    2014:	2002      	movs	r0, #2
    2016:	4b2d      	ldr	r3, [pc, #180]	; (20cc <sysclk_enable_peripheral_clock+0x3fc>)
    2018:	4798      	blx	r3
		break;
    201a:	bd08      	pop	{r3, pc}
    201c:	2001      	movs	r0, #1
    201e:	2100      	movs	r1, #0
    2020:	4b29      	ldr	r3, [pc, #164]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    2022:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    2024:	2003      	movs	r0, #3
    2026:	4b29      	ldr	r3, [pc, #164]	; (20cc <sysclk_enable_peripheral_clock+0x3fc>)
    2028:	4798      	blx	r3
		break;
    202a:	bd08      	pop	{r3, pc}
    202c:	2001      	movs	r0, #1
    202e:	2104      	movs	r1, #4
    2030:	4b25      	ldr	r3, [pc, #148]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    2032:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    2034:	2004      	movs	r0, #4
    2036:	4b25      	ldr	r3, [pc, #148]	; (20cc <sysclk_enable_peripheral_clock+0x3fc>)
    2038:	4798      	blx	r3
		break;
    203a:	bd08      	pop	{r3, pc}
    203c:	2001      	movs	r0, #1
    203e:	2103      	movs	r1, #3
    2040:	4b21      	ldr	r3, [pc, #132]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    2042:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    2044:	2005      	movs	r0, #5
    2046:	4b21      	ldr	r3, [pc, #132]	; (20cc <sysclk_enable_peripheral_clock+0x3fc>)
    2048:	4798      	blx	r3
		break;
    204a:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    204c:	2006      	movs	r0, #6
    204e:	4b1f      	ldr	r3, [pc, #124]	; (20cc <sysclk_enable_peripheral_clock+0x3fc>)
    2050:	4798      	blx	r3
		break;
    2052:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    2054:	2004      	movs	r0, #4
    2056:	2100      	movs	r1, #0
    2058:	4b1b      	ldr	r3, [pc, #108]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    205a:	4798      	blx	r3
    205c:	bd08      	pop	{r3, pc}
    205e:	2004      	movs	r0, #4
    2060:	2101      	movs	r1, #1
    2062:	4b19      	ldr	r3, [pc, #100]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    2064:	4798      	blx	r3
    2066:	bd08      	pop	{r3, pc}
    2068:	2004      	movs	r0, #4
    206a:	2102      	movs	r1, #2
    206c:	4b16      	ldr	r3, [pc, #88]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    206e:	4798      	blx	r3
    2070:	bd08      	pop	{r3, pc}
    2072:	2004      	movs	r0, #4
    2074:	2103      	movs	r1, #3
    2076:	4b14      	ldr	r3, [pc, #80]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    2078:	4798      	blx	r3
    207a:	bd08      	pop	{r3, pc}
    207c:	2004      	movs	r0, #4
    207e:	4601      	mov	r1, r0
    2080:	4b11      	ldr	r3, [pc, #68]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    2082:	4798      	blx	r3
    2084:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    2086:	2005      	movs	r0, #5
    2088:	2100      	movs	r1, #0
    208a:	4b0f      	ldr	r3, [pc, #60]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    208c:	4798      	blx	r3
    208e:	bd08      	pop	{r3, pc}
    2090:	2005      	movs	r0, #5
    2092:	2101      	movs	r1, #1
    2094:	4b0c      	ldr	r3, [pc, #48]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    2096:	4798      	blx	r3
    2098:	bd08      	pop	{r3, pc}
    209a:	2005      	movs	r0, #5
    209c:	2102      	movs	r1, #2
    209e:	4b0a      	ldr	r3, [pc, #40]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    20a0:	4798      	blx	r3
    20a2:	bd08      	pop	{r3, pc}
    20a4:	2005      	movs	r0, #5
    20a6:	2103      	movs	r1, #3
    20a8:	4b07      	ldr	r3, [pc, #28]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    20aa:	4798      	blx	r3
    20ac:	bd08      	pop	{r3, pc}
    20ae:	2005      	movs	r0, #5
    20b0:	2104      	movs	r1, #4
    20b2:	4b05      	ldr	r3, [pc, #20]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    20b4:	4798      	blx	r3
    20b6:	bd08      	pop	{r3, pc}
    20b8:	2005      	movs	r0, #5
    20ba:	4601      	mov	r1, r0
    20bc:	4b02      	ldr	r3, [pc, #8]	; (20c8 <sysclk_enable_peripheral_clock+0x3f8>)
    20be:	4798      	blx	r3
    20c0:	bd08      	pop	{r3, pc}
    20c2:	bf00      	nop
    20c4:	000019f5 	.word	0x000019f5
    20c8:	00001951 	.word	0x00001951
    20cc:	00001a81 	.word	0x00001a81

000020d0 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    20d0:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    20d2:	4bb4      	ldr	r3, [pc, #720]	; (23a4 <sysclk_disable_peripheral_clock+0x2d4>)
    20d4:	4298      	cmp	r0, r3
    20d6:	f000 8130 	beq.w	233a <sysclk_disable_peripheral_clock+0x26a>
    20da:	d86a      	bhi.n	21b2 <sysclk_disable_peripheral_clock+0xe2>
    20dc:	f5a3 23a0 	sub.w	r3, r3, #327680	; 0x50000
    20e0:	4298      	cmp	r0, r3
    20e2:	f000 80fe 	beq.w	22e2 <sysclk_disable_peripheral_clock+0x212>
    20e6:	d82f      	bhi.n	2148 <sysclk_disable_peripheral_clock+0x78>
    20e8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    20ec:	4298      	cmp	r0, r3
    20ee:	f000 80e4 	beq.w	22ba <sysclk_disable_peripheral_clock+0x1ea>
    20f2:	d814      	bhi.n	211e <sysclk_disable_peripheral_clock+0x4e>
    20f4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    20f8:	4298      	cmp	r0, r3
    20fa:	f000 80d2 	beq.w	22a2 <sysclk_disable_peripheral_clock+0x1d2>
    20fe:	d804      	bhi.n	210a <sysclk_disable_peripheral_clock+0x3a>
    2100:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    2104:	f000 80c9 	beq.w	229a <sysclk_disable_peripheral_clock+0x1ca>
    2108:	bd08      	pop	{r3, pc}
    210a:	4ba7      	ldr	r3, [pc, #668]	; (23a8 <sysclk_disable_peripheral_clock+0x2d8>)
    210c:	4298      	cmp	r0, r3
    210e:	f000 80cc 	beq.w	22aa <sysclk_disable_peripheral_clock+0x1da>
    2112:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2116:	4298      	cmp	r0, r3
    2118:	f000 80cb 	beq.w	22b2 <sysclk_disable_peripheral_clock+0x1e2>
    211c:	bd08      	pop	{r3, pc}
    211e:	4ba3      	ldr	r3, [pc, #652]	; (23ac <sysclk_disable_peripheral_clock+0x2dc>)
    2120:	4298      	cmp	r0, r3
    2122:	f000 80d2 	beq.w	22ca <sysclk_disable_peripheral_clock+0x1fa>
    2126:	d805      	bhi.n	2134 <sysclk_disable_peripheral_clock+0x64>
    2128:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
    212c:	4298      	cmp	r0, r3
    212e:	f000 80c8 	beq.w	22c2 <sysclk_disable_peripheral_clock+0x1f2>
    2132:	bd08      	pop	{r3, pc}
    2134:	4b9e      	ldr	r3, [pc, #632]	; (23b0 <sysclk_disable_peripheral_clock+0x2e0>)
    2136:	4298      	cmp	r0, r3
    2138:	f000 80cb 	beq.w	22d2 <sysclk_disable_peripheral_clock+0x202>
    213c:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
    2140:	4298      	cmp	r0, r3
    2142:	f000 80ca 	beq.w	22da <sysclk_disable_peripheral_clock+0x20a>
    2146:	bd08      	pop	{r3, pc}
    2148:	4b9a      	ldr	r3, [pc, #616]	; (23b4 <sysclk_disable_peripheral_clock+0x2e4>)
    214a:	4298      	cmp	r0, r3
    214c:	f000 80dd 	beq.w	230a <sysclk_disable_peripheral_clock+0x23a>
    2150:	d815      	bhi.n	217e <sysclk_disable_peripheral_clock+0xae>
    2152:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    2156:	4298      	cmp	r0, r3
    2158:	f000 80cb 	beq.w	22f2 <sysclk_disable_peripheral_clock+0x222>
    215c:	d805      	bhi.n	216a <sysclk_disable_peripheral_clock+0x9a>
    215e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2162:	4298      	cmp	r0, r3
    2164:	f000 80c1 	beq.w	22ea <sysclk_disable_peripheral_clock+0x21a>
    2168:	bd08      	pop	{r3, pc}
    216a:	4b93      	ldr	r3, [pc, #588]	; (23b8 <sysclk_disable_peripheral_clock+0x2e8>)
    216c:	4298      	cmp	r0, r3
    216e:	f000 80c4 	beq.w	22fa <sysclk_disable_peripheral_clock+0x22a>
    2172:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2176:	4298      	cmp	r0, r3
    2178:	f000 80c3 	beq.w	2302 <sysclk_disable_peripheral_clock+0x232>
    217c:	bd08      	pop	{r3, pc}
    217e:	4b8f      	ldr	r3, [pc, #572]	; (23bc <sysclk_disable_peripheral_clock+0x2ec>)
    2180:	4298      	cmp	r0, r3
    2182:	f000 80ce 	beq.w	2322 <sysclk_disable_peripheral_clock+0x252>
    2186:	d80a      	bhi.n	219e <sysclk_disable_peripheral_clock+0xce>
    2188:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    218c:	4298      	cmp	r0, r3
    218e:	f000 80c0 	beq.w	2312 <sysclk_disable_peripheral_clock+0x242>
    2192:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2196:	4298      	cmp	r0, r3
    2198:	f000 80bf 	beq.w	231a <sysclk_disable_peripheral_clock+0x24a>
    219c:	bd08      	pop	{r3, pc}
    219e:	4b88      	ldr	r3, [pc, #544]	; (23c0 <sysclk_disable_peripheral_clock+0x2f0>)
    21a0:	4298      	cmp	r0, r3
    21a2:	f000 80c2 	beq.w	232a <sysclk_disable_peripheral_clock+0x25a>
    21a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    21aa:	4298      	cmp	r0, r3
    21ac:	f000 80c1 	beq.w	2332 <sysclk_disable_peripheral_clock+0x262>
    21b0:	bd08      	pop	{r3, pc}
    21b2:	4b84      	ldr	r3, [pc, #528]	; (23c4 <sysclk_disable_peripheral_clock+0x2f4>)
    21b4:	4298      	cmp	r0, r3
    21b6:	f000 811f 	beq.w	23f8 <sysclk_disable_peripheral_clock+0x328>
    21ba:	d834      	bhi.n	2226 <sysclk_disable_peripheral_clock+0x156>
    21bc:	f5a3 337c 	sub.w	r3, r3, #258048	; 0x3f000
    21c0:	4298      	cmp	r0, r3
    21c2:	f000 80d2 	beq.w	236a <sysclk_disable_peripheral_clock+0x29a>
    21c6:	d815      	bhi.n	21f4 <sysclk_disable_peripheral_clock+0x124>
    21c8:	f5a3 3304 	sub.w	r3, r3, #135168	; 0x21000
    21cc:	4298      	cmp	r0, r3
    21ce:	f000 80bc 	beq.w	234a <sysclk_disable_peripheral_clock+0x27a>
    21d2:	d805      	bhi.n	21e0 <sysclk_disable_peripheral_clock+0x110>
    21d4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    21d8:	4298      	cmp	r0, r3
    21da:	f000 80b2 	beq.w	2342 <sysclk_disable_peripheral_clock+0x272>
    21de:	bd08      	pop	{r3, pc}
    21e0:	4b79      	ldr	r3, [pc, #484]	; (23c8 <sysclk_disable_peripheral_clock+0x2f8>)
    21e2:	4298      	cmp	r0, r3
    21e4:	f000 80b5 	beq.w	2352 <sysclk_disable_peripheral_clock+0x282>
    21e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    21ec:	4298      	cmp	r0, r3
    21ee:	f000 80b4 	beq.w	235a <sysclk_disable_peripheral_clock+0x28a>
    21f2:	bd08      	pop	{r3, pc}
    21f4:	4b75      	ldr	r3, [pc, #468]	; (23cc <sysclk_disable_peripheral_clock+0x2fc>)
    21f6:	4298      	cmp	r0, r3
    21f8:	f000 80cb 	beq.w	2392 <sysclk_disable_peripheral_clock+0x2c2>
    21fc:	d80a      	bhi.n	2214 <sysclk_disable_peripheral_clock+0x144>
    21fe:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
    2202:	4298      	cmp	r0, r3
    2204:	f000 80b5 	beq.w	2372 <sysclk_disable_peripheral_clock+0x2a2>
    2208:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    220c:	4298      	cmp	r0, r3
    220e:	f000 80b8 	beq.w	2382 <sysclk_disable_peripheral_clock+0x2b2>
    2212:	bd08      	pop	{r3, pc}
    2214:	4b6e      	ldr	r3, [pc, #440]	; (23d0 <sysclk_disable_peripheral_clock+0x300>)
    2216:	4298      	cmp	r0, r3
    2218:	f000 80ea 	beq.w	23f0 <sysclk_disable_peripheral_clock+0x320>
    221c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    2220:	4298      	cmp	r0, r3
    2222:	d035      	beq.n	2290 <sysclk_disable_peripheral_clock+0x1c0>
    2224:	bd08      	pop	{r3, pc}
    2226:	4b6b      	ldr	r3, [pc, #428]	; (23d4 <sysclk_disable_peripheral_clock+0x304>)
    2228:	4298      	cmp	r0, r3
    222a:	f000 80fe 	beq.w	242a <sysclk_disable_peripheral_clock+0x35a>
    222e:	d815      	bhi.n	225c <sysclk_disable_peripheral_clock+0x18c>
    2230:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
    2234:	4298      	cmp	r0, r3
    2236:	f000 80e9 	beq.w	240c <sysclk_disable_peripheral_clock+0x33c>
    223a:	d805      	bhi.n	2248 <sysclk_disable_peripheral_clock+0x178>
    223c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
    2240:	4298      	cmp	r0, r3
    2242:	f000 80de 	beq.w	2402 <sysclk_disable_peripheral_clock+0x332>
    2246:	bd08      	pop	{r3, pc}
    2248:	4b63      	ldr	r3, [pc, #396]	; (23d8 <sysclk_disable_peripheral_clock+0x308>)
    224a:	4298      	cmp	r0, r3
    224c:	f000 80e3 	beq.w	2416 <sysclk_disable_peripheral_clock+0x346>
    2250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    2254:	4298      	cmp	r0, r3
    2256:	f000 80e3 	beq.w	2420 <sysclk_disable_peripheral_clock+0x350>
    225a:	bd08      	pop	{r3, pc}
    225c:	4b5f      	ldr	r3, [pc, #380]	; (23dc <sysclk_disable_peripheral_clock+0x30c>)
    225e:	4298      	cmp	r0, r3
    2260:	f000 80f2 	beq.w	2448 <sysclk_disable_peripheral_clock+0x378>
    2264:	d80a      	bhi.n	227c <sysclk_disable_peripheral_clock+0x1ac>
    2266:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    226a:	4298      	cmp	r0, r3
    226c:	f000 80e2 	beq.w	2434 <sysclk_disable_peripheral_clock+0x364>
    2270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    2274:	4298      	cmp	r0, r3
    2276:	f000 80e2 	beq.w	243e <sysclk_disable_peripheral_clock+0x36e>
    227a:	bd08      	pop	{r3, pc}
    227c:	4b58      	ldr	r3, [pc, #352]	; (23e0 <sysclk_disable_peripheral_clock+0x310>)
    227e:	4298      	cmp	r0, r3
    2280:	f000 80e7 	beq.w	2452 <sysclk_disable_peripheral_clock+0x382>
    2284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    2288:	4298      	cmp	r0, r3
    228a:	f000 80e7 	beq.w	245c <sysclk_disable_peripheral_clock+0x38c>
    228e:	bd08      	pop	{r3, pc}
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2290:	2001      	movs	r0, #1
    2292:	2109      	movs	r1, #9
    2294:	4b53      	ldr	r3, [pc, #332]	; (23e4 <sysclk_disable_peripheral_clock+0x314>)
    2296:	4798      	blx	r3
    2298:	e0e4      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;
	#endif

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    229a:	2000      	movs	r0, #0
    229c:	4b52      	ldr	r3, [pc, #328]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    229e:	4798      	blx	r3
		break;
    22a0:	e0e0      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    22a2:	2001      	movs	r0, #1
    22a4:	4b50      	ldr	r3, [pc, #320]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22a6:	4798      	blx	r3
		break;
    22a8:	e0dc      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    22aa:	2002      	movs	r0, #2
    22ac:	4b4e      	ldr	r3, [pc, #312]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22ae:	4798      	blx	r3
		break;
    22b0:	e0d8      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    22b2:	2003      	movs	r0, #3
    22b4:	4b4c      	ldr	r3, [pc, #304]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22b6:	4798      	blx	r3
		break;
    22b8:	e0d4      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    22ba:	2004      	movs	r0, #4
    22bc:	4b4a      	ldr	r3, [pc, #296]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22be:	4798      	blx	r3
		break;
    22c0:	e0d0      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    22c2:	2005      	movs	r0, #5
    22c4:	4b48      	ldr	r3, [pc, #288]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22c6:	4798      	blx	r3
		break;
    22c8:	e0cc      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    22ca:	2006      	movs	r0, #6
    22cc:	4b46      	ldr	r3, [pc, #280]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22ce:	4798      	blx	r3
		break;
    22d0:	e0c8      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    22d2:	2007      	movs	r0, #7
    22d4:	4b44      	ldr	r3, [pc, #272]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22d6:	4798      	blx	r3
		break;
    22d8:	e0c4      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    22da:	2008      	movs	r0, #8
    22dc:	4b42      	ldr	r3, [pc, #264]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22de:	4798      	blx	r3
		break;
    22e0:	e0c0      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    22e2:	2009      	movs	r0, #9
    22e4:	4b40      	ldr	r3, [pc, #256]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22e6:	4798      	blx	r3
		break;
    22e8:	e0bc      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    22ea:	200a      	movs	r0, #10
    22ec:	4b3e      	ldr	r3, [pc, #248]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22ee:	4798      	blx	r3
		break;
    22f0:	e0b8      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    22f2:	200b      	movs	r0, #11
    22f4:	4b3c      	ldr	r3, [pc, #240]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22f6:	4798      	blx	r3
		break;
    22f8:	e0b4      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    22fa:	200c      	movs	r0, #12
    22fc:	4b3a      	ldr	r3, [pc, #232]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    22fe:	4798      	blx	r3
		break;
    2300:	e0b0      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    2302:	200d      	movs	r0, #13
    2304:	4b38      	ldr	r3, [pc, #224]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    2306:	4798      	blx	r3
		break;
    2308:	e0ac      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    230a:	200e      	movs	r0, #14
    230c:	4b36      	ldr	r3, [pc, #216]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    230e:	4798      	blx	r3
		break;
    2310:	e0a8      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    2312:	200f      	movs	r0, #15
    2314:	4b34      	ldr	r3, [pc, #208]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    2316:	4798      	blx	r3
		break;
    2318:	e0a4      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    231a:	2010      	movs	r0, #16
    231c:	4b32      	ldr	r3, [pc, #200]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    231e:	4798      	blx	r3
		break;
    2320:	e0a0      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    2322:	2011      	movs	r0, #17
    2324:	4b30      	ldr	r3, [pc, #192]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    2326:	4798      	blx	r3
		break;
    2328:	e09c      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    232a:	2012      	movs	r0, #18
    232c:	4b2e      	ldr	r3, [pc, #184]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    232e:	4798      	blx	r3
		break;
    2330:	e098      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    2332:	2013      	movs	r0, #19
    2334:	4b2c      	ldr	r3, [pc, #176]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    2336:	4798      	blx	r3
		break;
    2338:	e094      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    233a:	2015      	movs	r0, #21
    233c:	4b2a      	ldr	r3, [pc, #168]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    233e:	4798      	blx	r3
		break;
    2340:	e090      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    2342:	2016      	movs	r0, #22
    2344:	4b28      	ldr	r3, [pc, #160]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    2346:	4798      	blx	r3
		break;
    2348:	e08c      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	#if !SAM4LS
	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    234a:	2017      	movs	r0, #23
    234c:	4b26      	ldr	r3, [pc, #152]	; (23e8 <sysclk_disable_peripheral_clock+0x318>)
    234e:	4798      	blx	r3
		break;
    2350:	e088      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
	#endif

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    2352:	2000      	movs	r0, #0
    2354:	4b25      	ldr	r3, [pc, #148]	; (23ec <sysclk_disable_peripheral_clock+0x31c>)
    2356:	4798      	blx	r3
		break;
    2358:	e084      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    235a:	2001      	movs	r0, #1
    235c:	2102      	movs	r1, #2
    235e:	4b21      	ldr	r3, [pc, #132]	; (23e4 <sysclk_disable_peripheral_clock+0x314>)
    2360:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    2362:	2001      	movs	r0, #1
    2364:	4b21      	ldr	r3, [pc, #132]	; (23ec <sysclk_disable_peripheral_clock+0x31c>)
    2366:	4798      	blx	r3
		break;
    2368:	e07c      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    236a:	2002      	movs	r0, #2
    236c:	4b1f      	ldr	r3, [pc, #124]	; (23ec <sysclk_disable_peripheral_clock+0x31c>)
    236e:	4798      	blx	r3
		break;
    2370:	e078      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2372:	2001      	movs	r0, #1
    2374:	2100      	movs	r1, #0
    2376:	4b1b      	ldr	r3, [pc, #108]	; (23e4 <sysclk_disable_peripheral_clock+0x314>)
    2378:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    237a:	2003      	movs	r0, #3
    237c:	4b1b      	ldr	r3, [pc, #108]	; (23ec <sysclk_disable_peripheral_clock+0x31c>)
    237e:	4798      	blx	r3
		break;
    2380:	e070      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2382:	2001      	movs	r0, #1
    2384:	2104      	movs	r1, #4
    2386:	4b17      	ldr	r3, [pc, #92]	; (23e4 <sysclk_disable_peripheral_clock+0x314>)
    2388:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    238a:	2004      	movs	r0, #4
    238c:	4b17      	ldr	r3, [pc, #92]	; (23ec <sysclk_disable_peripheral_clock+0x31c>)
    238e:	4798      	blx	r3
		break;
    2390:	e068      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2392:	2001      	movs	r0, #1
    2394:	2103      	movs	r1, #3
    2396:	4b13      	ldr	r3, [pc, #76]	; (23e4 <sysclk_disable_peripheral_clock+0x314>)
    2398:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    239a:	2005      	movs	r0, #5
    239c:	4b13      	ldr	r3, [pc, #76]	; (23ec <sysclk_disable_peripheral_clock+0x31c>)
    239e:	4798      	blx	r3
		break;
    23a0:	e060      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    23a2:	bf00      	nop
    23a4:	40078000 	.word	0x40078000
    23a8:	40010000 	.word	0x40010000
    23ac:	4001c000 	.word	0x4001c000
    23b0:	4001c400 	.word	0x4001c400
    23b4:	40040000 	.word	0x40040000
    23b8:	40038000 	.word	0x40038000
    23bc:	40068000 	.word	0x40068000
    23c0:	4006c000 	.word	0x4006c000
    23c4:	400e0000 	.word	0x400e0000
    23c8:	400a0000 	.word	0x400a0000
    23cc:	400a5000 	.word	0x400a5000
    23d0:	400a6000 	.word	0x400a6000
    23d4:	400f0000 	.word	0x400f0000
    23d8:	400e0c00 	.word	0x400e0c00
    23dc:	400f0c00 	.word	0x400f0c00
    23e0:	400f1000 	.word	0x400f1000
    23e4:	000019a1 	.word	0x000019a1
    23e8:	00001a3d 	.word	0x00001a3d
    23ec:	00001ac9 	.word	0x00001ac9

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    23f0:	2006      	movs	r0, #6
    23f2:	4b23      	ldr	r3, [pc, #140]	; (2480 <sysclk_disable_peripheral_clock+0x3b0>)
    23f4:	4798      	blx	r3
		break;
    23f6:	e035      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    23f8:	2004      	movs	r0, #4
    23fa:	2100      	movs	r1, #0
    23fc:	4b21      	ldr	r3, [pc, #132]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    23fe:	4798      	blx	r3
    2400:	e030      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2402:	2004      	movs	r0, #4
    2404:	2101      	movs	r1, #1
    2406:	4b1f      	ldr	r3, [pc, #124]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    2408:	4798      	blx	r3
    240a:	e02b      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    240c:	2004      	movs	r0, #4
    240e:	2102      	movs	r1, #2
    2410:	4b1c      	ldr	r3, [pc, #112]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    2412:	4798      	blx	r3
    2414:	e026      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2416:	2004      	movs	r0, #4
    2418:	2103      	movs	r1, #3
    241a:	4b1a      	ldr	r3, [pc, #104]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    241c:	4798      	blx	r3
    241e:	e021      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2420:	2004      	movs	r0, #4
    2422:	4601      	mov	r1, r0
    2424:	4b17      	ldr	r3, [pc, #92]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    2426:	4798      	blx	r3
    2428:	e01c      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    242a:	2005      	movs	r0, #5
    242c:	2100      	movs	r1, #0
    242e:	4b15      	ldr	r3, [pc, #84]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    2430:	4798      	blx	r3
    2432:	e017      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2434:	2005      	movs	r0, #5
    2436:	2101      	movs	r1, #1
    2438:	4b12      	ldr	r3, [pc, #72]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    243a:	4798      	blx	r3
    243c:	e012      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    243e:	2005      	movs	r0, #5
    2440:	2102      	movs	r1, #2
    2442:	4b10      	ldr	r3, [pc, #64]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    2444:	4798      	blx	r3
    2446:	e00d      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2448:	2005      	movs	r0, #5
    244a:	2103      	movs	r1, #3
    244c:	4b0d      	ldr	r3, [pc, #52]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    244e:	4798      	blx	r3
    2450:	e008      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    2452:	2005      	movs	r0, #5
    2454:	2104      	movs	r1, #4
    2456:	4b0b      	ldr	r3, [pc, #44]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    2458:	4798      	blx	r3
    245a:	e003      	b.n	2464 <sysclk_disable_peripheral_clock+0x394>
    245c:	2005      	movs	r0, #5
    245e:	4601      	mov	r1, r0
    2460:	4b08      	ldr	r3, [pc, #32]	; (2484 <sysclk_disable_peripheral_clock+0x3b4>)
    2462:	4798      	blx	r3
							(1 << SYSCLK_TC1) | \
							(1 << SYSCLK_USART0) | \
							(1 << SYSCLK_USART1) | \
							(1 << SYSCLK_USART2) | \
							(1 << SYSCLK_USART3))
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    2464:	4b08      	ldr	r3, [pc, #32]	; (2488 <sysclk_disable_peripheral_clock+0x3b8>)
    2466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2468:	f640 730c 	movw	r3, #3852	; 0xf0c
    246c:	421a      	tst	r2, r3
    246e:	d106      	bne.n	247e <sysclk_disable_peripheral_clock+0x3ae>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    2470:	4b05      	ldr	r3, [pc, #20]	; (2488 <sysclk_disable_peripheral_clock+0x3b8>)
    2472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    2474:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    2478:	4904      	ldr	r1, [pc, #16]	; (248c <sysclk_disable_peripheral_clock+0x3bc>)
    247a:	6599      	str	r1, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    247c:	641a      	str	r2, [r3, #64]	; 0x40
    247e:	bd08      	pop	{r3, pc}
    2480:	00001ac9 	.word	0x00001ac9
    2484:	000019a1 	.word	0x000019a1
    2488:	400e0000 	.word	0x400e0000
    248c:	aa000040 	.word	0xaa000040

00002490 <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2490:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2494:	b672      	cpsid	i
    2496:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    249a:	2100      	movs	r1, #0
    249c:	4b07      	ldr	r3, [pc, #28]	; (24bc <sysclk_set_source+0x2c>)
    249e:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    24a0:	4b07      	ldr	r3, [pc, #28]	; (24c0 <sysclk_set_source+0x30>)
    24a2:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    24a6:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    24a8:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    24aa:	b92a      	cbnz	r2, 24b8 <sysclk_set_source+0x28>
		cpu_irq_enable();
    24ac:	2201      	movs	r2, #1
    24ae:	4b03      	ldr	r3, [pc, #12]	; (24bc <sysclk_set_source+0x2c>)
    24b0:	701a      	strb	r2, [r3, #0]
    24b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    24b6:	b662      	cpsie	i
    24b8:	4770      	bx	lr
    24ba:	bf00      	nop
    24bc:	20000038 	.word	0x20000038
    24c0:	400e0000 	.word	0x400e0000

000024c4 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    24c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    24c6:	4c19      	ldr	r4, [pc, #100]	; (252c <sysclk_init+0x68>)
    24c8:	4620      	mov	r0, r4
    24ca:	4b19      	ldr	r3, [pc, #100]	; (2530 <sysclk_init+0x6c>)
    24cc:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    24ce:	2301      	movs	r3, #1
    24d0:	60a3      	str	r3, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    24d2:	4622      	mov	r2, r4
    24d4:	68d3      	ldr	r3, [r2, #12]
    24d6:	f013 0f01 	tst.w	r3, #1
    24da:	d0fb      	beq.n	24d4 <sysclk_init+0x10>
		sysclk_set_source(SYSCLK_SRC_OSC0);
	}
#endif
#ifdef CONFIG_DFLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_DFLL) {
		dfll_enable_config_defaults(0);
    24dc:	2000      	movs	r0, #0
    24de:	4b15      	ldr	r3, [pc, #84]	; (2534 <sysclk_init+0x70>)
    24e0:	4798      	blx	r3
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    24e2:	f04f 7037 	mov.w	r0, #47972352	; 0x2dc0000
    24e6:	2100      	movs	r1, #0
    24e8:	460a      	mov	r2, r1
    24ea:	4b13      	ldr	r3, [pc, #76]	; (2538 <sysclk_init+0x74>)
    24ec:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_DFLL);
    24ee:	2003      	movs	r0, #3
    24f0:	4b12      	ldr	r3, [pc, #72]	; (253c <sysclk_init+0x78>)
    24f2:	4798      	blx	r3
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    24f4:	4812      	ldr	r0, [pc, #72]	; (2540 <sysclk_init+0x7c>)
    24f6:	2100      	movs	r1, #0
    24f8:	4a12      	ldr	r2, [pc, #72]	; (2544 <sysclk_init+0x80>)
    24fa:	4b13      	ldr	r3, [pc, #76]	; (2548 <sysclk_init+0x84>)
    24fc:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    24fe:	4d10      	ldr	r5, [pc, #64]	; (2540 <sysclk_init+0x7c>)
    2500:	4c12      	ldr	r4, [pc, #72]	; (254c <sysclk_init+0x88>)
    2502:	4628      	mov	r0, r5
    2504:	47a0      	blx	r4
    2506:	f010 0f01 	tst.w	r0, #1
    250a:	d0fa      	beq.n	2502 <sysclk_init+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    250c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2510:	b672      	cpsid	i
    2512:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2516:	2100      	movs	r1, #0
    2518:	4a0d      	ldr	r2, [pc, #52]	; (2550 <sysclk_init+0x8c>)
    251a:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    251c:	b92b      	cbnz	r3, 252a <sysclk_init+0x66>
		cpu_irq_enable();
    251e:	2201      	movs	r2, #1
    2520:	4b0b      	ldr	r3, [pc, #44]	; (2550 <sysclk_init+0x8c>)
    2522:	701a      	strb	r2, [r3, #0]
    2524:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2528:	b662      	cpsie	i
    252a:	bd38      	pop	{r3, r4, r5, pc}
    252c:	400a0400 	.word	0x400a0400
    2530:	00001cd1 	.word	0x00001cd1
    2534:	00001875 	.word	0x00001875
    2538:	000026ed 	.word	0x000026ed
    253c:	00002491 	.word	0x00002491
    2540:	400f0000 	.word	0x400f0000
    2544:	0003a980 	.word	0x0003a980
    2548:	00000231 	.word	0x00000231
    254c:	00000295 	.word	0x00000295
    2550:	20000038 	.word	0x20000038

00002554 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    2554:	b510      	push	{r4, lr}
    2556:	b086      	sub	sp, #24
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    2558:	4668      	mov	r0, sp
    255a:	4b39      	ldr	r3, [pc, #228]	; (2640 <board_init+0xec>)
    255c:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    255e:	a804      	add	r0, sp, #16
    2560:	4938      	ldr	r1, [pc, #224]	; (2644 <board_init+0xf0>)
    2562:	466a      	mov	r2, sp
    2564:	4b38      	ldr	r3, [pc, #224]	; (2648 <board_init+0xf4>)
    2566:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    2568:	a804      	add	r0, sp, #16
    256a:	4b38      	ldr	r3, [pc, #224]	; (264c <board_init+0xf8>)
    256c:	4798      	blx	r3
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    256e:	4c38      	ldr	r4, [pc, #224]	; (2650 <board_init+0xfc>)
    2570:	4620      	mov	r0, r4
    2572:	4b38      	ldr	r3, [pc, #224]	; (2654 <board_init+0x100>)
    2574:	4798      	blx	r3

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2576:	4b38      	ldr	r3, [pc, #224]	; (2658 <board_init+0x104>)
    2578:	2280      	movs	r2, #128	; 0x80
    257a:	645a      	str	r2, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    257c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2580:	655a      	str	r2, [r3, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    2582:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2586:	649a      	str	r2, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    2588:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    258c:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    258e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2592:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2596:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    259a:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    259c:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    259e:	639a      	str	r2, [r3, #56]	; 0x38
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    25a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    25a4:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    25a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    25aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    25ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    25b2:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    25b4:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    25b6:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    25b8:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    25ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    25be:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    25c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    25c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    25c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    25cc:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    25ce:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    25d0:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    25d2:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    25d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    25d8:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    25da:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    25de:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    25e2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    25e6:	61a2      	str	r2, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    25e8:	62a2      	str	r2, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    25ea:	63a2      	str	r2, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    25ec:	60a2      	str	r2, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    25ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    25f2:	67a2      	str	r2, [r4, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    25f4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    25f8:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    25fc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2600:	61a2      	str	r2, [r4, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2602:	62a2      	str	r2, [r4, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2604:	63a2      	str	r2, [r4, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2606:	60a2      	str	r2, [r4, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2608:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    260c:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    260e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    2612:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    2616:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    261a:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    261c:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    261e:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2620:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    2622:	2208      	movs	r2, #8
    2624:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    2626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    262a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    262e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    2632:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    2634:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    2636:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    2638:	609a      	str	r2, [r3, #8]
	ioport_set_pin_dir(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_DATA_CMD_GPIO, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(UG_2832HSWEG04_RESET_GPIO, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(UG_2832HSWEG04_RESET_GPIO, IOPORT_MODE_PULLUP);
#endif
}
    263a:	b006      	add	sp, #24
    263c:	bd10      	pop	{r4, pc}
    263e:	bf00      	nop
    2640:	000027bd 	.word	0x000027bd
    2644:	400f0c00 	.word	0x400f0c00
    2648:	000027d5 	.word	0x000027d5
    264c:	00002881 	.word	0x00002881
    2650:	400e1000 	.word	0x400e1000
    2654:	00001cd1 	.word	0x00001cd1
    2658:	400e1400 	.word	0x400e1400

0000265c <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    265c:	4b05      	ldr	r3, [pc, #20]	; (2674 <flashcalw_set_wait_state+0x18>)
    265e:	681b      	ldr	r3, [r3, #0]
    2660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    2664:	2800      	cmp	r0, #0
    2666:	bf0c      	ite	eq
    2668:	2200      	moveq	r2, #0
    266a:	2240      	movne	r2, #64	; 0x40
    266c:	4313      	orrs	r3, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    266e:	4a01      	ldr	r2, [pc, #4]	; (2674 <flashcalw_set_wait_state+0x18>)
    2670:	6013      	str	r3, [r2, #0]
    2672:	4770      	bx	lr
    2674:	400a0000 	.word	0x400a0000

00002678 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    2678:	4b02      	ldr	r3, [pc, #8]	; (2684 <flashcalw_is_ready+0xc>)
    267a:	6898      	ldr	r0, [r3, #8]
}
    267c:	f000 0001 	and.w	r0, r0, #1
    2680:	4770      	bx	lr
    2682:	bf00      	nop
    2684:	400a0000 	.word	0x400a0000

00002688 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    2688:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    268a:	4c02      	ldr	r4, [pc, #8]	; (2694 <flashcalw_default_wait_until_ready+0xc>)
    268c:	47a0      	blx	r4
    268e:	2800      	cmp	r0, #0
    2690:	d0fc      	beq.n	268c <flashcalw_default_wait_until_ready+0x4>
	}
}
    2692:	bd10      	pop	{r4, pc}
    2694:	00002679 	.word	0x00002679

00002698 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    2698:	b538      	push	{r3, r4, r5, lr}
    269a:	4605      	mov	r5, r0
    269c:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    269e:	4b10      	ldr	r3, [pc, #64]	; (26e0 <flashcalw_issue_command+0x48>)
    26a0:	681b      	ldr	r3, [r3, #0]
    26a2:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    26a4:	4b0f      	ldr	r3, [pc, #60]	; (26e4 <flashcalw_issue_command+0x4c>)
    26a6:	685b      	ldr	r3, [r3, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    26a8:	2c00      	cmp	r4, #0
    26aa:	db08      	blt.n	26be <flashcalw_issue_command+0x26>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    26ac:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    26b0:	0224      	lsls	r4, r4, #8
    26b2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    26b6:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    26ba:	432c      	orrs	r4, r5
    26bc:	e004      	b.n	26c8 <flashcalw_issue_command+0x30>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    26be:	f023 043f 	bic.w	r4, r3, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    26c2:	f044 4425 	orr.w	r4, r4, #2768240640	; 0xa5000000
    26c6:	432c      	orrs	r4, r5
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    26c8:	4b06      	ldr	r3, [pc, #24]	; (26e4 <flashcalw_issue_command+0x4c>)
    26ca:	605c      	str	r4, [r3, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    26cc:	689a      	ldr	r2, [r3, #8]
    26ce:	f002 020c 	and.w	r2, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    26d2:	4b05      	ldr	r3, [pc, #20]	; (26e8 <flashcalw_issue_command+0x50>)
    26d4:	601a      	str	r2, [r3, #0]
	flashcalw_wait_until_ready();
    26d6:	4b02      	ldr	r3, [pc, #8]	; (26e0 <flashcalw_issue_command+0x48>)
    26d8:	681b      	ldr	r3, [r3, #0]
    26da:	4798      	blx	r3
    26dc:	bd38      	pop	{r3, r4, r5, pc}
    26de:	bf00      	nop
    26e0:	2000003c 	.word	0x2000003c
    26e4:	400a0000 	.word	0x400a0000
    26e8:	20000acc 	.word	0x20000acc

000026ec <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    26ec:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    26ee:	2900      	cmp	r1, #0
    26f0:	d12d      	bne.n	274e <flashcalw_set_flash_waitstate_and_readmode+0x62>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    26f2:	4b1d      	ldr	r3, [pc, #116]	; (2768 <flashcalw_set_flash_waitstate_and_readmode+0x7c>)
    26f4:	4298      	cmp	r0, r3
    26f6:	d914      	bls.n	2722 <flashcalw_set_flash_waitstate_and_readmode+0x36>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    26f8:	4b1c      	ldr	r3, [pc, #112]	; (276c <flashcalw_set_flash_waitstate_and_readmode+0x80>)
    26fa:	4298      	cmp	r0, r3
    26fc:	d808      	bhi.n	2710 <flashcalw_set_flash_waitstate_and_readmode+0x24>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    26fe:	2001      	movs	r0, #1
    2700:	4b1b      	ldr	r3, [pc, #108]	; (2770 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2702:	4798      	blx	r3
				flashcalw_issue_command(
    2704:	2011      	movs	r0, #17
    2706:	f04f 31ff 	mov.w	r1, #4294967295
    270a:	4b1a      	ldr	r3, [pc, #104]	; (2774 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    270c:	4798      	blx	r3
    270e:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    2710:	2001      	movs	r0, #1
    2712:	4b17      	ldr	r3, [pc, #92]	; (2770 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2714:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    2716:	2010      	movs	r0, #16
    2718:	f04f 31ff 	mov.w	r1, #4294967295
    271c:	4b15      	ldr	r3, [pc, #84]	; (2774 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    271e:	4798      	blx	r3
    2720:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    2722:	b15a      	cbz	r2, 273c <flashcalw_set_flash_waitstate_and_readmode+0x50>
    2724:	4b14      	ldr	r3, [pc, #80]	; (2778 <flashcalw_set_flash_waitstate_and_readmode+0x8c>)
    2726:	4298      	cmp	r0, r3
    2728:	d808      	bhi.n	273c <flashcalw_set_flash_waitstate_and_readmode+0x50>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    272a:	2001      	movs	r0, #1
    272c:	4b10      	ldr	r3, [pc, #64]	; (2770 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    272e:	4798      	blx	r3
				flashcalw_issue_command(
    2730:	2011      	movs	r0, #17
    2732:	f04f 31ff 	mov.w	r1, #4294967295
    2736:	4b0f      	ldr	r3, [pc, #60]	; (2774 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    2738:	4798      	blx	r3
    273a:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    273c:	2000      	movs	r0, #0
    273e:	4b0c      	ldr	r3, [pc, #48]	; (2770 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    2740:	4798      	blx	r3
				flashcalw_issue_command(
    2742:	2011      	movs	r0, #17
    2744:	f04f 31ff 	mov.w	r1, #4294967295
    2748:	4b0a      	ldr	r3, [pc, #40]	; (2774 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    274a:	4798      	blx	r3
    274c:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    274e:	4b0b      	ldr	r3, [pc, #44]	; (277c <flashcalw_set_flash_waitstate_and_readmode+0x90>)
    2750:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    2752:	bf8c      	ite	hi
    2754:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    2756:	2000      	movls	r0, #0
    2758:	4b05      	ldr	r3, [pc, #20]	; (2770 <flashcalw_set_flash_waitstate_and_readmode+0x84>)
    275a:	4798      	blx	r3
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    275c:	2011      	movs	r0, #17
    275e:	f04f 31ff 	mov.w	r1, #4294967295
    2762:	4b04      	ldr	r3, [pc, #16]	; (2774 <flashcalw_set_flash_waitstate_and_readmode+0x88>)
    2764:	4798      	blx	r3
    2766:	bd08      	pop	{r3, pc}
    2768:	0112a880 	.word	0x0112a880
    276c:	02255100 	.word	0x02255100
    2770:	0000265d 	.word	0x0000265d
    2774:	00002699 	.word	0x00002699
    2778:	00b71b00 	.word	0x00b71b00
    277c:	007a1200 	.word	0x007a1200

00002780 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    2780:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    2782:	4b0d      	ldr	r3, [pc, #52]	; (27b8 <wdt_set_ctrl+0x38>)
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	f413 3f00 	tst.w	r3, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    278a:	bf0c      	ite	eq
    278c:	f240 3343 	movweq	r3, #835	; 0x343
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    2790:	f44f 6337 	movne.w	r3, #2928	; 0xb70
    2794:	9301      	str	r3, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    2796:	9b01      	ldr	r3, [sp, #4]
    2798:	08db      	lsrs	r3, r3, #3
    279a:	9301      	str	r3, [sp, #4]
	while(dly--);
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	1e5a      	subs	r2, r3, #1
    27a0:	9201      	str	r2, [sp, #4]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d1fa      	bne.n	279c <wdt_set_ctrl+0x1c>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    27a6:	f040 42aa 	orr.w	r2, r0, #1426063360	; 0x55000000
    27aa:	4b03      	ldr	r3, [pc, #12]	; (27b8 <wdt_set_ctrl+0x38>)
    27ac:	601a      	str	r2, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    27ae:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    27b2:	6018      	str	r0, [r3, #0]
}
    27b4:	b002      	add	sp, #8
    27b6:	4770      	bx	lr
    27b8:	400f0c00 	.word	0x400f0c00

000027bc <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    27bc:	2300      	movs	r3, #0
    27be:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    27c0:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    27c2:	2210      	movs	r2, #16
    27c4:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    27c6:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    27c8:	2201      	movs	r2, #1
    27ca:	7282      	strb	r2, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    27cc:	72c2      	strb	r2, [r0, #11]
	cfg->always_on = false;
    27ce:	7303      	strb	r3, [r0, #12]
    27d0:	4770      	bx	lr
    27d2:	bf00      	nop

000027d4 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    27d4:	b538      	push	{r3, r4, r5, lr}
    27d6:	460c      	mov	r4, r1
    27d8:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    27da:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    27dc:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    27de:	4608      	mov	r0, r1
    27e0:	4b24      	ldr	r3, [pc, #144]	; (2874 <wdt_init+0xa0>)
    27e2:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    27e4:	6823      	ldr	r3, [r4, #0]
    27e6:	f013 0f08 	tst.w	r3, #8
    27ea:	d141      	bne.n	2870 <wdt_init+0x9c>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    27ec:	6823      	ldr	r3, [r4, #0]
    27ee:	f013 0f01 	tst.w	r3, #1
    27f2:	d008      	beq.n	2806 <wdt_init+0x32>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    27f4:	6820      	ldr	r0, [r4, #0]
    27f6:	f020 0001 	bic.w	r0, r0, #1
    27fa:	4b1f      	ldr	r3, [pc, #124]	; (2878 <wdt_init+0xa4>)
    27fc:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    27fe:	6823      	ldr	r3, [r4, #0]
    2800:	f013 0f01 	tst.w	r3, #1
    2804:	d1fb      	bne.n	27fe <wdt_init+0x2a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    2806:	6823      	ldr	r3, [r4, #0]
    2808:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    280c:	d008      	beq.n	2820 <wdt_init+0x4c>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    280e:	6820      	ldr	r0, [r4, #0]
    2810:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    2814:	4b18      	ldr	r3, [pc, #96]	; (2878 <wdt_init+0xa4>)
    2816:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    2818:	6823      	ldr	r3, [r4, #0]
    281a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    281e:	d1fb      	bne.n	2818 <wdt_init+0x44>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2820:	686a      	ldr	r2, [r5, #4]
    2822:	682b      	ldr	r3, [r5, #0]
    2824:	4313      	orrs	r3, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    2826:	7a28      	ldrb	r0, [r5, #8]
    2828:	0200      	lsls	r0, r0, #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    282a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    282e:	4318      	orrs	r0, r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    2830:	7a69      	ldrb	r1, [r5, #9]
    2832:	0489      	lsls	r1, r1, #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    2834:	f401 01f8 	and.w	r1, r1, #8126464	; 0x7c0000
    2838:	4308      	orrs	r0, r1
			WDT_CTRL_TBAN(cfg->window_period) |
    283a:	7aab      	ldrb	r3, [r5, #10]
    283c:	2b00      	cmp	r3, #0
    283e:	bf0c      	ite	eq
    2840:	2100      	moveq	r1, #0
    2842:	2180      	movne	r1, #128	; 0x80
    2844:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    2846:	7aeb      	ldrb	r3, [r5, #11]
    2848:	2b00      	cmp	r3, #0
    284a:	bf0c      	ite	eq
    284c:	2300      	moveq	r3, #0
    284e:	2302      	movne	r3, #2
    2850:	4318      	orrs	r0, r3
    2852:	4d09      	ldr	r5, [pc, #36]	; (2878 <wdt_init+0xa4>)
    2854:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    2856:	6820      	ldr	r0, [r4, #0]
    2858:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    285c:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    285e:	6823      	ldr	r3, [r4, #0]
    2860:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2864:	d0fb      	beq.n	285e <wdt_init+0x8a>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    2866:	4620      	mov	r0, r4
    2868:	4b04      	ldr	r3, [pc, #16]	; (287c <wdt_init+0xa8>)
    286a:	4798      	blx	r3

	return true;
    286c:	2001      	movs	r0, #1
    286e:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    2870:	2000      	movs	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    2872:	bd38      	pop	{r3, r4, r5, pc}
    2874:	00001cd1 	.word	0x00001cd1
    2878:	00002781 	.word	0x00002781
    287c:	000020d1 	.word	0x000020d1

00002880 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    2880:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    2882:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    2884:	6820      	ldr	r0, [r4, #0]
    2886:	f020 0001 	bic.w	r0, r0, #1
    288a:	4b05      	ldr	r3, [pc, #20]	; (28a0 <wdt_disable+0x20>)
    288c:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    288e:	6823      	ldr	r3, [r4, #0]
    2890:	f013 0f01 	tst.w	r3, #1
    2894:	d1fb      	bne.n	288e <wdt_disable+0xe>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    2896:	4620      	mov	r0, r4
    2898:	4b02      	ldr	r3, [pc, #8]	; (28a4 <wdt_disable+0x24>)
    289a:	4798      	blx	r3
    289c:	bd10      	pop	{r4, pc}
    289e:	bf00      	nop
    28a0:	00002781 	.word	0x00002781
    28a4:	000020d1 	.word	0x000020d1

000028a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28a8:	e7fe      	b.n	28a8 <Dummy_Handler>
    28aa:	bf00      	nop

000028ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    28ac:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    28ae:	4b19      	ldr	r3, [pc, #100]	; (2914 <Reset_Handler+0x68>)
    28b0:	4a19      	ldr	r2, [pc, #100]	; (2918 <Reset_Handler+0x6c>)
    28b2:	429a      	cmp	r2, r3
    28b4:	d003      	beq.n	28be <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    28b6:	4b19      	ldr	r3, [pc, #100]	; (291c <Reset_Handler+0x70>)
    28b8:	4a16      	ldr	r2, [pc, #88]	; (2914 <Reset_Handler+0x68>)
    28ba:	429a      	cmp	r2, r3
    28bc:	d304      	bcc.n	28c8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    28be:	4b18      	ldr	r3, [pc, #96]	; (2920 <Reset_Handler+0x74>)
    28c0:	4a18      	ldr	r2, [pc, #96]	; (2924 <Reset_Handler+0x78>)
    28c2:	429a      	cmp	r2, r3
    28c4:	d30f      	bcc.n	28e6 <Reset_Handler+0x3a>
    28c6:	e01a      	b.n	28fe <Reset_Handler+0x52>
    28c8:	4b17      	ldr	r3, [pc, #92]	; (2928 <Reset_Handler+0x7c>)
    28ca:	4c18      	ldr	r4, [pc, #96]	; (292c <Reset_Handler+0x80>)
    28cc:	1ae4      	subs	r4, r4, r3
    28ce:	f024 0403 	bic.w	r4, r4, #3
    28d2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    28d4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
    28d6:	480f      	ldr	r0, [pc, #60]	; (2914 <Reset_Handler+0x68>)
    28d8:	490f      	ldr	r1, [pc, #60]	; (2918 <Reset_Handler+0x6c>)
    28da:	585a      	ldr	r2, [r3, r1]
    28dc:	501a      	str	r2, [r3, r0]
    28de:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    28e0:	42a3      	cmp	r3, r4
    28e2:	d1fa      	bne.n	28da <Reset_Handler+0x2e>
    28e4:	e7eb      	b.n	28be <Reset_Handler+0x12>
    28e6:	4b12      	ldr	r3, [pc, #72]	; (2930 <Reset_Handler+0x84>)
    28e8:	4912      	ldr	r1, [pc, #72]	; (2934 <Reset_Handler+0x88>)
    28ea:	1ac9      	subs	r1, r1, r3
    28ec:	f021 0103 	bic.w	r1, r1, #3
    28f0:	1d1a      	adds	r2, r3, #4
    28f2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    28f4:	2200      	movs	r2, #0
    28f6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    28fa:	428b      	cmp	r3, r1
    28fc:	d1fb      	bne.n	28f6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    28fe:	4b0e      	ldr	r3, [pc, #56]	; (2938 <Reset_Handler+0x8c>)
    2900:	4a0e      	ldr	r2, [pc, #56]	; (293c <Reset_Handler+0x90>)
    2902:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2906:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
    2908:	4b0d      	ldr	r3, [pc, #52]	; (2940 <Reset_Handler+0x94>)
    290a:	4798      	blx	r3

	/* Branch to main function */
	main();
    290c:	4b0d      	ldr	r3, [pc, #52]	; (2944 <Reset_Handler+0x98>)
    290e:	4798      	blx	r3
    2910:	e7fe      	b.n	2910 <Reset_Handler+0x64>
    2912:	bf00      	nop
    2914:	20000000 	.word	0x20000000
    2918:	0000590c 	.word	0x0000590c
    291c:	20000900 	.word	0x20000900
    2920:	20000c40 	.word	0x20000c40
    2924:	20000900 	.word	0x20000900
    2928:	20000004 	.word	0x20000004
    292c:	20000903 	.word	0x20000903
    2930:	200008fc 	.word	0x200008fc
    2934:	20000c3b 	.word	0x20000c3b
    2938:	e000ed00 	.word	0xe000ed00
    293c:	00000000 	.word	0x00000000
    2940:	00002f6d 	.word	0x00002f6d
    2944:	00002e1d 	.word	0x00002e1d

00002948 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
    2948:	4b09      	ldr	r3, [pc, #36]	; (2970 <_sbrk+0x28>)
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	b913      	cbnz	r3, 2954 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    294e:	4a09      	ldr	r2, [pc, #36]	; (2974 <_sbrk+0x2c>)
    2950:	4b07      	ldr	r3, [pc, #28]	; (2970 <_sbrk+0x28>)
    2952:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2954:	4b06      	ldr	r3, [pc, #24]	; (2970 <_sbrk+0x28>)
    2956:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
    2958:	181a      	adds	r2, r3, r0
    295a:	4907      	ldr	r1, [pc, #28]	; (2978 <_sbrk+0x30>)
    295c:	4291      	cmp	r1, r2
    295e:	db04      	blt.n	296a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
    2960:	4610      	mov	r0, r2
    2962:	4a03      	ldr	r2, [pc, #12]	; (2970 <_sbrk+0x28>)
    2964:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
    2966:	4618      	mov	r0, r3
    2968:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
    296a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
    296e:	4770      	bx	lr
    2970:	20000ad0 	.word	0x20000ad0
    2974:	20001c40 	.word	0x20001c40
    2978:	20007ffc 	.word	0x20007ffc

0000297c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    297c:	f04f 30ff 	mov.w	r0, #4294967295
    2980:	4770      	bx	lr
    2982:	bf00      	nop

00002984 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2988:	604b      	str	r3, [r1, #4]

	return 0;
}
    298a:	2000      	movs	r0, #0
    298c:	4770      	bx	lr
    298e:	bf00      	nop

00002990 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2990:	2001      	movs	r0, #1
    2992:	4770      	bx	lr

00002994 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2994:	2000      	movs	r0, #0
    2996:	4770      	bx	lr

00002998 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
    2998:	b5f0      	push	{r4, r5, r6, r7, lr}
    299a:	b083      	sub	sp, #12
    299c:	4604      	mov	r4, r0
    299e:	460e      	mov	r6, r1
	uint32_t val = 0;
    29a0:	2300      	movs	r3, #0
    29a2:	9301      	str	r3, [sp, #4]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    29a4:	4b1a      	ldr	r3, [pc, #104]	; (2a10 <usart_serial_getchar+0x78>)
    29a6:	4298      	cmp	r0, r3
    29a8:	d109      	bne.n	29be <usart_serial_getchar+0x26>
		while (usart_read(p_usart, &val));
    29aa:	461f      	mov	r7, r3
    29ac:	4d19      	ldr	r5, [pc, #100]	; (2a14 <usart_serial_getchar+0x7c>)
    29ae:	4638      	mov	r0, r7
    29b0:	a901      	add	r1, sp, #4
    29b2:	47a8      	blx	r5
    29b4:	2800      	cmp	r0, #0
    29b6:	d1fa      	bne.n	29ae <usart_serial_getchar+0x16>
		*data = (uint8_t)(val & 0xFF);
    29b8:	9b01      	ldr	r3, [sp, #4]
    29ba:	7033      	strb	r3, [r6, #0]
    29bc:	e019      	b.n	29f2 <usart_serial_getchar+0x5a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    29be:	4b16      	ldr	r3, [pc, #88]	; (2a18 <usart_serial_getchar+0x80>)
    29c0:	4298      	cmp	r0, r3
    29c2:	d109      	bne.n	29d8 <usart_serial_getchar+0x40>
		while (usart_read(p_usart, &val));
    29c4:	461d      	mov	r5, r3
    29c6:	4c13      	ldr	r4, [pc, #76]	; (2a14 <usart_serial_getchar+0x7c>)
    29c8:	4628      	mov	r0, r5
    29ca:	a901      	add	r1, sp, #4
    29cc:	47a0      	blx	r4
    29ce:	2800      	cmp	r0, #0
    29d0:	d1fa      	bne.n	29c8 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
    29d2:	9b01      	ldr	r3, [sp, #4]
    29d4:	7033      	strb	r3, [r6, #0]
    29d6:	e018      	b.n	2a0a <usart_serial_getchar+0x72>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    29d8:	4b10      	ldr	r3, [pc, #64]	; (2a1c <usart_serial_getchar+0x84>)
    29da:	4298      	cmp	r0, r3
    29dc:	d109      	bne.n	29f2 <usart_serial_getchar+0x5a>
		while (usart_read(p_usart, &val));
    29de:	461d      	mov	r5, r3
    29e0:	4c0c      	ldr	r4, [pc, #48]	; (2a14 <usart_serial_getchar+0x7c>)
    29e2:	4628      	mov	r0, r5
    29e4:	a901      	add	r1, sp, #4
    29e6:	47a0      	blx	r4
    29e8:	2800      	cmp	r0, #0
    29ea:	d1fa      	bne.n	29e2 <usart_serial_getchar+0x4a>
		*data = (uint8_t)(val & 0xFF);
    29ec:	9b01      	ldr	r3, [sp, #4]
    29ee:	7033      	strb	r3, [r6, #0]
    29f0:	e00b      	b.n	2a0a <usart_serial_getchar+0x72>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    29f2:	4b0b      	ldr	r3, [pc, #44]	; (2a20 <usart_serial_getchar+0x88>)
    29f4:	429c      	cmp	r4, r3
    29f6:	d108      	bne.n	2a0a <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
    29f8:	461d      	mov	r5, r3
    29fa:	4c06      	ldr	r4, [pc, #24]	; (2a14 <usart_serial_getchar+0x7c>)
    29fc:	4628      	mov	r0, r5
    29fe:	a901      	add	r1, sp, #4
    2a00:	47a0      	blx	r4
    2a02:	2800      	cmp	r0, #0
    2a04:	d1fa      	bne.n	29fc <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
    2a06:	9b01      	ldr	r3, [sp, #4]
    2a08:	7033      	strb	r3, [r6, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
    2a0a:	b003      	add	sp, #12
    2a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a0e:	bf00      	nop
    2a10:	40024000 	.word	0x40024000
    2a14:	00001109 	.word	0x00001109
    2a18:	40028000 	.word	0x40028000
    2a1c:	4002c000 	.word	0x4002c000
    2a20:	40030000 	.word	0x40030000

00002a24 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
    2a24:	b570      	push	{r4, r5, r6, lr}
    2a26:	460c      	mov	r4, r1
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
    2a28:	4b1a      	ldr	r3, [pc, #104]	; (2a94 <usart_serial_putchar+0x70>)
    2a2a:	4298      	cmp	r0, r3
    2a2c:	d107      	bne.n	2a3e <usart_serial_putchar+0x1a>
		while (usart_write(p_usart, c)!=0);
    2a2e:	461e      	mov	r6, r3
    2a30:	4d19      	ldr	r5, [pc, #100]	; (2a98 <usart_serial_putchar+0x74>)
    2a32:	4630      	mov	r0, r6
    2a34:	4621      	mov	r1, r4
    2a36:	47a8      	blx	r5
    2a38:	2800      	cmp	r0, #0
    2a3a:	d1fa      	bne.n	2a32 <usart_serial_putchar+0xe>
    2a3c:	e020      	b.n	2a80 <usart_serial_putchar+0x5c>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
    2a3e:	4b17      	ldr	r3, [pc, #92]	; (2a9c <usart_serial_putchar+0x78>)
    2a40:	4298      	cmp	r0, r3
    2a42:	d107      	bne.n	2a54 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
    2a44:	461e      	mov	r6, r3
    2a46:	4d14      	ldr	r5, [pc, #80]	; (2a98 <usart_serial_putchar+0x74>)
    2a48:	4630      	mov	r0, r6
    2a4a:	4621      	mov	r1, r4
    2a4c:	47a8      	blx	r5
    2a4e:	2800      	cmp	r0, #0
    2a50:	d1fa      	bne.n	2a48 <usart_serial_putchar+0x24>
    2a52:	e017      	b.n	2a84 <usart_serial_putchar+0x60>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
    2a54:	4b12      	ldr	r3, [pc, #72]	; (2aa0 <usart_serial_putchar+0x7c>)
    2a56:	4298      	cmp	r0, r3
    2a58:	d107      	bne.n	2a6a <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
    2a5a:	461e      	mov	r6, r3
    2a5c:	4d0e      	ldr	r5, [pc, #56]	; (2a98 <usart_serial_putchar+0x74>)
    2a5e:	4630      	mov	r0, r6
    2a60:	4621      	mov	r1, r4
    2a62:	47a8      	blx	r5
    2a64:	2800      	cmp	r0, #0
    2a66:	d1fa      	bne.n	2a5e <usart_serial_putchar+0x3a>
    2a68:	e00e      	b.n	2a88 <usart_serial_putchar+0x64>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
    2a6a:	4b0e      	ldr	r3, [pc, #56]	; (2aa4 <usart_serial_putchar+0x80>)
    2a6c:	4298      	cmp	r0, r3
    2a6e:	d10d      	bne.n	2a8c <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
    2a70:	461e      	mov	r6, r3
    2a72:	4d09      	ldr	r5, [pc, #36]	; (2a98 <usart_serial_putchar+0x74>)
    2a74:	4630      	mov	r0, r6
    2a76:	4621      	mov	r1, r4
    2a78:	47a8      	blx	r5
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d1fa      	bne.n	2a74 <usart_serial_putchar+0x50>
    2a7e:	e007      	b.n	2a90 <usart_serial_putchar+0x6c>
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
    2a80:	2001      	movs	r0, #1
    2a82:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
    2a84:	2001      	movs	r0, #1
    2a86:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
    2a88:	2001      	movs	r0, #1
    2a8a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
    2a8c:	2000      	movs	r0, #0
    2a8e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
    2a90:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
    2a92:	bd70      	pop	{r4, r5, r6, pc}
    2a94:	40024000 	.word	0x40024000
    2a98:	000010f1 	.word	0x000010f1
    2a9c:	40028000 	.word	0x40028000
    2aa0:	4002c000 	.word	0x4002c000
    2aa4:	40030000 	.word	0x40030000

00002aa8 <configure_console>:
 */ 

#include <asf.h>
#include "board.h"

void configure_console(void) {
    2aa8:	b570      	push	{r4, r5, r6, lr}
    2aaa:	b086      	sub	sp, #24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2aac:	4c18      	ldr	r4, [pc, #96]	; (2b10 <configure_console+0x68>)
    2aae:	4b19      	ldr	r3, [pc, #100]	; (2b14 <configure_console+0x6c>)
    2ab0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2ab2:	4a19      	ldr	r2, [pc, #100]	; (2b18 <configure_console+0x70>)
    2ab4:	4b19      	ldr	r3, [pc, #100]	; (2b1c <configure_console+0x74>)
    2ab6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2ab8:	4a19      	ldr	r2, [pc, #100]	; (2b20 <configure_console+0x78>)
    2aba:	4b1a      	ldr	r3, [pc, #104]	; (2b24 <configure_console+0x7c>)
    2abc:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
    2abe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    2ac2:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
    2ac4:	23c0      	movs	r3, #192	; 0xc0
    2ac6:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
    2ac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2acc:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
    2ace:	2500      	movs	r5, #0
    2ad0:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
    2ad2:	9504      	str	r5, [sp, #16]
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_hz());
#endif
#if (SAM4L)
		sysclk_enable_peripheral_clock(p_usart);
    2ad4:	4620      	mov	r0, r4
    2ad6:	4b14      	ldr	r3, [pc, #80]	; (2b28 <configure_console+0x80>)
    2ad8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
    2ada:	4620      	mov	r0, r4
    2adc:	4b13      	ldr	r3, [pc, #76]	; (2b2c <configure_console+0x84>)
    2ade:	4798      	blx	r3
    2ae0:	4602      	mov	r2, r0
    2ae2:	4620      	mov	r0, r4
    2ae4:	4669      	mov	r1, sp
    2ae6:	4b12      	ldr	r3, [pc, #72]	; (2b30 <configure_console+0x88>)
    2ae8:	4798      	blx	r3
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
    2aea:	4620      	mov	r0, r4
    2aec:	4b11      	ldr	r3, [pc, #68]	; (2b34 <configure_console+0x8c>)
    2aee:	4798      	blx	r3
		usart_enable_rx(p_usart);
    2af0:	4620      	mov	r0, r4
    2af2:	4b11      	ldr	r3, [pc, #68]	; (2b38 <configure_console+0x90>)
    2af4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2af6:	4e11      	ldr	r6, [pc, #68]	; (2b3c <configure_console+0x94>)
    2af8:	6833      	ldr	r3, [r6, #0]
    2afa:	6898      	ldr	r0, [r3, #8]
    2afc:	4629      	mov	r1, r5
    2afe:	4c10      	ldr	r4, [pc, #64]	; (2b40 <configure_console+0x98>)
    2b00:	47a0      	blx	r4
	setbuf(stdin, NULL);
    2b02:	6833      	ldr	r3, [r6, #0]
    2b04:	6858      	ldr	r0, [r3, #4]
    2b06:	4629      	mov	r1, r5
    2b08:	47a0      	blx	r4
		.charlength = CONF_UART_CHAR_LENGTH,
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS,
	};
	stdio_serial_init(CONF_UART, &uart_serial_options);
}
    2b0a:	b006      	add	sp, #24
    2b0c:	bd70      	pop	{r4, r5, r6, pc}
    2b0e:	bf00      	nop
    2b10:	40028000 	.word	0x40028000
    2b14:	20000c38 	.word	0x20000c38
    2b18:	00002a25 	.word	0x00002a25
    2b1c:	20000c34 	.word	0x20000c34
    2b20:	00002999 	.word	0x00002999
    2b24:	20000c30 	.word	0x20000c30
    2b28:	00001cd1 	.word	0x00001cd1
    2b2c:	00001b0d 	.word	0x00001b0d
    2b30:	0000108d 	.word	0x0000108d
    2b34:	000010e1 	.word	0x000010e1
    2b38:	000010e9 	.word	0x000010e9
    2b3c:	20000040 	.word	0x20000040
    2b40:	00003085 	.word	0x00003085

00002b44 <dc_motor_left>:
}

void dc_motor_left (uint32_t dc_motor_ID) {
	//Sets direction pin

	ioport_set_pin_level(P.dir, IOPORT_PIN_LEVEL_LOW);
    2b44:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    2b48:	4b07      	ldr	r3, [pc, #28]	; (2b68 <dc_motor_left+0x24>)
    2b4a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2b4e:	0953      	lsrs	r3, r2, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2b50:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2b54:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2b58:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2b5a:	f002 021f 	and.w	r2, r2, #31
    2b5e:	2101      	movs	r1, #1
    2b60:	fa01 f202 	lsl.w	r2, r1, r2
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    2b64:	659a      	str	r2, [r3, #88]	; 0x58
    2b66:	4770      	bx	lr
    2b68:	20000ad4 	.word	0x20000ad4

00002b6c <dc_motor_right>:
}

void dc_motor_right (uint32_t dc_motor_ID) {
	//Sets direction pin

	ioport_set_pin_level(P.dir, IOPORT_PIN_LEVEL_HIGH);	
    2b6c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    2b70:	4b07      	ldr	r3, [pc, #28]	; (2b90 <dc_motor_right+0x24>)
    2b72:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2b76:	0953      	lsrs	r3, r2, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2b78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2b7c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2b80:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2b82:	f002 021f 	and.w	r2, r2, #31
    2b86:	2101      	movs	r1, #1
    2b88:	fa01 f202 	lsl.w	r2, r1, r2

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2b8c:	655a      	str	r2, [r3, #84]	; 0x54
    2b8e:	4770      	bx	lr
    2b90:	20000ad4 	.word	0x20000ad4

00002b94 <dc_motor_set_speed>:
}

void dc_motor_set_speed (uint32_t dc_motor_ID, uint32_t pwm_thousandth_percent) {
    2b94:	b538      	push	{r3, r4, r5, lr}
    2b96:	4604      	mov	r4, r0
    2b98:	460d      	mov	r5, r1
	//Sets pwm values
	uint32_t pwm_value;
	
	if (pwm_thousandth_percent == 1000)
    2b9a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    2b9e:	d00a      	beq.n	2bb6 <dc_motor_set_speed+0x22>
		pwm_value = 1;
	else
		pwm_value = (1000 - pwm_thousandth_percent) * PWM_get_RC_Value() / 1000;
    2ba0:	4b14      	ldr	r3, [pc, #80]	; (2bf4 <dc_motor_set_speed+0x60>)
    2ba2:	4798      	blx	r3
    2ba4:	f5c5 757a 	rsb	r5, r5, #1000	; 0x3e8
    2ba8:	fb05 f000 	mul.w	r0, r5, r0
    2bac:	4b12      	ldr	r3, [pc, #72]	; (2bf8 <dc_motor_set_speed+0x64>)
    2bae:	fba3 1200 	umull	r1, r2, r3, r0
    2bb2:	0992      	lsrs	r2, r2, #6
    2bb4:	e000      	b.n	2bb8 <dc_motor_set_speed+0x24>
void dc_motor_set_speed (uint32_t dc_motor_ID, uint32_t pwm_thousandth_percent) {
	//Sets pwm values
	uint32_t pwm_value;
	
	if (pwm_thousandth_percent == 1000)
		pwm_value = 1;
    2bb6:	2201      	movs	r2, #1
	else
		pwm_value = (1000 - pwm_thousandth_percent) * PWM_get_RC_Value() / 1000;
	
	//if (!(dc_motor_ID % 2))
	if (P.reg == RA)
    2bb8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2bbc:	490f      	ldr	r1, [pc, #60]	; (2bfc <dc_motor_set_speed+0x68>)
    2bbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2bc2:	7a1b      	ldrb	r3, [r3, #8]
    2bc4:	b953      	cbnz	r3, 2bdc <dc_motor_set_speed+0x48>
		PWM_set_RA (P.p_tc, P.channel, pwm_value);
    2bc6:	460b      	mov	r3, r1
    2bc8:	00e1      	lsls	r1, r4, #3
    2bca:	1908      	adds	r0, r1, r4
    2bcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2bd0:	4603      	mov	r3, r0
    2bd2:	68c0      	ldr	r0, [r0, #12]
    2bd4:	6919      	ldr	r1, [r3, #16]
    2bd6:	4b0a      	ldr	r3, [pc, #40]	; (2c00 <dc_motor_set_speed+0x6c>)
    2bd8:	4798      	blx	r3
    2bda:	bd38      	pop	{r3, r4, r5, pc}
	else
		PWM_set_RB (P.p_tc, P.channel, pwm_value);
    2bdc:	4b07      	ldr	r3, [pc, #28]	; (2bfc <dc_motor_set_speed+0x68>)
    2bde:	00e1      	lsls	r1, r4, #3
    2be0:	1908      	adds	r0, r1, r4
    2be2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2be6:	4603      	mov	r3, r0
    2be8:	68c0      	ldr	r0, [r0, #12]
    2bea:	6919      	ldr	r1, [r3, #16]
    2bec:	4b05      	ldr	r3, [pc, #20]	; (2c04 <dc_motor_set_speed+0x70>)
    2bee:	4798      	blx	r3
    2bf0:	bd38      	pop	{r3, r4, r5, pc}
    2bf2:	bf00      	nop
    2bf4:	000013e5 	.word	0x000013e5
    2bf8:	10624dd3 	.word	0x10624dd3
    2bfc:	20000ad4 	.word	0x20000ad4
    2c00:	000013cd 	.word	0x000013cd
    2c04:	000013d9 	.word	0x000013d9

00002c08 <dc_motor_stop>:
	//Sets pwm in Stop mode
	//This stops 2 motors: one on RA line, one on RB line
	PWM_stop(P.p_tc, P.channel);
}	*/

void dc_motor_stop (uint32_t dc_motor_ID) {
    2c08:	b508      	push	{r3, lr}
	//Stops motor_id by setting it's speed to 0
	
	dc_motor_set_speed (dc_motor_ID, 0);
    2c0a:	2100      	movs	r1, #0
    2c0c:	4b01      	ldr	r3, [pc, #4]	; (2c14 <dc_motor_stop+0xc>)
    2c0e:	4798      	blx	r3
    2c10:	bd08      	pop	{r3, pc}
    2c12:	bf00      	nop
    2c14:	00002b95 	.word	0x00002b95

00002c18 <dc_motor_control_init_by_ID>:
	#ifndef DEBUG
		puts("-I- dc_motors_control_init done.\r");
	#endif
}

void dc_motor_control_init_by_ID (uint32_t dc_motor_ID) {
    2c18:	b430      	push	{r4, r5}
	ioport_set_pin_dir(P.dir, IOPORT_DIR_OUTPUT);
    2c1a:	4911      	ldr	r1, [pc, #68]	; (2c60 <dc_motor_control_init_by_ID+0x48>)
    2c1c:	00c4      	lsls	r4, r0, #3
    2c1e:	1823      	adds	r3, r4, r0
    2c20:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2c24:	096b      	lsrs	r3, r5, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2c26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2c2a:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2c2e:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2c30:	f005 051f 	and.w	r5, r5, #31
    2c34:	2201      	movs	r2, #1
    2c36:	fa02 f505 	lsl.w	r5, r2, r5

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    2c3a:	645d      	str	r5, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    2c3c:	f8c3 5168 	str.w	r5, [r3, #360]	; 0x168
	ioport_set_pin_level(P.dir, IOPORT_PIN_LEVEL_LOW);
    2c40:	4420      	add	r0, r4
    2c42:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2c46:	094b      	lsrs	r3, r1, #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    2c48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    2c4c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    2c50:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2c52:	f001 011f 	and.w	r1, r1, #31
    2c56:	408a      	lsls	r2, r1
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    2c58:	659a      	str	r2, [r3, #88]	; 0x58
}
    2c5a:	bc30      	pop	{r4, r5}
    2c5c:	4770      	bx	lr
    2c5e:	bf00      	nop
    2c60:	20000ad4 	.word	0x20000ad4

00002c64 <dc_motors_control_init>:
#include "dc_motors.h"
#define P dc_motor[dc_motor_ID]

static dc_motor_type dc_motor[DC_MOTOR_COUNT];

void dc_motors_control_init (dc_motor_type **p_group_dc_motor) {
    2c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c68:	4604      	mov	r4, r0
	PWM_init ();
    2c6a:	4b54      	ldr	r3, [pc, #336]	; (2dbc <dc_motors_control_init+0x158>)
    2c6c:	4798      	blx	r3
	
	*p_group_dc_motor = dc_motor;	
    2c6e:	4b54      	ldr	r3, [pc, #336]	; (2dc0 <dc_motors_control_init+0x15c>)
    2c70:	6023      	str	r3, [r4, #0]
	
	dc_motor[0].dir = IO_DIR_6;
    2c72:	2206      	movs	r2, #6
    2c74:	601a      	str	r2, [r3, #0]
	dc_motor[0].pwm = PWM_6;
    2c76:	220c      	movs	r2, #12
    2c78:	605a      	str	r2, [r3, #4]
	dc_motor[0].p_tc = TC0;
    2c7a:	4e52      	ldr	r6, [pc, #328]	; (2dc4 <dc_motors_control_init+0x160>)
    2c7c:	60de      	str	r6, [r3, #12]
	dc_motor[0].reg = RA;
    2c7e:	2400      	movs	r4, #0
    2c80:	721c      	strb	r4, [r3, #8]
	dc_motor[0].channel = TC_CHANNEL_2;
    2c82:	f04f 0c02 	mov.w	ip, #2
    2c86:	f8c3 c010 	str.w	ip, [r3, #16]
	dc_motor[0].stop = dc_motor_stop;
    2c8a:	4d4f      	ldr	r5, [pc, #316]	; (2dc8 <dc_motors_control_init+0x164>)
    2c8c:	615d      	str	r5, [r3, #20]
	dc_motor[0].left = dc_motor_left;
    2c8e:	484f      	ldr	r0, [pc, #316]	; (2dcc <dc_motors_control_init+0x168>)
    2c90:	6198      	str	r0, [r3, #24]
	dc_motor[0].right = dc_motor_right;
    2c92:	494f      	ldr	r1, [pc, #316]	; (2dd0 <dc_motors_control_init+0x16c>)
    2c94:	61d9      	str	r1, [r3, #28]
	dc_motor[0].set_speed = dc_motor_set_speed;
    2c96:	4a4f      	ldr	r2, [pc, #316]	; (2dd4 <dc_motors_control_init+0x170>)
    2c98:	621a      	str	r2, [r3, #32]
	
	dc_motor[1].dir = IO_DIR_1;
    2c9a:	274a      	movs	r7, #74	; 0x4a
    2c9c:	625f      	str	r7, [r3, #36]	; 0x24
	dc_motor[1].pwm = PWM_1;
    2c9e:	2750      	movs	r7, #80	; 0x50
    2ca0:	629f      	str	r7, [r3, #40]	; 0x28
	dc_motor[1].p_tc = TC1;
    2ca2:	f8df e138 	ldr.w	lr, [pc, #312]	; 2ddc <dc_motors_control_init+0x178>
    2ca6:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
	dc_motor[1].reg = RB;
    2caa:	2701      	movs	r7, #1
    2cac:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
	dc_motor[1].channel = TC_CHANNEL_0;
    2cb0:	635c      	str	r4, [r3, #52]	; 0x34
	dc_motor[1].stop = dc_motor_stop;
    2cb2:	639d      	str	r5, [r3, #56]	; 0x38
	dc_motor[1].left = dc_motor_left;
    2cb4:	63d8      	str	r0, [r3, #60]	; 0x3c
	dc_motor[1].right = dc_motor_right;
    2cb6:	6419      	str	r1, [r3, #64]	; 0x40
	dc_motor[1].set_speed = dc_motor_set_speed;
    2cb8:	645a      	str	r2, [r3, #68]	; 0x44
	
	dc_motor[2].dir = IO_DIR_5;
    2cba:	f04f 0821 	mov.w	r8, #33	; 0x21
    2cbe:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
	dc_motor[2].pwm = PWM_5;
    2cc2:	f04f 080b 	mov.w	r8, #11
    2cc6:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
	dc_motor[2].reg = RB;
    2cca:	f883 7050 	strb.w	r7, [r3, #80]	; 0x50
	dc_motor[2].p_tc = TC0;
    2cce:	655e      	str	r6, [r3, #84]	; 0x54
	dc_motor[2].channel = TC_CHANNEL_1;
    2cd0:	659f      	str	r7, [r3, #88]	; 0x58
	dc_motor[2].stop = dc_motor_stop;
    2cd2:	65dd      	str	r5, [r3, #92]	; 0x5c
	dc_motor[2].left = dc_motor_left;
    2cd4:	6618      	str	r0, [r3, #96]	; 0x60
	dc_motor[2].right = dc_motor_right;
    2cd6:	6659      	str	r1, [r3, #100]	; 0x64
	dc_motor[2].set_speed = dc_motor_set_speed;
    2cd8:	669a      	str	r2, [r3, #104]	; 0x68
	
	dc_motor[3].dir = IO_DIR_7;
    2cda:	f04f 080f 	mov.w	r8, #15
    2cde:	f8c3 806c 	str.w	r8, [r3, #108]	; 0x6c
	dc_motor[3].pwm = PWM_7;
    2ce2:	f04f 080d 	mov.w	r8, #13
    2ce6:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
	dc_motor[3].reg = RB;
    2cea:	f883 7074 	strb.w	r7, [r3, #116]	; 0x74
	dc_motor[3].p_tc = TC0;
    2cee:	679e      	str	r6, [r3, #120]	; 0x78
	dc_motor[3].channel = TC_CHANNEL_2;
    2cf0:	f8c3 c07c 	str.w	ip, [r3, #124]	; 0x7c
	dc_motor[3].stop = dc_motor_stop;
    2cf4:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	dc_motor[3].left = dc_motor_left;
    2cf8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	dc_motor[3].right = dc_motor_right;
    2cfc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	dc_motor[3].set_speed = dc_motor_set_speed;
    2d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	
	dc_motor[4].dir = IO_DIR_3;
    2d04:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
    2d08:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
	dc_motor[4].pwm = PWM_3;
    2d0c:	f04f 0c09 	mov.w	ip, #9
    2d10:	f8c3 c094 	str.w	ip, [r3, #148]	; 0x94
	dc_motor[4].reg = RB;
    2d14:	f883 7098 	strb.w	r7, [r3, #152]	; 0x98
	dc_motor[4].p_tc = TC0;
    2d18:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
	dc_motor[4].channel = TC_CHANNEL_0;
    2d1c:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	dc_motor[4].stop = dc_motor_stop;
    2d20:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
	dc_motor[4].left = dc_motor_left;
    2d24:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	dc_motor[4].right = dc_motor_right;
    2d28:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
	dc_motor[4].set_speed = dc_motor_set_speed;
    2d2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	
	dc_motor[5].dir = IO_DIR_4;
    2d30:	f04f 0c20 	mov.w	ip, #32
    2d34:	f8c3 c0b4 	str.w	ip, [r3, #180]	; 0xb4
	dc_motor[5].pwm = PWM_4;
    2d38:	f04f 0c0a 	mov.w	ip, #10
    2d3c:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
	dc_motor[5].reg = RA;
    2d40:	f883 40bc 	strb.w	r4, [r3, #188]	; 0xbc
	dc_motor[5].p_tc = TC0;
    2d44:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
	dc_motor[5].channel = TC_CHANNEL_1;
    2d48:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
	dc_motor[5].stop = dc_motor_stop;
    2d4c:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
	dc_motor[5].left = dc_motor_left;
    2d50:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
	dc_motor[5].right = dc_motor_right;
    2d54:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
	dc_motor[5].set_speed = dc_motor_set_speed;
    2d58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	
	dc_motor[6].dir = IO_DIR_0;
    2d5c:	2725      	movs	r7, #37	; 0x25
    2d5e:	f8c3 70d8 	str.w	r7, [r3, #216]	; 0xd8
	dc_motor[6].pwm = PWM_0;
    2d62:	274f      	movs	r7, #79	; 0x4f
    2d64:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
	dc_motor[6].reg = RA;
    2d68:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
	dc_motor[6].p_tc = TC1;
    2d6c:	f8c3 e0e4 	str.w	lr, [r3, #228]	; 0xe4
	dc_motor[6].channel = TC_CHANNEL_0;
    2d70:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
	dc_motor[6].stop = dc_motor_stop;
    2d74:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
	dc_motor[6].left = dc_motor_left;
    2d78:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
	dc_motor[6].right = dc_motor_right;
    2d7c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
	dc_motor[6].set_speed = dc_motor_set_speed;
    2d80:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	
	dc_motor[7].dir = IO_DIR_2;
    2d84:	2749      	movs	r7, #73	; 0x49
    2d86:	f8c3 70fc 	str.w	r7, [r3, #252]	; 0xfc
	dc_motor[7].pwm = PWM_2;
    2d8a:	2708      	movs	r7, #8
    2d8c:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	dc_motor[7].reg = RA;
    2d90:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
	dc_motor[7].p_tc = TC0;
    2d94:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	dc_motor[7].channel = TC_CHANNEL_0;
    2d98:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	dc_motor[7].stop = dc_motor_stop;
    2d9c:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
	dc_motor[7].left = dc_motor_left;
    2da0:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	dc_motor[7].right = dc_motor_right;
    2da4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	dc_motor[7].set_speed = dc_motor_set_speed;
    2da8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	
	for (uint32_t i = 0; i < DC_MOTOR_COUNT; i++)
		dc_motor_control_init_by_ID (i);
    2dac:	4d0a      	ldr	r5, [pc, #40]	; (2dd8 <dc_motors_control_init+0x174>)
    2dae:	4620      	mov	r0, r4
    2db0:	47a8      	blx	r5
	dc_motor[7].stop = dc_motor_stop;
	dc_motor[7].left = dc_motor_left;
	dc_motor[7].right = dc_motor_right;
	dc_motor[7].set_speed = dc_motor_set_speed;
	
	for (uint32_t i = 0; i < DC_MOTOR_COUNT; i++)
    2db2:	3401      	adds	r4, #1
    2db4:	2c08      	cmp	r4, #8
    2db6:	d1fa      	bne.n	2dae <dc_motors_control_init+0x14a>
		dc_motor_control_init_by_ID (i);
	
	#ifndef DEBUG
		puts("-I- dc_motors_control_init done.\r");
	#endif
}
    2db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dbc:	00001285 	.word	0x00001285
    2dc0:	20000ad4 	.word	0x20000ad4
    2dc4:	40010000 	.word	0x40010000
    2dc8:	00002c09 	.word	0x00002c09
    2dcc:	00002b45 	.word	0x00002b45
    2dd0:	00002b6d 	.word	0x00002b6d
    2dd4:	00002b95 	.word	0x00002b95
    2dd8:	00002c19 	.word	0x00002c19
    2ddc:	40014000 	.word	0x40014000

00002de0 <dc_motor_stop_all>:
		PWM_set_RA (P.p_tc, P.channel, pwm_value);
	else
		PWM_set_RB (P.p_tc, P.channel, pwm_value);
}

void dc_motor_stop_all (void) {
    2de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Sets pwm values to 0
	uint32_t i = 0;
	uint32_t pwm_val = 0;

	for (i = 0; i < 4; i++) {
    2de4:	2400      	movs	r4, #0
		dc_motor_left (i);
    2de6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2e18 <dc_motor_stop_all+0x38>
		dc_motor_right(i+4);
    2dea:	4f09      	ldr	r7, [pc, #36]	; (2e10 <dc_motor_stop_all+0x30>)
		dc_motor_set_speed (i, pwm_val);
    2dec:	4e09      	ldr	r6, [pc, #36]	; (2e14 <dc_motor_stop_all+0x34>)
	//Sets pwm values to 0
	uint32_t i = 0;
	uint32_t pwm_val = 0;

	for (i = 0; i < 4; i++) {
		dc_motor_left (i);
    2dee:	4620      	mov	r0, r4
    2df0:	47c0      	blx	r8
    2df2:	1d25      	adds	r5, r4, #4
		dc_motor_right(i+4);
    2df4:	4628      	mov	r0, r5
    2df6:	47b8      	blx	r7
		dc_motor_set_speed (i, pwm_val);
    2df8:	4620      	mov	r0, r4
    2dfa:	2100      	movs	r1, #0
    2dfc:	47b0      	blx	r6
		dc_motor_set_speed (i+4, pwm_val);
    2dfe:	4628      	mov	r0, r5
    2e00:	2100      	movs	r1, #0
    2e02:	47b0      	blx	r6
void dc_motor_stop_all (void) {
	//Sets pwm values to 0
	uint32_t i = 0;
	uint32_t pwm_val = 0;

	for (i = 0; i < 4; i++) {
    2e04:	3401      	adds	r4, #1
    2e06:	2c04      	cmp	r4, #4
    2e08:	d1f1      	bne.n	2dee <dc_motor_stop_all+0xe>
		dc_motor_left (i);
		dc_motor_right(i+4);
		dc_motor_set_speed (i, pwm_val);
		dc_motor_set_speed (i+4, pwm_val);
	}
    2e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e0e:	bf00      	nop
    2e10:	00002b6d 	.word	0x00002b6d
    2e14:	00002b95 	.word	0x00002b95
    2e18:	00002b45 	.word	0x00002b45

00002e1c <main>:
#define STRING_HEADER \
	"\r\n-- 3D Printer Motor Control --\r\n" \
	"-- " BOARD_NAME " --\r\n" \
	"-- Compiled: "__DATE__" "__TIME__" --\r"

int main (void) {
    2e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e20:	b084      	sub	sp, #16
	
	sysclk_init();
    2e22:	4b3c      	ldr	r3, [pc, #240]	; (2f14 <main+0xf8>)
    2e24:	4798      	blx	r3
	board_init();
    2e26:	4b3c      	ldr	r3, [pc, #240]	; (2f18 <main+0xfc>)
    2e28:	4798      	blx	r3
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    2e2a:	483c      	ldr	r0, [pc, #240]	; (2f1c <main+0x100>)
    2e2c:	4b3c      	ldr	r3, [pc, #240]	; (2f20 <main+0x104>)
    2e2e:	4798      	blx	r3
	ioport_init();
	oled_init ();
    2e30:	4b3c      	ldr	r3, [pc, #240]	; (2f24 <main+0x108>)
    2e32:	4798      	blx	r3
	
	configure_console();
    2e34:	4b3c      	ldr	r3, [pc, #240]	; (2f28 <main+0x10c>)
    2e36:	4798      	blx	r3
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    2e38:	4d3c      	ldr	r5, [pc, #240]	; (2f2c <main+0x110>)
    2e3a:	2680      	movs	r6, #128	; 0x80
    2e3c:	65ae      	str	r6, [r5, #88]	; 0x58
		puts(STRING_HEADER);
	#endif

	LED_On(LED_0_PIN);
	
	volatile uint32_t *p_sys_ticks = NULL;
    2e3e:	2400      	movs	r4, #0
    2e40:	9403      	str	r4, [sp, #12]
	
	dc_motor_type *p_group_dc_motor = NULL;
    2e42:	9402      	str	r4, [sp, #8]
	opt_enc_type *p_group_opt_enc = NULL;
    2e44:	9401      	str	r4, [sp, #4]
	speed_measure_type *p_group_speed_measure = NULL;
    2e46:	9400      	str	r4, [sp, #0]
	
	//optical encoders and interrupts
	opt_enc_init (&p_group_opt_enc);
    2e48:	a801      	add	r0, sp, #4
    2e4a:	4b39      	ldr	r3, [pc, #228]	; (2f30 <main+0x114>)
    2e4c:	4798      	blx	r3
	
	//dc motor controls and pwm init
	dc_motors_control_init (&p_group_dc_motor);
    2e4e:	a802      	add	r0, sp, #8
    2e50:	4b38      	ldr	r3, [pc, #224]	; (2f34 <main+0x118>)
    2e52:	4798      	blx	r3
	
	//system timing
	system_tick_start (&p_sys_ticks);
    2e54:	a803      	add	r0, sp, #12
    2e56:	4b38      	ldr	r3, [pc, #224]	; (2f38 <main+0x11c>)
    2e58:	4798      	blx	r3
	
	//speed measurement task
	task_measure_speed_init (&p_group_speed_measure, &p_group_opt_enc, &p_sys_ticks);
    2e5a:	4668      	mov	r0, sp
    2e5c:	a901      	add	r1, sp, #4
    2e5e:	aa03      	add	r2, sp, #12
    2e60:	4b36      	ldr	r3, [pc, #216]	; (2f3c <main+0x120>)
    2e62:	4798      	blx	r3

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2e64:	656e      	str	r6, [r5, #84]	; 0x54
		puts("-------I'm not dead!!!-------\r\n");
	#endif
	LED_Off(LED_0_PIN);
	
	//stop all motors
	dc_motor_stop_all ();
    2e66:	4b36      	ldr	r3, [pc, #216]	; (2f40 <main+0x124>)
    2e68:	4798      	blx	r3
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    2e6a:	65ae      	str	r6, [r5, #88]	; 0x58

	LED_On(LED_0_PIN);
	delay_ms (1000);
    2e6c:	4835      	ldr	r0, [pc, #212]	; (2f44 <main+0x128>)
    2e6e:	4b36      	ldr	r3, [pc, #216]	; (2f48 <main+0x12c>)
    2e70:	4798      	blx	r3
	opt_enc_enable_IRQs();
    2e72:	4b36      	ldr	r3, [pc, #216]	; (2f4c <main+0x130>)
    2e74:	4798      	blx	r3

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    2e76:	656e      	str	r6, [r5, #84]	; 0x54
	LED_Off(LED_0_PIN);
	
	uint32_t m_state = 200;
	
	uint32_t temp_sys_ticks = 0;
	*p_sys_ticks = 0;
    2e78:	9b03      	ldr	r3, [sp, #12]
    2e7a:	601c      	str	r4, [r3, #0]
	LED_On(LED_0_PIN);
	delay_ms (1000);
	opt_enc_enable_IRQs();
	LED_Off(LED_0_PIN);
	
	uint32_t m_state = 200;
    2e7c:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	*p_sys_ticks = 0;

	while (1) {
		temp_sys_ticks = *p_sys_ticks;
		
		printf_itoa (p_group_speed_measure[Y1].speed); printf(",");
    2e80:	4e33      	ldr	r6, [pc, #204]	; (2f50 <main+0x134>)
		printf_itoa (0); printf(",");
		printf_itoa (p_group_speed_measure[X1].speed); printf(",");
		printf_itoa (p_group_speed_measure[X2].speed); printf(",");
		printf_itoa (0); printf("\r");

		if ( !(temp_sys_ticks % 1200)) {
    2e82:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 2f68 <main+0x14c>

		if ( !(temp_sys_ticks % 400)) {
			//puts (" + second/3----\r");
		}
		
		if ( !(temp_sys_ticks % 200)) {
    2e86:	4f33      	ldr	r7, [pc, #204]	; (2f54 <main+0x138>)
	
	uint32_t temp_sys_ticks = 0;
	*p_sys_ticks = 0;

	while (1) {
		temp_sys_ticks = *p_sys_ticks;
    2e88:	9b03      	ldr	r3, [sp, #12]
    2e8a:	f8d3 a000 	ldr.w	sl, [r3]
		
		printf_itoa (p_group_speed_measure[Y1].speed); printf(",");
    2e8e:	9b00      	ldr	r3, [sp, #0]
    2e90:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
    2e94:	47b0      	blx	r6
    2e96:	4d30      	ldr	r5, [pc, #192]	; (2f58 <main+0x13c>)
    2e98:	4628      	mov	r0, r5
    2e9a:	4c30      	ldr	r4, [pc, #192]	; (2f5c <main+0x140>)
    2e9c:	47a0      	blx	r4
		printf_itoa (p_group_speed_measure[Y2].speed); printf(",");
    2e9e:	9b00      	ldr	r3, [sp, #0]
    2ea0:	6f18      	ldr	r0, [r3, #112]	; 0x70
    2ea2:	47b0      	blx	r6
    2ea4:	4628      	mov	r0, r5
    2ea6:	47a0      	blx	r4
		printf_itoa (0); printf(",");
    2ea8:	2000      	movs	r0, #0
    2eaa:	47b0      	blx	r6
    2eac:	4628      	mov	r0, r5
    2eae:	47a0      	blx	r4
		printf_itoa (p_group_speed_measure[X1].speed); printf(",");
    2eb0:	9b00      	ldr	r3, [sp, #0]
    2eb2:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
    2eb6:	47b0      	blx	r6
    2eb8:	4628      	mov	r0, r5
    2eba:	47a0      	blx	r4
		printf_itoa (p_group_speed_measure[X2].speed); printf(",");
    2ebc:	9b00      	ldr	r3, [sp, #0]
    2ebe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2ec0:	47b0      	blx	r6
    2ec2:	4628      	mov	r0, r5
    2ec4:	47a0      	blx	r4
		printf_itoa (0); printf("\r");
    2ec6:	2000      	movs	r0, #0
    2ec8:	47b0      	blx	r6
    2eca:	4825      	ldr	r0, [pc, #148]	; (2f60 <main+0x144>)
    2ecc:	47a0      	blx	r4

		if ( !(temp_sys_ticks % 1200)) {
    2ece:	fba8 230a 	umull	r2, r3, r8, sl
    2ed2:	09db      	lsrs	r3, r3, #7
    2ed4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    2ed8:	fb02 a313 	mls	r3, r2, r3, sl
    2edc:	b92b      	cbnz	r3, 2eea <main+0xce>
			//puts (" + second/1------------\r");
			m_state = tester_test_static (m_state, 500); // m_state, pwm_val
    2ede:	4648      	mov	r0, r9
    2ee0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2ee4:	4b1f      	ldr	r3, [pc, #124]	; (2f64 <main+0x148>)
    2ee6:	4798      	blx	r3
    2ee8:	4681      	mov	r9, r0

		if ( !(temp_sys_ticks % 400)) {
			//puts (" + second/3----\r");
		}
		
		if ( !(temp_sys_ticks % 200)) {
    2eea:	fba7 230a 	umull	r2, r3, r7, sl
    2eee:	099b      	lsrs	r3, r3, #6
    2ef0:	22c8      	movs	r2, #200	; 0xc8
    2ef2:	fb02 a313 	mls	r3, r2, r3, sl
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d1c6      	bne.n	2e88 <main+0x6c>
    2efa:	2500      	movs	r5, #0
    2efc:	462c      	mov	r4, r5
			//puts (" + second/6----\r");

			for (int32_t i = 0; i < SPEED_MEASURE_COUNT; i++) {
				p_group_speed_measure[i].function(i);
    2efe:	9b00      	ldr	r3, [sp, #0]
    2f00:	442b      	add	r3, r5
    2f02:	695b      	ldr	r3, [r3, #20]
    2f04:	4620      	mov	r0, r4
    2f06:	4798      	blx	r3
		}
		
		if ( !(temp_sys_ticks % 200)) {
			//puts (" + second/6----\r");

			for (int32_t i = 0; i < SPEED_MEASURE_COUNT; i++) {
    2f08:	3401      	adds	r4, #1
    2f0a:	3518      	adds	r5, #24
    2f0c:	2c08      	cmp	r4, #8
    2f0e:	d1f6      	bne.n	2efe <main+0xe2>
    2f10:	e7ba      	b.n	2e88 <main+0x6c>
    2f12:	bf00      	nop
    2f14:	000024c5 	.word	0x000024c5
    2f18:	00002555 	.word	0x00002555
    2f1c:	400e1000 	.word	0x400e1000
    2f20:	00001cd1 	.word	0x00001cd1
    2f24:	00001169 	.word	0x00001169
    2f28:	00002aa9 	.word	0x00002aa9
    2f2c:	400e1400 	.word	0x400e1400
    2f30:	00000541 	.word	0x00000541
    2f34:	00002c65 	.word	0x00002c65
    2f38:	00000655 	.word	0x00000655
    2f3c:	000006f1 	.word	0x000006f1
    2f40:	00002de1 	.word	0x00002de1
    2f44:	00344925 	.word	0x00344925
    2f48:	2000002d 	.word	0x2000002d
    2f4c:	0000050d 	.word	0x0000050d
    2f50:	00000d11 	.word	0x00000d11
    2f54:	51eb851f 	.word	0x51eb851f
    2f58:	00005884 	.word	0x00005884
    2f5c:	00002fb9 	.word	0x00002fb9
    2f60:	00005888 	.word	0x00005888
    2f64:	00000731 	.word	0x00000731
    2f68:	1b4e81b5 	.word	0x1b4e81b5

00002f6c <__libc_init_array>:
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	4b0e      	ldr	r3, [pc, #56]	; (2fa8 <__libc_init_array+0x3c>)
    2f70:	4d0e      	ldr	r5, [pc, #56]	; (2fac <__libc_init_array+0x40>)
    2f72:	1aed      	subs	r5, r5, r3
    2f74:	10ad      	asrs	r5, r5, #2
    2f76:	2400      	movs	r4, #0
    2f78:	461e      	mov	r6, r3
    2f7a:	42ac      	cmp	r4, r5
    2f7c:	d004      	beq.n	2f88 <__libc_init_array+0x1c>
    2f7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    2f82:	4790      	blx	r2
    2f84:	3401      	adds	r4, #1
    2f86:	e7f8      	b.n	2f7a <__libc_init_array+0xe>
    2f88:	f002 fcaa 	bl	58e0 <_init>
    2f8c:	4d08      	ldr	r5, [pc, #32]	; (2fb0 <__libc_init_array+0x44>)
    2f8e:	4b09      	ldr	r3, [pc, #36]	; (2fb4 <__libc_init_array+0x48>)
    2f90:	1aed      	subs	r5, r5, r3
    2f92:	10ad      	asrs	r5, r5, #2
    2f94:	2400      	movs	r4, #0
    2f96:	461e      	mov	r6, r3
    2f98:	42ac      	cmp	r4, r5
    2f9a:	d004      	beq.n	2fa6 <__libc_init_array+0x3a>
    2f9c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    2fa0:	4790      	blx	r2
    2fa2:	3401      	adds	r4, #1
    2fa4:	e7f8      	b.n	2f98 <__libc_init_array+0x2c>
    2fa6:	bd70      	pop	{r4, r5, r6, pc}
    2fa8:	000058ec 	.word	0x000058ec
    2fac:	000058ec 	.word	0x000058ec
    2fb0:	000058f4 	.word	0x000058f4
    2fb4:	000058ec 	.word	0x000058ec

00002fb8 <iprintf>:
    2fb8:	b40f      	push	{r0, r1, r2, r3}
    2fba:	b507      	push	{r0, r1, r2, lr}
    2fbc:	4906      	ldr	r1, [pc, #24]	; (2fd8 <iprintf+0x20>)
    2fbe:	ab04      	add	r3, sp, #16
    2fc0:	6808      	ldr	r0, [r1, #0]
    2fc2:	f853 2b04 	ldr.w	r2, [r3], #4
    2fc6:	6881      	ldr	r1, [r0, #8]
    2fc8:	9301      	str	r3, [sp, #4]
    2fca:	f000 f912 	bl	31f2 <_vfiprintf_r>
    2fce:	b003      	add	sp, #12
    2fd0:	f85d eb04 	ldr.w	lr, [sp], #4
    2fd4:	b004      	add	sp, #16
    2fd6:	4770      	bx	lr
    2fd8:	20000040 	.word	0x20000040

00002fdc <_iprintf_r>:
    2fdc:	b40e      	push	{r1, r2, r3}
    2fde:	b503      	push	{r0, r1, lr}
    2fe0:	ab03      	add	r3, sp, #12
    2fe2:	6881      	ldr	r1, [r0, #8]
    2fe4:	f853 2b04 	ldr.w	r2, [r3], #4
    2fe8:	9301      	str	r3, [sp, #4]
    2fea:	f000 f902 	bl	31f2 <_vfiprintf_r>
    2fee:	b002      	add	sp, #8
    2ff0:	f85d eb04 	ldr.w	lr, [sp], #4
    2ff4:	b003      	add	sp, #12
    2ff6:	4770      	bx	lr

00002ff8 <memcpy>:
    2ff8:	b510      	push	{r4, lr}
    2ffa:	2300      	movs	r3, #0
    2ffc:	4293      	cmp	r3, r2
    2ffe:	d003      	beq.n	3008 <memcpy+0x10>
    3000:	5ccc      	ldrb	r4, [r1, r3]
    3002:	54c4      	strb	r4, [r0, r3]
    3004:	3301      	adds	r3, #1
    3006:	e7f9      	b.n	2ffc <memcpy+0x4>
    3008:	bd10      	pop	{r4, pc}

0000300a <memset>:
    300a:	4402      	add	r2, r0
    300c:	4603      	mov	r3, r0
    300e:	4293      	cmp	r3, r2
    3010:	d002      	beq.n	3018 <memset+0xe>
    3012:	f803 1b01 	strb.w	r1, [r3], #1
    3016:	e7fa      	b.n	300e <memset+0x4>
    3018:	4770      	bx	lr
	...

0000301c <_puts_r>:
    301c:	b530      	push	{r4, r5, lr}
    301e:	4604      	mov	r4, r0
    3020:	b089      	sub	sp, #36	; 0x24
    3022:	4608      	mov	r0, r1
    3024:	460d      	mov	r5, r1
    3026:	f000 f8a9 	bl	317c <strlen>
    302a:	4b11      	ldr	r3, [pc, #68]	; (3070 <_puts_r+0x54>)
    302c:	9306      	str	r3, [sp, #24]
    302e:	2301      	movs	r3, #1
    3030:	9005      	str	r0, [sp, #20]
    3032:	9307      	str	r3, [sp, #28]
    3034:	4418      	add	r0, r3
    3036:	68a1      	ldr	r1, [r4, #8]
    3038:	9504      	str	r5, [sp, #16]
    303a:	ab04      	add	r3, sp, #16
    303c:	9301      	str	r3, [sp, #4]
    303e:	2302      	movs	r3, #2
    3040:	9302      	str	r3, [sp, #8]
    3042:	898b      	ldrh	r3, [r1, #12]
    3044:	9003      	str	r0, [sp, #12]
    3046:	049a      	lsls	r2, r3, #18
    3048:	d406      	bmi.n	3058 <_puts_r+0x3c>
    304a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    304e:	818b      	strh	r3, [r1, #12]
    3050:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    3052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3056:	664b      	str	r3, [r1, #100]	; 0x64
    3058:	4620      	mov	r0, r4
    305a:	aa01      	add	r2, sp, #4
    305c:	f001 f8b0 	bl	41c0 <__sfvwrite_r>
    3060:	2800      	cmp	r0, #0
    3062:	bf0c      	ite	eq
    3064:	200a      	moveq	r0, #10
    3066:	f04f 30ff 	movne.w	r0, #4294967295
    306a:	b009      	add	sp, #36	; 0x24
    306c:	bd30      	pop	{r4, r5, pc}
    306e:	bf00      	nop
    3070:	00005892 	.word	0x00005892

00003074 <puts>:
    3074:	4b02      	ldr	r3, [pc, #8]	; (3080 <puts+0xc>)
    3076:	4601      	mov	r1, r0
    3078:	6818      	ldr	r0, [r3, #0]
    307a:	f7ff bfcf 	b.w	301c <_puts_r>
    307e:	bf00      	nop
    3080:	20000040 	.word	0x20000040

00003084 <setbuf>:
    3084:	2900      	cmp	r1, #0
    3086:	bf0c      	ite	eq
    3088:	2202      	moveq	r2, #2
    308a:	2200      	movne	r2, #0
    308c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3090:	f000 b800 	b.w	3094 <setvbuf>

00003094 <setvbuf>:
    3094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3098:	461d      	mov	r5, r3
    309a:	4b36      	ldr	r3, [pc, #216]	; (3174 <setvbuf+0xe0>)
    309c:	681f      	ldr	r7, [r3, #0]
    309e:	4604      	mov	r4, r0
    30a0:	460e      	mov	r6, r1
    30a2:	4690      	mov	r8, r2
    30a4:	b127      	cbz	r7, 30b0 <setvbuf+0x1c>
    30a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    30a8:	b913      	cbnz	r3, 30b0 <setvbuf+0x1c>
    30aa:	4638      	mov	r0, r7
    30ac:	f000 fe36 	bl	3d1c <__sinit>
    30b0:	f1b8 0f02 	cmp.w	r8, #2
    30b4:	d859      	bhi.n	316a <setvbuf+0xd6>
    30b6:	2d00      	cmp	r5, #0
    30b8:	db57      	blt.n	316a <setvbuf+0xd6>
    30ba:	4638      	mov	r0, r7
    30bc:	4621      	mov	r1, r4
    30be:	f000 fde3 	bl	3c88 <_fflush_r>
    30c2:	2300      	movs	r3, #0
    30c4:	6063      	str	r3, [r4, #4]
    30c6:	61a3      	str	r3, [r4, #24]
    30c8:	89a3      	ldrh	r3, [r4, #12]
    30ca:	061b      	lsls	r3, r3, #24
    30cc:	d503      	bpl.n	30d6 <setvbuf+0x42>
    30ce:	4638      	mov	r0, r7
    30d0:	6921      	ldr	r1, [r4, #16]
    30d2:	f000 ffbd 	bl	4050 <_free_r>
    30d6:	89a3      	ldrh	r3, [r4, #12]
    30d8:	f1b8 0f02 	cmp.w	r8, #2
    30dc:	f023 0383 	bic.w	r3, r3, #131	; 0x83
    30e0:	81a3      	strh	r3, [r4, #12]
    30e2:	d012      	beq.n	310a <setvbuf+0x76>
    30e4:	bb36      	cbnz	r6, 3134 <setvbuf+0xa0>
    30e6:	2d00      	cmp	r5, #0
    30e8:	bf08      	it	eq
    30ea:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    30ee:	4628      	mov	r0, r5
    30f0:	f001 fa92 	bl	4618 <malloc>
    30f4:	4606      	mov	r6, r0
    30f6:	b9c8      	cbnz	r0, 312c <setvbuf+0x98>
    30f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    30fc:	f001 fa8c 	bl	4618 <malloc>
    3100:	4606      	mov	r6, r0
    3102:	b988      	cbnz	r0, 3128 <setvbuf+0x94>
    3104:	f04f 30ff 	mov.w	r0, #4294967295
    3108:	e000      	b.n	310c <setvbuf+0x78>
    310a:	2000      	movs	r0, #0
    310c:	89a3      	ldrh	r3, [r4, #12]
    310e:	f043 0302 	orr.w	r3, r3, #2
    3112:	81a3      	strh	r3, [r4, #12]
    3114:	2300      	movs	r3, #0
    3116:	60a3      	str	r3, [r4, #8]
    3118:	f104 0343 	add.w	r3, r4, #67	; 0x43
    311c:	6023      	str	r3, [r4, #0]
    311e:	6123      	str	r3, [r4, #16]
    3120:	2301      	movs	r3, #1
    3122:	6163      	str	r3, [r4, #20]
    3124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3128:	f44f 6580 	mov.w	r5, #1024	; 0x400
    312c:	89a3      	ldrh	r3, [r4, #12]
    312e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3132:	81a3      	strh	r3, [r4, #12]
    3134:	f1b8 0f01 	cmp.w	r8, #1
    3138:	d105      	bne.n	3146 <setvbuf+0xb2>
    313a:	89a3      	ldrh	r3, [r4, #12]
    313c:	f043 0301 	orr.w	r3, r3, #1
    3140:	81a3      	strh	r3, [r4, #12]
    3142:	426b      	negs	r3, r5
    3144:	61a3      	str	r3, [r4, #24]
    3146:	4b0c      	ldr	r3, [pc, #48]	; (3178 <setvbuf+0xe4>)
    3148:	63fb      	str	r3, [r7, #60]	; 0x3c
    314a:	89a3      	ldrh	r3, [r4, #12]
    314c:	6026      	str	r6, [r4, #0]
    314e:	f003 0008 	and.w	r0, r3, #8
    3152:	b280      	uxth	r0, r0
    3154:	6126      	str	r6, [r4, #16]
    3156:	6165      	str	r5, [r4, #20]
    3158:	b148      	cbz	r0, 316e <setvbuf+0xda>
    315a:	f013 0f03 	tst.w	r3, #3
    315e:	bf18      	it	ne
    3160:	2500      	movne	r5, #0
    3162:	60a5      	str	r5, [r4, #8]
    3164:	2000      	movs	r0, #0
    3166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    316a:	f04f 30ff 	mov.w	r0, #4294967295
    316e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3172:	bf00      	nop
    3174:	20000040 	.word	0x20000040
    3178:	00003cd9 	.word	0x00003cd9

0000317c <strlen>:
    317c:	4603      	mov	r3, r0
    317e:	f813 2b01 	ldrb.w	r2, [r3], #1
    3182:	2a00      	cmp	r2, #0
    3184:	d1fb      	bne.n	317e <strlen+0x2>
    3186:	1a18      	subs	r0, r3, r0
    3188:	3801      	subs	r0, #1
    318a:	4770      	bx	lr

0000318c <__sprint_r>:
    318c:	6893      	ldr	r3, [r2, #8]
    318e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3192:	4681      	mov	r9, r0
    3194:	460f      	mov	r7, r1
    3196:	4614      	mov	r4, r2
    3198:	b91b      	cbnz	r3, 31a2 <__sprint_r+0x16>
    319a:	6053      	str	r3, [r2, #4]
    319c:	4618      	mov	r0, r3
    319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31a2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    31a4:	049d      	lsls	r5, r3, #18
    31a6:	d51d      	bpl.n	31e4 <__sprint_r+0x58>
    31a8:	6815      	ldr	r5, [r2, #0]
    31aa:	68a3      	ldr	r3, [r4, #8]
    31ac:	3508      	adds	r5, #8
    31ae:	b1bb      	cbz	r3, 31e0 <__sprint_r+0x54>
    31b0:	f855 3c04 	ldr.w	r3, [r5, #-4]
    31b4:	f855 ac08 	ldr.w	sl, [r5, #-8]
    31b8:	ea4f 0893 	mov.w	r8, r3, lsr #2
    31bc:	2600      	movs	r6, #0
    31be:	4546      	cmp	r6, r8
    31c0:	da09      	bge.n	31d6 <__sprint_r+0x4a>
    31c2:	4648      	mov	r0, r9
    31c4:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
    31c8:	463a      	mov	r2, r7
    31ca:	f000 fe87 	bl	3edc <_fputwc_r>
    31ce:	1c43      	adds	r3, r0, #1
    31d0:	d00a      	beq.n	31e8 <__sprint_r+0x5c>
    31d2:	3601      	adds	r6, #1
    31d4:	e7f3      	b.n	31be <__sprint_r+0x32>
    31d6:	68a3      	ldr	r3, [r4, #8]
    31d8:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
    31dc:	60a3      	str	r3, [r4, #8]
    31de:	e7e4      	b.n	31aa <__sprint_r+0x1e>
    31e0:	4618      	mov	r0, r3
    31e2:	e001      	b.n	31e8 <__sprint_r+0x5c>
    31e4:	f000 ffec 	bl	41c0 <__sfvwrite_r>
    31e8:	2300      	movs	r3, #0
    31ea:	60a3      	str	r3, [r4, #8]
    31ec:	6063      	str	r3, [r4, #4]
    31ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000031f2 <_vfiprintf_r>:
    31f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31f6:	b0ad      	sub	sp, #180	; 0xb4
    31f8:	4688      	mov	r8, r1
    31fa:	9202      	str	r2, [sp, #8]
    31fc:	461c      	mov	r4, r3
    31fe:	461e      	mov	r6, r3
    3200:	4683      	mov	fp, r0
    3202:	b118      	cbz	r0, 320c <_vfiprintf_r+0x1a>
    3204:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3206:	b90b      	cbnz	r3, 320c <_vfiprintf_r+0x1a>
    3208:	f000 fd88 	bl	3d1c <__sinit>
    320c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    3210:	0498      	lsls	r0, r3, #18
    3212:	d409      	bmi.n	3228 <_vfiprintf_r+0x36>
    3214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3218:	f8a8 300c 	strh.w	r3, [r8, #12]
    321c:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
    3220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3224:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
    3228:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    322c:	0719      	lsls	r1, r3, #28
    322e:	d509      	bpl.n	3244 <_vfiprintf_r+0x52>
    3230:	f8d8 3010 	ldr.w	r3, [r8, #16]
    3234:	b133      	cbz	r3, 3244 <_vfiprintf_r+0x52>
    3236:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    323a:	f003 031a 	and.w	r3, r3, #26
    323e:	2b0a      	cmp	r3, #10
    3240:	d114      	bne.n	326c <_vfiprintf_r+0x7a>
    3242:	e008      	b.n	3256 <_vfiprintf_r+0x64>
    3244:	4658      	mov	r0, fp
    3246:	4641      	mov	r1, r8
    3248:	f000 fc28 	bl	3a9c <__swsetup_r>
    324c:	2800      	cmp	r0, #0
    324e:	d0f2      	beq.n	3236 <_vfiprintf_r+0x44>
    3250:	f04f 30ff 	mov.w	r0, #4294967295
    3254:	e3db      	b.n	3a0e <_vfiprintf_r+0x81c>
    3256:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
    325a:	2b00      	cmp	r3, #0
    325c:	db06      	blt.n	326c <_vfiprintf_r+0x7a>
    325e:	4658      	mov	r0, fp
    3260:	4641      	mov	r1, r8
    3262:	9a02      	ldr	r2, [sp, #8]
    3264:	4623      	mov	r3, r4
    3266:	f000 fbe3 	bl	3a30 <__sbprintf>
    326a:	e3d0      	b.n	3a0e <_vfiprintf_r+0x81c>
    326c:	2300      	movs	r3, #0
    326e:	aa1c      	add	r2, sp, #112	; 0x70
    3270:	920f      	str	r2, [sp, #60]	; 0x3c
    3272:	9311      	str	r3, [sp, #68]	; 0x44
    3274:	9310      	str	r3, [sp, #64]	; 0x40
    3276:	4694      	mov	ip, r2
    3278:	930a      	str	r3, [sp, #40]	; 0x28
    327a:	9305      	str	r3, [sp, #20]
    327c:	9b02      	ldr	r3, [sp, #8]
    327e:	461c      	mov	r4, r3
    3280:	f813 2b01 	ldrb.w	r2, [r3], #1
    3284:	b91a      	cbnz	r2, 328e <_vfiprintf_r+0x9c>
    3286:	9802      	ldr	r0, [sp, #8]
    3288:	1a25      	subs	r5, r4, r0
    328a:	d103      	bne.n	3294 <_vfiprintf_r+0xa2>
    328c:	e01d      	b.n	32ca <_vfiprintf_r+0xd8>
    328e:	2a25      	cmp	r2, #37	; 0x25
    3290:	d1f5      	bne.n	327e <_vfiprintf_r+0x8c>
    3292:	e7f8      	b.n	3286 <_vfiprintf_r+0x94>
    3294:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3296:	9902      	ldr	r1, [sp, #8]
    3298:	442b      	add	r3, r5
    329a:	9311      	str	r3, [sp, #68]	; 0x44
    329c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    329e:	3301      	adds	r3, #1
    32a0:	2b07      	cmp	r3, #7
    32a2:	e88c 0022 	stmia.w	ip, {r1, r5}
    32a6:	9310      	str	r3, [sp, #64]	; 0x40
    32a8:	dc02      	bgt.n	32b0 <_vfiprintf_r+0xbe>
    32aa:	f10c 0c08 	add.w	ip, ip, #8
    32ae:	e009      	b.n	32c4 <_vfiprintf_r+0xd2>
    32b0:	4658      	mov	r0, fp
    32b2:	4641      	mov	r1, r8
    32b4:	aa0f      	add	r2, sp, #60	; 0x3c
    32b6:	f7ff ff69 	bl	318c <__sprint_r>
    32ba:	2800      	cmp	r0, #0
    32bc:	f040 83a1 	bne.w	3a02 <_vfiprintf_r+0x810>
    32c0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    32c4:	9a05      	ldr	r2, [sp, #20]
    32c6:	442a      	add	r2, r5
    32c8:	9205      	str	r2, [sp, #20]
    32ca:	7823      	ldrb	r3, [r4, #0]
    32cc:	2b00      	cmp	r3, #0
    32ce:	f000 8391 	beq.w	39f4 <_vfiprintf_r+0x802>
    32d2:	2200      	movs	r2, #0
    32d4:	3401      	adds	r4, #1
    32d6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    32da:	f04f 3aff 	mov.w	sl, #4294967295
    32de:	9204      	str	r2, [sp, #16]
    32e0:	4617      	mov	r7, r2
    32e2:	1c65      	adds	r5, r4, #1
    32e4:	7823      	ldrb	r3, [r4, #0]
    32e6:	9502      	str	r5, [sp, #8]
    32e8:	2b58      	cmp	r3, #88	; 0x58
    32ea:	d065      	beq.n	33b8 <_vfiprintf_r+0x1c6>
    32ec:	dc2e      	bgt.n	334c <_vfiprintf_r+0x15a>
    32ee:	2b2e      	cmp	r3, #46	; 0x2e
    32f0:	d077      	beq.n	33e2 <_vfiprintf_r+0x1f0>
    32f2:	dc12      	bgt.n	331a <_vfiprintf_r+0x128>
    32f4:	2b2a      	cmp	r3, #42	; 0x2a
    32f6:	d067      	beq.n	33c8 <_vfiprintf_r+0x1d6>
    32f8:	dc08      	bgt.n	330c <_vfiprintf_r+0x11a>
    32fa:	2b20      	cmp	r3, #32
    32fc:	d060      	beq.n	33c0 <_vfiprintf_r+0x1ce>
    32fe:	2b23      	cmp	r3, #35	; 0x23
    3300:	f040 8202 	bne.w	3708 <_vfiprintf_r+0x516>
    3304:	f047 0701 	orr.w	r7, r7, #1
    3308:	9c02      	ldr	r4, [sp, #8]
    330a:	e7ea      	b.n	32e2 <_vfiprintf_r+0xf0>
    330c:	2b2b      	cmp	r3, #43	; 0x2b
    330e:	d101      	bne.n	3314 <_vfiprintf_r+0x122>
    3310:	461a      	mov	r2, r3
    3312:	e7f9      	b.n	3308 <_vfiprintf_r+0x116>
    3314:	2b2d      	cmp	r3, #45	; 0x2d
    3316:	d061      	beq.n	33dc <_vfiprintf_r+0x1ea>
    3318:	e1f6      	b.n	3708 <_vfiprintf_r+0x516>
    331a:	2b39      	cmp	r3, #57	; 0x39
    331c:	dc08      	bgt.n	3330 <_vfiprintf_r+0x13e>
    331e:	2b31      	cmp	r3, #49	; 0x31
    3320:	f280 8081 	bge.w	3426 <_vfiprintf_r+0x234>
    3324:	2b30      	cmp	r3, #48	; 0x30
    3326:	f040 81ef 	bne.w	3708 <_vfiprintf_r+0x516>
    332a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
    332e:	e7eb      	b.n	3308 <_vfiprintf_r+0x116>
    3330:	2b4f      	cmp	r3, #79	; 0x4f
    3332:	f000 80e1 	beq.w	34f8 <_vfiprintf_r+0x306>
    3336:	2b55      	cmp	r3, #85	; 0x55
    3338:	f000 8121 	beq.w	357e <_vfiprintf_r+0x38c>
    333c:	2b44      	cmp	r3, #68	; 0x44
    333e:	f040 81e3 	bne.w	3708 <_vfiprintf_r+0x516>
    3342:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    3346:	f047 0710 	orr.w	r7, r7, #16
    334a:	e095      	b.n	3478 <_vfiprintf_r+0x286>
    334c:	2b6e      	cmp	r3, #110	; 0x6e
    334e:	f000 80b7 	beq.w	34c0 <_vfiprintf_r+0x2ce>
    3352:	dc0d      	bgt.n	3370 <_vfiprintf_r+0x17e>
    3354:	2b68      	cmp	r3, #104	; 0x68
    3356:	d077      	beq.n	3448 <_vfiprintf_r+0x256>
    3358:	dc05      	bgt.n	3366 <_vfiprintf_r+0x174>
    335a:	2b63      	cmp	r3, #99	; 0x63
    335c:	f000 8084 	beq.w	3468 <_vfiprintf_r+0x276>
    3360:	2b64      	cmp	r3, #100	; 0x64
    3362:	d026      	beq.n	33b2 <_vfiprintf_r+0x1c0>
    3364:	e1d0      	b.n	3708 <_vfiprintf_r+0x516>
    3366:	2b69      	cmp	r3, #105	; 0x69
    3368:	d023      	beq.n	33b2 <_vfiprintf_r+0x1c0>
    336a:	2b6c      	cmp	r3, #108	; 0x6c
    336c:	d06f      	beq.n	344e <_vfiprintf_r+0x25c>
    336e:	e1cb      	b.n	3708 <_vfiprintf_r+0x516>
    3370:	2b71      	cmp	r3, #113	; 0x71
    3372:	d076      	beq.n	3462 <_vfiprintf_r+0x270>
    3374:	dc13      	bgt.n	339e <_vfiprintf_r+0x1ac>
    3376:	2b6f      	cmp	r3, #111	; 0x6f
    3378:	f000 80c0 	beq.w	34fc <_vfiprintf_r+0x30a>
    337c:	2b70      	cmp	r3, #112	; 0x70
    337e:	f040 81c3 	bne.w	3708 <_vfiprintf_r+0x516>
    3382:	2330      	movs	r3, #48	; 0x30
    3384:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    3388:	489f      	ldr	r0, [pc, #636]	; (3608 <_vfiprintf_r+0x416>)
    338a:	6834      	ldr	r4, [r6, #0]
    338c:	900a      	str	r0, [sp, #40]	; 0x28
    338e:	2378      	movs	r3, #120	; 0x78
    3390:	2500      	movs	r5, #0
    3392:	f047 0702 	orr.w	r7, r7, #2
    3396:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    339a:	3604      	adds	r6, #4
    339c:	e12f      	b.n	35fe <_vfiprintf_r+0x40c>
    339e:	2b75      	cmp	r3, #117	; 0x75
    33a0:	f000 80ef 	beq.w	3582 <_vfiprintf_r+0x390>
    33a4:	2b78      	cmp	r3, #120	; 0x78
    33a6:	f000 8104 	beq.w	35b2 <_vfiprintf_r+0x3c0>
    33aa:	2b73      	cmp	r3, #115	; 0x73
    33ac:	f040 81ac 	bne.w	3708 <_vfiprintf_r+0x516>
    33b0:	e0c0      	b.n	3534 <_vfiprintf_r+0x342>
    33b2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    33b6:	e05f      	b.n	3478 <_vfiprintf_r+0x286>
    33b8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    33bc:	4c93      	ldr	r4, [pc, #588]	; (360c <_vfiprintf_r+0x41a>)
    33be:	e0fb      	b.n	35b8 <_vfiprintf_r+0x3c6>
    33c0:	2a00      	cmp	r2, #0
    33c2:	bf08      	it	eq
    33c4:	2220      	moveq	r2, #32
    33c6:	e79f      	b.n	3308 <_vfiprintf_r+0x116>
    33c8:	1d33      	adds	r3, r6, #4
    33ca:	6836      	ldr	r6, [r6, #0]
    33cc:	9604      	str	r6, [sp, #16]
    33ce:	2e00      	cmp	r6, #0
    33d0:	db01      	blt.n	33d6 <_vfiprintf_r+0x1e4>
    33d2:	461e      	mov	r6, r3
    33d4:	e798      	b.n	3308 <_vfiprintf_r+0x116>
    33d6:	4275      	negs	r5, r6
    33d8:	9504      	str	r5, [sp, #16]
    33da:	461e      	mov	r6, r3
    33dc:	f047 0704 	orr.w	r7, r7, #4
    33e0:	e792      	b.n	3308 <_vfiprintf_r+0x116>
    33e2:	9c02      	ldr	r4, [sp, #8]
    33e4:	7823      	ldrb	r3, [r4, #0]
    33e6:	2b2a      	cmp	r3, #42	; 0x2a
    33e8:	f104 0101 	add.w	r1, r4, #1
    33ec:	d002      	beq.n	33f4 <_vfiprintf_r+0x202>
    33ee:	f04f 0a00 	mov.w	sl, #0
    33f2:	e00a      	b.n	340a <_vfiprintf_r+0x218>
    33f4:	f8d6 a000 	ldr.w	sl, [r6]
    33f8:	9102      	str	r1, [sp, #8]
    33fa:	1d33      	adds	r3, r6, #4
    33fc:	f1ba 0f00 	cmp.w	sl, #0
    3400:	461e      	mov	r6, r3
    3402:	da81      	bge.n	3308 <_vfiprintf_r+0x116>
    3404:	f04f 3aff 	mov.w	sl, #4294967295
    3408:	e77e      	b.n	3308 <_vfiprintf_r+0x116>
    340a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    340e:	2809      	cmp	r0, #9
    3410:	d805      	bhi.n	341e <_vfiprintf_r+0x22c>
    3412:	230a      	movs	r3, #10
    3414:	fb03 0a0a 	mla	sl, r3, sl, r0
    3418:	f811 3b01 	ldrb.w	r3, [r1], #1
    341c:	e7f5      	b.n	340a <_vfiprintf_r+0x218>
    341e:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
    3422:	9102      	str	r1, [sp, #8]
    3424:	e760      	b.n	32e8 <_vfiprintf_r+0xf6>
    3426:	2500      	movs	r5, #0
    3428:	9504      	str	r5, [sp, #16]
    342a:	9c04      	ldr	r4, [sp, #16]
    342c:	3b30      	subs	r3, #48	; 0x30
    342e:	210a      	movs	r1, #10
    3430:	fb01 3404 	mla	r4, r1, r4, r3
    3434:	9902      	ldr	r1, [sp, #8]
    3436:	9404      	str	r4, [sp, #16]
    3438:	f811 3b01 	ldrb.w	r3, [r1], #1
    343c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    3440:	2809      	cmp	r0, #9
    3442:	d8ee      	bhi.n	3422 <_vfiprintf_r+0x230>
    3444:	9102      	str	r1, [sp, #8]
    3446:	e7f0      	b.n	342a <_vfiprintf_r+0x238>
    3448:	f047 0740 	orr.w	r7, r7, #64	; 0x40
    344c:	e75c      	b.n	3308 <_vfiprintf_r+0x116>
    344e:	9d02      	ldr	r5, [sp, #8]
    3450:	782b      	ldrb	r3, [r5, #0]
    3452:	2b6c      	cmp	r3, #108	; 0x6c
    3454:	d102      	bne.n	345c <_vfiprintf_r+0x26a>
    3456:	3501      	adds	r5, #1
    3458:	9502      	str	r5, [sp, #8]
    345a:	e002      	b.n	3462 <_vfiprintf_r+0x270>
    345c:	f047 0710 	orr.w	r7, r7, #16
    3460:	e752      	b.n	3308 <_vfiprintf_r+0x116>
    3462:	f047 0720 	orr.w	r7, r7, #32
    3466:	e74f      	b.n	3308 <_vfiprintf_r+0x116>
    3468:	6833      	ldr	r3, [r6, #0]
    346a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    346e:	2500      	movs	r5, #0
    3470:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    3474:	3604      	adds	r6, #4
    3476:	e151      	b.n	371c <_vfiprintf_r+0x52a>
    3478:	06ba      	lsls	r2, r7, #26
    347a:	d507      	bpl.n	348c <_vfiprintf_r+0x29a>
    347c:	3607      	adds	r6, #7
    347e:	f026 0307 	bic.w	r3, r6, #7
    3482:	f103 0608 	add.w	r6, r3, #8
    3486:	e9d3 4500 	ldrd	r4, r5, [r3]
    348a:	e00d      	b.n	34a8 <_vfiprintf_r+0x2b6>
    348c:	f017 0f10 	tst.w	r7, #16
    3490:	f106 0304 	add.w	r3, r6, #4
    3494:	d001      	beq.n	349a <_vfiprintf_r+0x2a8>
    3496:	6834      	ldr	r4, [r6, #0]
    3498:	e004      	b.n	34a4 <_vfiprintf_r+0x2b2>
    349a:	6834      	ldr	r4, [r6, #0]
    349c:	f017 0f40 	tst.w	r7, #64	; 0x40
    34a0:	bf18      	it	ne
    34a2:	b224      	sxthne	r4, r4
    34a4:	17e5      	asrs	r5, r4, #31
    34a6:	461e      	mov	r6, r3
    34a8:	2c00      	cmp	r4, #0
    34aa:	f175 0000 	sbcs.w	r0, r5, #0
    34ae:	f280 80af 	bge.w	3610 <_vfiprintf_r+0x41e>
    34b2:	232d      	movs	r3, #45	; 0x2d
    34b4:	4264      	negs	r4, r4
    34b6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    34ba:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    34be:	e0a7      	b.n	3610 <_vfiprintf_r+0x41e>
    34c0:	f017 0f20 	tst.w	r7, #32
    34c4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    34c8:	f106 0104 	add.w	r1, r6, #4
    34cc:	d007      	beq.n	34de <_vfiprintf_r+0x2ec>
    34ce:	9c05      	ldr	r4, [sp, #20]
    34d0:	6830      	ldr	r0, [r6, #0]
    34d2:	17e5      	asrs	r5, r4, #31
    34d4:	4622      	mov	r2, r4
    34d6:	462b      	mov	r3, r5
    34d8:	e9c0 2300 	strd	r2, r3, [r0]
    34dc:	e00a      	b.n	34f4 <_vfiprintf_r+0x302>
    34de:	06fb      	lsls	r3, r7, #27
    34e0:	d405      	bmi.n	34ee <_vfiprintf_r+0x2fc>
    34e2:	067f      	lsls	r7, r7, #25
    34e4:	d503      	bpl.n	34ee <_vfiprintf_r+0x2fc>
    34e6:	6833      	ldr	r3, [r6, #0]
    34e8:	9c05      	ldr	r4, [sp, #20]
    34ea:	801c      	strh	r4, [r3, #0]
    34ec:	e002      	b.n	34f4 <_vfiprintf_r+0x302>
    34ee:	6833      	ldr	r3, [r6, #0]
    34f0:	9d05      	ldr	r5, [sp, #20]
    34f2:	601d      	str	r5, [r3, #0]
    34f4:	460e      	mov	r6, r1
    34f6:	e6c1      	b.n	327c <_vfiprintf_r+0x8a>
    34f8:	f047 0710 	orr.w	r7, r7, #16
    34fc:	f017 0320 	ands.w	r3, r7, #32
    3500:	d008      	beq.n	3514 <_vfiprintf_r+0x322>
    3502:	3607      	adds	r6, #7
    3504:	f026 0307 	bic.w	r3, r6, #7
    3508:	e9d3 4500 	ldrd	r4, r5, [r3]
    350c:	f103 0608 	add.w	r6, r3, #8
    3510:	2300      	movs	r3, #0
    3512:	e075      	b.n	3600 <_vfiprintf_r+0x40e>
    3514:	f017 0110 	ands.w	r1, r7, #16
    3518:	f106 0204 	add.w	r2, r6, #4
    351c:	d106      	bne.n	352c <_vfiprintf_r+0x33a>
    351e:	f017 0340 	ands.w	r3, r7, #64	; 0x40
    3522:	d003      	beq.n	352c <_vfiprintf_r+0x33a>
    3524:	8834      	ldrh	r4, [r6, #0]
    3526:	2500      	movs	r5, #0
    3528:	4616      	mov	r6, r2
    352a:	e7f1      	b.n	3510 <_vfiprintf_r+0x31e>
    352c:	6834      	ldr	r4, [r6, #0]
    352e:	2500      	movs	r5, #0
    3530:	4616      	mov	r6, r2
    3532:	e065      	b.n	3600 <_vfiprintf_r+0x40e>
    3534:	f8d6 9000 	ldr.w	r9, [r6]
    3538:	2300      	movs	r3, #0
    353a:	459a      	cmp	sl, r3
    353c:	f106 0604 	add.w	r6, r6, #4
    3540:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    3544:	4648      	mov	r0, r9
    3546:	db11      	blt.n	356c <_vfiprintf_r+0x37a>
    3548:	4619      	mov	r1, r3
    354a:	4652      	mov	r2, sl
    354c:	f8cd c004 	str.w	ip, [sp, #4]
    3550:	f001 fa7c 	bl	4a4c <memchr>
    3554:	f8dd c004 	ldr.w	ip, [sp, #4]
    3558:	2800      	cmp	r0, #0
    355a:	f000 80e4 	beq.w	3726 <_vfiprintf_r+0x534>
    355e:	ebc9 0000 	rsb	r0, r9, r0
    3562:	4550      	cmp	r0, sl
    3564:	bfb8      	it	lt
    3566:	4682      	movlt	sl, r0
    3568:	2500      	movs	r5, #0
    356a:	e0dd      	b.n	3728 <_vfiprintf_r+0x536>
    356c:	f8cd c004 	str.w	ip, [sp, #4]
    3570:	f7ff fe04 	bl	317c <strlen>
    3574:	2500      	movs	r5, #0
    3576:	4682      	mov	sl, r0
    3578:	f8dd c004 	ldr.w	ip, [sp, #4]
    357c:	e0d4      	b.n	3728 <_vfiprintf_r+0x536>
    357e:	f047 0710 	orr.w	r7, r7, #16
    3582:	06bd      	lsls	r5, r7, #26
    3584:	d507      	bpl.n	3596 <_vfiprintf_r+0x3a4>
    3586:	3607      	adds	r6, #7
    3588:	f026 0307 	bic.w	r3, r6, #7
    358c:	f103 0608 	add.w	r6, r3, #8
    3590:	e9d3 4500 	ldrd	r4, r5, [r3]
    3594:	e00b      	b.n	35ae <_vfiprintf_r+0x3bc>
    3596:	f017 0f10 	tst.w	r7, #16
    359a:	f106 0304 	add.w	r3, r6, #4
    359e:	d103      	bne.n	35a8 <_vfiprintf_r+0x3b6>
    35a0:	067c      	lsls	r4, r7, #25
    35a2:	d501      	bpl.n	35a8 <_vfiprintf_r+0x3b6>
    35a4:	8834      	ldrh	r4, [r6, #0]
    35a6:	e000      	b.n	35aa <_vfiprintf_r+0x3b8>
    35a8:	6834      	ldr	r4, [r6, #0]
    35aa:	2500      	movs	r5, #0
    35ac:	461e      	mov	r6, r3
    35ae:	2301      	movs	r3, #1
    35b0:	e026      	b.n	3600 <_vfiprintf_r+0x40e>
    35b2:	4c15      	ldr	r4, [pc, #84]	; (3608 <_vfiprintf_r+0x416>)
    35b4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    35b8:	06b8      	lsls	r0, r7, #26
    35ba:	940a      	str	r4, [sp, #40]	; 0x28
    35bc:	d507      	bpl.n	35ce <_vfiprintf_r+0x3dc>
    35be:	3607      	adds	r6, #7
    35c0:	f026 0207 	bic.w	r2, r6, #7
    35c4:	f102 0608 	add.w	r6, r2, #8
    35c8:	e9d2 4500 	ldrd	r4, r5, [r2]
    35cc:	e00b      	b.n	35e6 <_vfiprintf_r+0x3f4>
    35ce:	f017 0f10 	tst.w	r7, #16
    35d2:	f106 0204 	add.w	r2, r6, #4
    35d6:	d103      	bne.n	35e0 <_vfiprintf_r+0x3ee>
    35d8:	0679      	lsls	r1, r7, #25
    35da:	d501      	bpl.n	35e0 <_vfiprintf_r+0x3ee>
    35dc:	8834      	ldrh	r4, [r6, #0]
    35de:	e000      	b.n	35e2 <_vfiprintf_r+0x3f0>
    35e0:	6834      	ldr	r4, [r6, #0]
    35e2:	2500      	movs	r5, #0
    35e4:	4616      	mov	r6, r2
    35e6:	07fa      	lsls	r2, r7, #31
    35e8:	d509      	bpl.n	35fe <_vfiprintf_r+0x40c>
    35ea:	ea54 0005 	orrs.w	r0, r4, r5
    35ee:	d006      	beq.n	35fe <_vfiprintf_r+0x40c>
    35f0:	2230      	movs	r2, #48	; 0x30
    35f2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    35f6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    35fa:	f047 0702 	orr.w	r7, r7, #2
    35fe:	2302      	movs	r3, #2
    3600:	2200      	movs	r2, #0
    3602:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    3606:	e004      	b.n	3612 <_vfiprintf_r+0x420>
    3608:	000058c5 	.word	0x000058c5
    360c:	000058b4 	.word	0x000058b4
    3610:	2301      	movs	r3, #1
    3612:	f1ba 0f00 	cmp.w	sl, #0
    3616:	bfa8      	it	ge
    3618:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
    361c:	ea54 0105 	orrs.w	r1, r4, r5
    3620:	d102      	bne.n	3628 <_vfiprintf_r+0x436>
    3622:	f1ba 0f00 	cmp.w	sl, #0
    3626:	d05e      	beq.n	36e6 <_vfiprintf_r+0x4f4>
    3628:	2b01      	cmp	r3, #1
    362a:	d01f      	beq.n	366c <_vfiprintf_r+0x47a>
    362c:	2b02      	cmp	r3, #2
    362e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
    3632:	d045      	beq.n	36c0 <_vfiprintf_r+0x4ce>
    3634:	08e0      	lsrs	r0, r4, #3
    3636:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
    363a:	08e8      	lsrs	r0, r5, #3
    363c:	9106      	str	r1, [sp, #24]
    363e:	9007      	str	r0, [sp, #28]
    3640:	f004 0207 	and.w	r2, r4, #7
    3644:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
    3648:	3230      	adds	r2, #48	; 0x30
    364a:	ea54 0105 	orrs.w	r1, r4, r5
    364e:	4699      	mov	r9, r3
    3650:	701a      	strb	r2, [r3, #0]
    3652:	f103 33ff 	add.w	r3, r3, #4294967295
    3656:	d1ed      	bne.n	3634 <_vfiprintf_r+0x442>
    3658:	07f8      	lsls	r0, r7, #31
    365a:	4649      	mov	r1, r9
    365c:	d54e      	bpl.n	36fc <_vfiprintf_r+0x50a>
    365e:	2a30      	cmp	r2, #48	; 0x30
    3660:	d04c      	beq.n	36fc <_vfiprintf_r+0x50a>
    3662:	4699      	mov	r9, r3
    3664:	2330      	movs	r3, #48	; 0x30
    3666:	f801 3c01 	strb.w	r3, [r1, #-1]
    366a:	e047      	b.n	36fc <_vfiprintf_r+0x50a>
    366c:	2d00      	cmp	r5, #0
    366e:	bf08      	it	eq
    3670:	2c0a      	cmpeq	r4, #10
    3672:	d205      	bcs.n	3680 <_vfiprintf_r+0x48e>
    3674:	3430      	adds	r4, #48	; 0x30
    3676:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    367a:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
    367e:	e03d      	b.n	36fc <_vfiprintf_r+0x50a>
    3680:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
    3684:	9203      	str	r2, [sp, #12]
    3686:	4620      	mov	r0, r4
    3688:	4629      	mov	r1, r5
    368a:	220a      	movs	r2, #10
    368c:	2300      	movs	r3, #0
    368e:	f8cd c004 	str.w	ip, [sp, #4]
    3692:	f001 fdb3 	bl	51fc <__aeabi_uldivmod>
    3696:	9b03      	ldr	r3, [sp, #12]
    3698:	f8dd 900c 	ldr.w	r9, [sp, #12]
    369c:	3230      	adds	r2, #48	; 0x30
    369e:	f803 2901 	strb.w	r2, [r3], #-1
    36a2:	4620      	mov	r0, r4
    36a4:	9303      	str	r3, [sp, #12]
    36a6:	4629      	mov	r1, r5
    36a8:	220a      	movs	r2, #10
    36aa:	2300      	movs	r3, #0
    36ac:	f001 fda6 	bl	51fc <__aeabi_uldivmod>
    36b0:	4604      	mov	r4, r0
    36b2:	460d      	mov	r5, r1
    36b4:	ea54 0005 	orrs.w	r0, r4, r5
    36b8:	f8dd c004 	ldr.w	ip, [sp, #4]
    36bc:	d1e3      	bne.n	3686 <_vfiprintf_r+0x494>
    36be:	e01d      	b.n	36fc <_vfiprintf_r+0x50a>
    36c0:	f004 020f 	and.w	r2, r4, #15
    36c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    36c6:	5c8a      	ldrb	r2, [r1, r2]
    36c8:	4699      	mov	r9, r3
    36ca:	f803 2901 	strb.w	r2, [r3], #-1
    36ce:	0922      	lsrs	r2, r4, #4
    36d0:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
    36d4:	0929      	lsrs	r1, r5, #4
    36d6:	9008      	str	r0, [sp, #32]
    36d8:	9109      	str	r1, [sp, #36]	; 0x24
    36da:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    36de:	ea54 0205 	orrs.w	r2, r4, r5
    36e2:	d1ed      	bne.n	36c0 <_vfiprintf_r+0x4ce>
    36e4:	e00a      	b.n	36fc <_vfiprintf_r+0x50a>
    36e6:	b93b      	cbnz	r3, 36f8 <_vfiprintf_r+0x506>
    36e8:	07f9      	lsls	r1, r7, #31
    36ea:	d505      	bpl.n	36f8 <_vfiprintf_r+0x506>
    36ec:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    36f0:	2330      	movs	r3, #48	; 0x30
    36f2:	f809 3d41 	strb.w	r3, [r9, #-65]!
    36f6:	e001      	b.n	36fc <_vfiprintf_r+0x50a>
    36f8:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    36fc:	4655      	mov	r5, sl
    36fe:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
    3702:	ebc9 0a0a 	rsb	sl, r9, sl
    3706:	e00f      	b.n	3728 <_vfiprintf_r+0x536>
    3708:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    370c:	2b00      	cmp	r3, #0
    370e:	f000 8171 	beq.w	39f4 <_vfiprintf_r+0x802>
    3712:	2500      	movs	r5, #0
    3714:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    3718:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    371c:	f04f 0a01 	mov.w	sl, #1
    3720:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    3724:	e000      	b.n	3728 <_vfiprintf_r+0x536>
    3726:	4605      	mov	r5, r0
    3728:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    372c:	45aa      	cmp	sl, r5
    372e:	bfac      	ite	ge
    3730:	4654      	movge	r4, sl
    3732:	462c      	movlt	r4, r5
    3734:	b103      	cbz	r3, 3738 <_vfiprintf_r+0x546>
    3736:	3401      	adds	r4, #1
    3738:	f017 0302 	ands.w	r3, r7, #2
    373c:	9303      	str	r3, [sp, #12]
    373e:	bf18      	it	ne
    3740:	3402      	addne	r4, #2
    3742:	f017 0384 	ands.w	r3, r7, #132	; 0x84
    3746:	930b      	str	r3, [sp, #44]	; 0x2c
    3748:	d13b      	bne.n	37c2 <_vfiprintf_r+0x5d0>
    374a:	9804      	ldr	r0, [sp, #16]
    374c:	1b03      	subs	r3, r0, r4
    374e:	2b00      	cmp	r3, #0
    3750:	dd37      	ble.n	37c2 <_vfiprintf_r+0x5d0>
    3752:	4aa6      	ldr	r2, [pc, #664]	; (39ec <_vfiprintf_r+0x7fa>)
    3754:	f8cc 2000 	str.w	r2, [ip]
    3758:	2b10      	cmp	r3, #16
    375a:	dd1b      	ble.n	3794 <_vfiprintf_r+0x5a2>
    375c:	2210      	movs	r2, #16
    375e:	f8cc 2004 	str.w	r2, [ip, #4]
    3762:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3764:	3210      	adds	r2, #16
    3766:	9211      	str	r2, [sp, #68]	; 0x44
    3768:	9a10      	ldr	r2, [sp, #64]	; 0x40
    376a:	3201      	adds	r2, #1
    376c:	2a07      	cmp	r2, #7
    376e:	9210      	str	r2, [sp, #64]	; 0x40
    3770:	dc02      	bgt.n	3778 <_vfiprintf_r+0x586>
    3772:	f10c 0c08 	add.w	ip, ip, #8
    3776:	e00b      	b.n	3790 <_vfiprintf_r+0x59e>
    3778:	4658      	mov	r0, fp
    377a:	4641      	mov	r1, r8
    377c:	aa0f      	add	r2, sp, #60	; 0x3c
    377e:	9301      	str	r3, [sp, #4]
    3780:	f7ff fd04 	bl	318c <__sprint_r>
    3784:	9b01      	ldr	r3, [sp, #4]
    3786:	2800      	cmp	r0, #0
    3788:	f040 813b 	bne.w	3a02 <_vfiprintf_r+0x810>
    378c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    3790:	3b10      	subs	r3, #16
    3792:	e7de      	b.n	3752 <_vfiprintf_r+0x560>
    3794:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3796:	f8cc 3004 	str.w	r3, [ip, #4]
    379a:	4413      	add	r3, r2
    379c:	9311      	str	r3, [sp, #68]	; 0x44
    379e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    37a0:	3301      	adds	r3, #1
    37a2:	2b07      	cmp	r3, #7
    37a4:	9310      	str	r3, [sp, #64]	; 0x40
    37a6:	dc02      	bgt.n	37ae <_vfiprintf_r+0x5bc>
    37a8:	f10c 0c08 	add.w	ip, ip, #8
    37ac:	e009      	b.n	37c2 <_vfiprintf_r+0x5d0>
    37ae:	4658      	mov	r0, fp
    37b0:	4641      	mov	r1, r8
    37b2:	aa0f      	add	r2, sp, #60	; 0x3c
    37b4:	f7ff fcea 	bl	318c <__sprint_r>
    37b8:	2800      	cmp	r0, #0
    37ba:	f040 8122 	bne.w	3a02 <_vfiprintf_r+0x810>
    37be:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    37c2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    37c6:	b1db      	cbz	r3, 3800 <_vfiprintf_r+0x60e>
    37c8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    37cc:	f8cc 3000 	str.w	r3, [ip]
    37d0:	2301      	movs	r3, #1
    37d2:	f8cc 3004 	str.w	r3, [ip, #4]
    37d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    37d8:	3301      	adds	r3, #1
    37da:	9311      	str	r3, [sp, #68]	; 0x44
    37dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    37de:	3301      	adds	r3, #1
    37e0:	2b07      	cmp	r3, #7
    37e2:	9310      	str	r3, [sp, #64]	; 0x40
    37e4:	dc02      	bgt.n	37ec <_vfiprintf_r+0x5fa>
    37e6:	f10c 0c08 	add.w	ip, ip, #8
    37ea:	e009      	b.n	3800 <_vfiprintf_r+0x60e>
    37ec:	4658      	mov	r0, fp
    37ee:	4641      	mov	r1, r8
    37f0:	aa0f      	add	r2, sp, #60	; 0x3c
    37f2:	f7ff fccb 	bl	318c <__sprint_r>
    37f6:	2800      	cmp	r0, #0
    37f8:	f040 8103 	bne.w	3a02 <_vfiprintf_r+0x810>
    37fc:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    3800:	9b03      	ldr	r3, [sp, #12]
    3802:	b1d3      	cbz	r3, 383a <_vfiprintf_r+0x648>
    3804:	ab0e      	add	r3, sp, #56	; 0x38
    3806:	f8cc 3000 	str.w	r3, [ip]
    380a:	2302      	movs	r3, #2
    380c:	f8cc 3004 	str.w	r3, [ip, #4]
    3810:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3812:	3302      	adds	r3, #2
    3814:	9311      	str	r3, [sp, #68]	; 0x44
    3816:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3818:	3301      	adds	r3, #1
    381a:	2b07      	cmp	r3, #7
    381c:	9310      	str	r3, [sp, #64]	; 0x40
    381e:	dc02      	bgt.n	3826 <_vfiprintf_r+0x634>
    3820:	f10c 0c08 	add.w	ip, ip, #8
    3824:	e009      	b.n	383a <_vfiprintf_r+0x648>
    3826:	4658      	mov	r0, fp
    3828:	4641      	mov	r1, r8
    382a:	aa0f      	add	r2, sp, #60	; 0x3c
    382c:	f7ff fcae 	bl	318c <__sprint_r>
    3830:	2800      	cmp	r0, #0
    3832:	f040 80e6 	bne.w	3a02 <_vfiprintf_r+0x810>
    3836:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    383a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    383c:	2b80      	cmp	r3, #128	; 0x80
    383e:	d13f      	bne.n	38c0 <_vfiprintf_r+0x6ce>
    3840:	9b04      	ldr	r3, [sp, #16]
    3842:	1b1b      	subs	r3, r3, r4
    3844:	2b00      	cmp	r3, #0
    3846:	9303      	str	r3, [sp, #12]
    3848:	dd3a      	ble.n	38c0 <_vfiprintf_r+0x6ce>
    384a:	9b03      	ldr	r3, [sp, #12]
    384c:	2b10      	cmp	r3, #16
    384e:	4b68      	ldr	r3, [pc, #416]	; (39f0 <_vfiprintf_r+0x7fe>)
    3850:	f8cc 3000 	str.w	r3, [ip]
    3854:	dd1b      	ble.n	388e <_vfiprintf_r+0x69c>
    3856:	2310      	movs	r3, #16
    3858:	f8cc 3004 	str.w	r3, [ip, #4]
    385c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    385e:	3310      	adds	r3, #16
    3860:	9311      	str	r3, [sp, #68]	; 0x44
    3862:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3864:	3301      	adds	r3, #1
    3866:	2b07      	cmp	r3, #7
    3868:	9310      	str	r3, [sp, #64]	; 0x40
    386a:	dc02      	bgt.n	3872 <_vfiprintf_r+0x680>
    386c:	f10c 0c08 	add.w	ip, ip, #8
    3870:	e009      	b.n	3886 <_vfiprintf_r+0x694>
    3872:	4658      	mov	r0, fp
    3874:	4641      	mov	r1, r8
    3876:	aa0f      	add	r2, sp, #60	; 0x3c
    3878:	f7ff fc88 	bl	318c <__sprint_r>
    387c:	2800      	cmp	r0, #0
    387e:	f040 80c0 	bne.w	3a02 <_vfiprintf_r+0x810>
    3882:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    3886:	9b03      	ldr	r3, [sp, #12]
    3888:	3b10      	subs	r3, #16
    388a:	9303      	str	r3, [sp, #12]
    388c:	e7dd      	b.n	384a <_vfiprintf_r+0x658>
    388e:	9b03      	ldr	r3, [sp, #12]
    3890:	f8cc 3004 	str.w	r3, [ip, #4]
    3894:	9803      	ldr	r0, [sp, #12]
    3896:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3898:	4403      	add	r3, r0
    389a:	9311      	str	r3, [sp, #68]	; 0x44
    389c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    389e:	3301      	adds	r3, #1
    38a0:	2b07      	cmp	r3, #7
    38a2:	9310      	str	r3, [sp, #64]	; 0x40
    38a4:	dc02      	bgt.n	38ac <_vfiprintf_r+0x6ba>
    38a6:	f10c 0c08 	add.w	ip, ip, #8
    38aa:	e009      	b.n	38c0 <_vfiprintf_r+0x6ce>
    38ac:	4658      	mov	r0, fp
    38ae:	4641      	mov	r1, r8
    38b0:	aa0f      	add	r2, sp, #60	; 0x3c
    38b2:	f7ff fc6b 	bl	318c <__sprint_r>
    38b6:	2800      	cmp	r0, #0
    38b8:	f040 80a3 	bne.w	3a02 <_vfiprintf_r+0x810>
    38bc:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    38c0:	ebca 0505 	rsb	r5, sl, r5
    38c4:	2d00      	cmp	r5, #0
    38c6:	dd34      	ble.n	3932 <_vfiprintf_r+0x740>
    38c8:	4b49      	ldr	r3, [pc, #292]	; (39f0 <_vfiprintf_r+0x7fe>)
    38ca:	f8cc 3000 	str.w	r3, [ip]
    38ce:	2d10      	cmp	r5, #16
    38d0:	dd19      	ble.n	3906 <_vfiprintf_r+0x714>
    38d2:	2310      	movs	r3, #16
    38d4:	f8cc 3004 	str.w	r3, [ip, #4]
    38d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    38da:	3310      	adds	r3, #16
    38dc:	9311      	str	r3, [sp, #68]	; 0x44
    38de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    38e0:	3301      	adds	r3, #1
    38e2:	2b07      	cmp	r3, #7
    38e4:	9310      	str	r3, [sp, #64]	; 0x40
    38e6:	dc02      	bgt.n	38ee <_vfiprintf_r+0x6fc>
    38e8:	f10c 0c08 	add.w	ip, ip, #8
    38ec:	e009      	b.n	3902 <_vfiprintf_r+0x710>
    38ee:	4658      	mov	r0, fp
    38f0:	4641      	mov	r1, r8
    38f2:	aa0f      	add	r2, sp, #60	; 0x3c
    38f4:	f7ff fc4a 	bl	318c <__sprint_r>
    38f8:	2800      	cmp	r0, #0
    38fa:	f040 8082 	bne.w	3a02 <_vfiprintf_r+0x810>
    38fe:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    3902:	3d10      	subs	r5, #16
    3904:	e7e0      	b.n	38c8 <_vfiprintf_r+0x6d6>
    3906:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3908:	f8cc 5004 	str.w	r5, [ip, #4]
    390c:	441d      	add	r5, r3
    390e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3910:	9511      	str	r5, [sp, #68]	; 0x44
    3912:	3301      	adds	r3, #1
    3914:	2b07      	cmp	r3, #7
    3916:	9310      	str	r3, [sp, #64]	; 0x40
    3918:	dc02      	bgt.n	3920 <_vfiprintf_r+0x72e>
    391a:	f10c 0c08 	add.w	ip, ip, #8
    391e:	e008      	b.n	3932 <_vfiprintf_r+0x740>
    3920:	4658      	mov	r0, fp
    3922:	4641      	mov	r1, r8
    3924:	aa0f      	add	r2, sp, #60	; 0x3c
    3926:	f7ff fc31 	bl	318c <__sprint_r>
    392a:	2800      	cmp	r0, #0
    392c:	d169      	bne.n	3a02 <_vfiprintf_r+0x810>
    392e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    3932:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3934:	4453      	add	r3, sl
    3936:	9311      	str	r3, [sp, #68]	; 0x44
    3938:	9b10      	ldr	r3, [sp, #64]	; 0x40
    393a:	3301      	adds	r3, #1
    393c:	2b07      	cmp	r3, #7
    393e:	e88c 0600 	stmia.w	ip, {r9, sl}
    3942:	9310      	str	r3, [sp, #64]	; 0x40
    3944:	dc02      	bgt.n	394c <_vfiprintf_r+0x75a>
    3946:	f10c 0308 	add.w	r3, ip, #8
    394a:	e007      	b.n	395c <_vfiprintf_r+0x76a>
    394c:	4658      	mov	r0, fp
    394e:	4641      	mov	r1, r8
    3950:	aa0f      	add	r2, sp, #60	; 0x3c
    3952:	f7ff fc1b 	bl	318c <__sprint_r>
    3956:	2800      	cmp	r0, #0
    3958:	d153      	bne.n	3a02 <_vfiprintf_r+0x810>
    395a:	ab1c      	add	r3, sp, #112	; 0x70
    395c:	077a      	lsls	r2, r7, #29
    395e:	d40a      	bmi.n	3976 <_vfiprintf_r+0x784>
    3960:	9d05      	ldr	r5, [sp, #20]
    3962:	9804      	ldr	r0, [sp, #16]
    3964:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3966:	4284      	cmp	r4, r0
    3968:	bfac      	ite	ge
    396a:	192d      	addge	r5, r5, r4
    396c:	182d      	addlt	r5, r5, r0
    396e:	9505      	str	r5, [sp, #20]
    3970:	2b00      	cmp	r3, #0
    3972:	d035      	beq.n	39e0 <_vfiprintf_r+0x7ee>
    3974:	e02e      	b.n	39d4 <_vfiprintf_r+0x7e2>
    3976:	9904      	ldr	r1, [sp, #16]
    3978:	1b0d      	subs	r5, r1, r4
    397a:	2d00      	cmp	r5, #0
    397c:	ddf0      	ble.n	3960 <_vfiprintf_r+0x76e>
    397e:	4a1b      	ldr	r2, [pc, #108]	; (39ec <_vfiprintf_r+0x7fa>)
    3980:	601a      	str	r2, [r3, #0]
    3982:	2d10      	cmp	r5, #16
    3984:	dd15      	ble.n	39b2 <_vfiprintf_r+0x7c0>
    3986:	2210      	movs	r2, #16
    3988:	605a      	str	r2, [r3, #4]
    398a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    398c:	3210      	adds	r2, #16
    398e:	9211      	str	r2, [sp, #68]	; 0x44
    3990:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3992:	3201      	adds	r2, #1
    3994:	2a07      	cmp	r2, #7
    3996:	9210      	str	r2, [sp, #64]	; 0x40
    3998:	dc01      	bgt.n	399e <_vfiprintf_r+0x7ac>
    399a:	3308      	adds	r3, #8
    399c:	e007      	b.n	39ae <_vfiprintf_r+0x7bc>
    399e:	4658      	mov	r0, fp
    39a0:	4641      	mov	r1, r8
    39a2:	aa0f      	add	r2, sp, #60	; 0x3c
    39a4:	f7ff fbf2 	bl	318c <__sprint_r>
    39a8:	2800      	cmp	r0, #0
    39aa:	d12a      	bne.n	3a02 <_vfiprintf_r+0x810>
    39ac:	ab1c      	add	r3, sp, #112	; 0x70
    39ae:	3d10      	subs	r5, #16
    39b0:	e7e5      	b.n	397e <_vfiprintf_r+0x78c>
    39b2:	605d      	str	r5, [r3, #4]
    39b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    39b6:	441d      	add	r5, r3
    39b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    39ba:	9511      	str	r5, [sp, #68]	; 0x44
    39bc:	3301      	adds	r3, #1
    39be:	2b07      	cmp	r3, #7
    39c0:	9310      	str	r3, [sp, #64]	; 0x40
    39c2:	ddcd      	ble.n	3960 <_vfiprintf_r+0x76e>
    39c4:	4658      	mov	r0, fp
    39c6:	4641      	mov	r1, r8
    39c8:	aa0f      	add	r2, sp, #60	; 0x3c
    39ca:	f7ff fbdf 	bl	318c <__sprint_r>
    39ce:	2800      	cmp	r0, #0
    39d0:	d0c6      	beq.n	3960 <_vfiprintf_r+0x76e>
    39d2:	e016      	b.n	3a02 <_vfiprintf_r+0x810>
    39d4:	4658      	mov	r0, fp
    39d6:	4641      	mov	r1, r8
    39d8:	aa0f      	add	r2, sp, #60	; 0x3c
    39da:	f7ff fbd7 	bl	318c <__sprint_r>
    39de:	b980      	cbnz	r0, 3a02 <_vfiprintf_r+0x810>
    39e0:	2300      	movs	r3, #0
    39e2:	9310      	str	r3, [sp, #64]	; 0x40
    39e4:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    39e8:	e448      	b.n	327c <_vfiprintf_r+0x8a>
    39ea:	bf00      	nop
    39ec:	00005894 	.word	0x00005894
    39f0:	000058a4 	.word	0x000058a4
    39f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    39f6:	b123      	cbz	r3, 3a02 <_vfiprintf_r+0x810>
    39f8:	4658      	mov	r0, fp
    39fa:	4641      	mov	r1, r8
    39fc:	aa0f      	add	r2, sp, #60	; 0x3c
    39fe:	f7ff fbc5 	bl	318c <__sprint_r>
    3a02:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    3a06:	065b      	lsls	r3, r3, #25
    3a08:	f53f ac22 	bmi.w	3250 <_vfiprintf_r+0x5e>
    3a0c:	9805      	ldr	r0, [sp, #20]
    3a0e:	b02d      	add	sp, #180	; 0xb4
    3a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003a14 <vfiprintf>:
    3a14:	b530      	push	{r4, r5, lr}
    3a16:	4613      	mov	r3, r2
    3a18:	4a04      	ldr	r2, [pc, #16]	; (3a2c <vfiprintf+0x18>)
    3a1a:	4605      	mov	r5, r0
    3a1c:	460c      	mov	r4, r1
    3a1e:	6810      	ldr	r0, [r2, #0]
    3a20:	4629      	mov	r1, r5
    3a22:	4622      	mov	r2, r4
    3a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3a28:	f7ff bbe3 	b.w	31f2 <_vfiprintf_r>
    3a2c:	20000040 	.word	0x20000040

00003a30 <__sbprintf>:
    3a30:	b570      	push	{r4, r5, r6, lr}
    3a32:	460c      	mov	r4, r1
    3a34:	8989      	ldrh	r1, [r1, #12]
    3a36:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
    3a3a:	f021 0102 	bic.w	r1, r1, #2
    3a3e:	f8ad 100c 	strh.w	r1, [sp, #12]
    3a42:	6e61      	ldr	r1, [r4, #100]	; 0x64
    3a44:	9119      	str	r1, [sp, #100]	; 0x64
    3a46:	89e1      	ldrh	r1, [r4, #14]
    3a48:	f8ad 100e 	strh.w	r1, [sp, #14]
    3a4c:	69e1      	ldr	r1, [r4, #28]
    3a4e:	9107      	str	r1, [sp, #28]
    3a50:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3a52:	9109      	str	r1, [sp, #36]	; 0x24
    3a54:	a91a      	add	r1, sp, #104	; 0x68
    3a56:	9100      	str	r1, [sp, #0]
    3a58:	9104      	str	r1, [sp, #16]
    3a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3a5e:	9102      	str	r1, [sp, #8]
    3a60:	9105      	str	r1, [sp, #20]
    3a62:	2100      	movs	r1, #0
    3a64:	9106      	str	r1, [sp, #24]
    3a66:	4669      	mov	r1, sp
    3a68:	4606      	mov	r6, r0
    3a6a:	f7ff fbc2 	bl	31f2 <_vfiprintf_r>
    3a6e:	1e05      	subs	r5, r0, #0
    3a70:	db07      	blt.n	3a82 <__sbprintf+0x52>
    3a72:	4630      	mov	r0, r6
    3a74:	4669      	mov	r1, sp
    3a76:	f000 f907 	bl	3c88 <_fflush_r>
    3a7a:	2800      	cmp	r0, #0
    3a7c:	bf18      	it	ne
    3a7e:	f04f 35ff 	movne.w	r5, #4294967295
    3a82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3a86:	065b      	lsls	r3, r3, #25
    3a88:	d503      	bpl.n	3a92 <__sbprintf+0x62>
    3a8a:	89a3      	ldrh	r3, [r4, #12]
    3a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3a90:	81a3      	strh	r3, [r4, #12]
    3a92:	4628      	mov	r0, r5
    3a94:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
    3a98:	bd70      	pop	{r4, r5, r6, pc}
    3a9a:	bf00      	nop

00003a9c <__swsetup_r>:
    3a9c:	b538      	push	{r3, r4, r5, lr}
    3a9e:	4b2b      	ldr	r3, [pc, #172]	; (3b4c <__swsetup_r+0xb0>)
    3aa0:	4605      	mov	r5, r0
    3aa2:	6818      	ldr	r0, [r3, #0]
    3aa4:	460c      	mov	r4, r1
    3aa6:	b118      	cbz	r0, 3ab0 <__swsetup_r+0x14>
    3aa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3aaa:	b90b      	cbnz	r3, 3ab0 <__swsetup_r+0x14>
    3aac:	f000 f936 	bl	3d1c <__sinit>
    3ab0:	89a2      	ldrh	r2, [r4, #12]
    3ab2:	b293      	uxth	r3, r2
    3ab4:	0718      	lsls	r0, r3, #28
    3ab6:	d420      	bmi.n	3afa <__swsetup_r+0x5e>
    3ab8:	06d9      	lsls	r1, r3, #27
    3aba:	d405      	bmi.n	3ac8 <__swsetup_r+0x2c>
    3abc:	2309      	movs	r3, #9
    3abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3ac2:	602b      	str	r3, [r5, #0]
    3ac4:	81a2      	strh	r2, [r4, #12]
    3ac6:	e03b      	b.n	3b40 <__swsetup_r+0xa4>
    3ac8:	0758      	lsls	r0, r3, #29
    3aca:	d512      	bpl.n	3af2 <__swsetup_r+0x56>
    3acc:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3ace:	b141      	cbz	r1, 3ae2 <__swsetup_r+0x46>
    3ad0:	f104 0340 	add.w	r3, r4, #64	; 0x40
    3ad4:	4299      	cmp	r1, r3
    3ad6:	d002      	beq.n	3ade <__swsetup_r+0x42>
    3ad8:	4628      	mov	r0, r5
    3ada:	f000 fab9 	bl	4050 <_free_r>
    3ade:	2300      	movs	r3, #0
    3ae0:	6323      	str	r3, [r4, #48]	; 0x30
    3ae2:	89a3      	ldrh	r3, [r4, #12]
    3ae4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    3ae8:	81a3      	strh	r3, [r4, #12]
    3aea:	2300      	movs	r3, #0
    3aec:	6063      	str	r3, [r4, #4]
    3aee:	6923      	ldr	r3, [r4, #16]
    3af0:	6023      	str	r3, [r4, #0]
    3af2:	89a3      	ldrh	r3, [r4, #12]
    3af4:	f043 0308 	orr.w	r3, r3, #8
    3af8:	81a3      	strh	r3, [r4, #12]
    3afa:	6923      	ldr	r3, [r4, #16]
    3afc:	b94b      	cbnz	r3, 3b12 <__swsetup_r+0x76>
    3afe:	89a3      	ldrh	r3, [r4, #12]
    3b00:	f403 7320 	and.w	r3, r3, #640	; 0x280
    3b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3b08:	d003      	beq.n	3b12 <__swsetup_r+0x76>
    3b0a:	4628      	mov	r0, r5
    3b0c:	4621      	mov	r1, r4
    3b0e:	f000 fd1f 	bl	4550 <__smakebuf_r>
    3b12:	89a3      	ldrh	r3, [r4, #12]
    3b14:	f013 0201 	ands.w	r2, r3, #1
    3b18:	d005      	beq.n	3b26 <__swsetup_r+0x8a>
    3b1a:	2200      	movs	r2, #0
    3b1c:	60a2      	str	r2, [r4, #8]
    3b1e:	6962      	ldr	r2, [r4, #20]
    3b20:	4252      	negs	r2, r2
    3b22:	61a2      	str	r2, [r4, #24]
    3b24:	e003      	b.n	3b2e <__swsetup_r+0x92>
    3b26:	0799      	lsls	r1, r3, #30
    3b28:	bf58      	it	pl
    3b2a:	6962      	ldrpl	r2, [r4, #20]
    3b2c:	60a2      	str	r2, [r4, #8]
    3b2e:	6922      	ldr	r2, [r4, #16]
    3b30:	b94a      	cbnz	r2, 3b46 <__swsetup_r+0xaa>
    3b32:	f003 0080 	and.w	r0, r3, #128	; 0x80
    3b36:	b280      	uxth	r0, r0
    3b38:	b130      	cbz	r0, 3b48 <__swsetup_r+0xac>
    3b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3b3e:	81a3      	strh	r3, [r4, #12]
    3b40:	f04f 30ff 	mov.w	r0, #4294967295
    3b44:	bd38      	pop	{r3, r4, r5, pc}
    3b46:	2000      	movs	r0, #0
    3b48:	bd38      	pop	{r3, r4, r5, pc}
    3b4a:	bf00      	nop
    3b4c:	20000040 	.word	0x20000040

00003b50 <register_fini>:
    3b50:	4b02      	ldr	r3, [pc, #8]	; (3b5c <register_fini+0xc>)
    3b52:	b113      	cbz	r3, 3b5a <register_fini+0xa>
    3b54:	4802      	ldr	r0, [pc, #8]	; (3b60 <register_fini+0x10>)
    3b56:	f000 b805 	b.w	3b64 <atexit>
    3b5a:	4770      	bx	lr
    3b5c:	00000000 	.word	0x00000000
    3b60:	00003eb1 	.word	0x00003eb1

00003b64 <atexit>:
    3b64:	4601      	mov	r1, r0
    3b66:	2000      	movs	r0, #0
    3b68:	4602      	mov	r2, r0
    3b6a:	4603      	mov	r3, r0
    3b6c:	f001 ba5e 	b.w	502c <__register_exitproc>

00003b70 <__sflush_r>:
    3b70:	898a      	ldrh	r2, [r1, #12]
    3b72:	b293      	uxth	r3, r2
    3b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b78:	4605      	mov	r5, r0
    3b7a:	0718      	lsls	r0, r3, #28
    3b7c:	460c      	mov	r4, r1
    3b7e:	d45e      	bmi.n	3c3e <__sflush_r+0xce>
    3b80:	684b      	ldr	r3, [r1, #4]
    3b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    3b86:	2b00      	cmp	r3, #0
    3b88:	818a      	strh	r2, [r1, #12]
    3b8a:	dc02      	bgt.n	3b92 <__sflush_r+0x22>
    3b8c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    3b8e:	2b00      	cmp	r3, #0
    3b90:	dd18      	ble.n	3bc4 <__sflush_r+0x54>
    3b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3b94:	b1b6      	cbz	r6, 3bc4 <__sflush_r+0x54>
    3b96:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    3b9a:	2300      	movs	r3, #0
    3b9c:	b292      	uxth	r2, r2
    3b9e:	682f      	ldr	r7, [r5, #0]
    3ba0:	602b      	str	r3, [r5, #0]
    3ba2:	b10a      	cbz	r2, 3ba8 <__sflush_r+0x38>
    3ba4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    3ba6:	e010      	b.n	3bca <__sflush_r+0x5a>
    3ba8:	69e1      	ldr	r1, [r4, #28]
    3baa:	4628      	mov	r0, r5
    3bac:	2301      	movs	r3, #1
    3bae:	47b0      	blx	r6
    3bb0:	1c41      	adds	r1, r0, #1
    3bb2:	4602      	mov	r2, r0
    3bb4:	d109      	bne.n	3bca <__sflush_r+0x5a>
    3bb6:	682b      	ldr	r3, [r5, #0]
    3bb8:	b13b      	cbz	r3, 3bca <__sflush_r+0x5a>
    3bba:	2b1d      	cmp	r3, #29
    3bbc:	d001      	beq.n	3bc2 <__sflush_r+0x52>
    3bbe:	2b16      	cmp	r3, #22
    3bc0:	d14b      	bne.n	3c5a <__sflush_r+0xea>
    3bc2:	602f      	str	r7, [r5, #0]
    3bc4:	2000      	movs	r0, #0
    3bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bca:	89a3      	ldrh	r3, [r4, #12]
    3bcc:	075b      	lsls	r3, r3, #29
    3bce:	d505      	bpl.n	3bdc <__sflush_r+0x6c>
    3bd0:	6863      	ldr	r3, [r4, #4]
    3bd2:	1ad2      	subs	r2, r2, r3
    3bd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3bd6:	b10b      	cbz	r3, 3bdc <__sflush_r+0x6c>
    3bd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3bda:	1ad2      	subs	r2, r2, r3
    3bdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3bde:	69e1      	ldr	r1, [r4, #28]
    3be0:	4628      	mov	r0, r5
    3be2:	2300      	movs	r3, #0
    3be4:	47b0      	blx	r6
    3be6:	1c46      	adds	r6, r0, #1
    3be8:	89a2      	ldrh	r2, [r4, #12]
    3bea:	d105      	bne.n	3bf8 <__sflush_r+0x88>
    3bec:	682b      	ldr	r3, [r5, #0]
    3bee:	b11b      	cbz	r3, 3bf8 <__sflush_r+0x88>
    3bf0:	2b1d      	cmp	r3, #29
    3bf2:	d001      	beq.n	3bf8 <__sflush_r+0x88>
    3bf4:	2b16      	cmp	r3, #22
    3bf6:	d11d      	bne.n	3c34 <__sflush_r+0xc4>
    3bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    3bfc:	b292      	uxth	r2, r2
    3bfe:	2300      	movs	r3, #0
    3c00:	6063      	str	r3, [r4, #4]
    3c02:	04d1      	lsls	r1, r2, #19
    3c04:	6923      	ldr	r3, [r4, #16]
    3c06:	81a2      	strh	r2, [r4, #12]
    3c08:	6023      	str	r3, [r4, #0]
    3c0a:	d504      	bpl.n	3c16 <__sflush_r+0xa6>
    3c0c:	1c42      	adds	r2, r0, #1
    3c0e:	d101      	bne.n	3c14 <__sflush_r+0xa4>
    3c10:	682b      	ldr	r3, [r5, #0]
    3c12:	b903      	cbnz	r3, 3c16 <__sflush_r+0xa6>
    3c14:	6520      	str	r0, [r4, #80]	; 0x50
    3c16:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3c18:	602f      	str	r7, [r5, #0]
    3c1a:	2900      	cmp	r1, #0
    3c1c:	d0d2      	beq.n	3bc4 <__sflush_r+0x54>
    3c1e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    3c22:	4299      	cmp	r1, r3
    3c24:	d002      	beq.n	3c2c <__sflush_r+0xbc>
    3c26:	4628      	mov	r0, r5
    3c28:	f000 fa12 	bl	4050 <_free_r>
    3c2c:	2000      	movs	r0, #0
    3c2e:	6320      	str	r0, [r4, #48]	; 0x30
    3c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3c38:	81a2      	strh	r2, [r4, #12]
    3c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c3e:	690e      	ldr	r6, [r1, #16]
    3c40:	2e00      	cmp	r6, #0
    3c42:	d0bf      	beq.n	3bc4 <__sflush_r+0x54>
    3c44:	079b      	lsls	r3, r3, #30
    3c46:	680a      	ldr	r2, [r1, #0]
    3c48:	bf08      	it	eq
    3c4a:	694b      	ldreq	r3, [r1, #20]
    3c4c:	600e      	str	r6, [r1, #0]
    3c4e:	bf18      	it	ne
    3c50:	2300      	movne	r3, #0
    3c52:	ebc6 0802 	rsb	r8, r6, r2
    3c56:	608b      	str	r3, [r1, #8]
    3c58:	e012      	b.n	3c80 <__sflush_r+0x110>
    3c5a:	89a3      	ldrh	r3, [r4, #12]
    3c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3c60:	81a3      	strh	r3, [r4, #12]
    3c62:	f04f 30ff 	mov.w	r0, #4294967295
    3c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    3c6c:	69e1      	ldr	r1, [r4, #28]
    3c6e:	4628      	mov	r0, r5
    3c70:	4632      	mov	r2, r6
    3c72:	4643      	mov	r3, r8
    3c74:	47b8      	blx	r7
    3c76:	2800      	cmp	r0, #0
    3c78:	ddef      	ble.n	3c5a <__sflush_r+0xea>
    3c7a:	4406      	add	r6, r0
    3c7c:	ebc0 0808 	rsb	r8, r0, r8
    3c80:	f1b8 0f00 	cmp.w	r8, #0
    3c84:	dcf1      	bgt.n	3c6a <__sflush_r+0xfa>
    3c86:	e79d      	b.n	3bc4 <__sflush_r+0x54>

00003c88 <_fflush_r>:
    3c88:	b538      	push	{r3, r4, r5, lr}
    3c8a:	460c      	mov	r4, r1
    3c8c:	4605      	mov	r5, r0
    3c8e:	b118      	cbz	r0, 3c98 <_fflush_r+0x10>
    3c90:	6b83      	ldr	r3, [r0, #56]	; 0x38
    3c92:	b90b      	cbnz	r3, 3c98 <_fflush_r+0x10>
    3c94:	f000 f842 	bl	3d1c <__sinit>
    3c98:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    3c9c:	b128      	cbz	r0, 3caa <_fflush_r+0x22>
    3c9e:	4628      	mov	r0, r5
    3ca0:	4621      	mov	r1, r4
    3ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3ca6:	f7ff bf63 	b.w	3b70 <__sflush_r>
    3caa:	bd38      	pop	{r3, r4, r5, pc}

00003cac <fflush>:
    3cac:	4601      	mov	r1, r0
    3cae:	b920      	cbnz	r0, 3cba <fflush+0xe>
    3cb0:	4b04      	ldr	r3, [pc, #16]	; (3cc4 <fflush+0x18>)
    3cb2:	4905      	ldr	r1, [pc, #20]	; (3cc8 <fflush+0x1c>)
    3cb4:	6818      	ldr	r0, [r3, #0]
    3cb6:	f000 bbeb 	b.w	4490 <_fwalk_reent>
    3cba:	4b04      	ldr	r3, [pc, #16]	; (3ccc <fflush+0x20>)
    3cbc:	6818      	ldr	r0, [r3, #0]
    3cbe:	f7ff bfe3 	b.w	3c88 <_fflush_r>
    3cc2:	bf00      	nop
    3cc4:	0000588c 	.word	0x0000588c
    3cc8:	00003c89 	.word	0x00003c89
    3ccc:	20000040 	.word	0x20000040

00003cd0 <__fp_lock>:
    3cd0:	2000      	movs	r0, #0
    3cd2:	4770      	bx	lr

00003cd4 <__fp_unlock>:
    3cd4:	2000      	movs	r0, #0
    3cd6:	4770      	bx	lr

00003cd8 <_cleanup_r>:
    3cd8:	4901      	ldr	r1, [pc, #4]	; (3ce0 <_cleanup_r+0x8>)
    3cda:	f000 bbbd 	b.w	4458 <_fwalk>
    3cde:	bf00      	nop
    3ce0:	00005161 	.word	0x00005161

00003ce4 <__sfmoreglue>:
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	1e4b      	subs	r3, r1, #1
    3ce8:	2568      	movs	r5, #104	; 0x68
    3cea:	435d      	muls	r5, r3
    3cec:	460e      	mov	r6, r1
    3cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
    3cf2:	f000 fca1 	bl	4638 <_malloc_r>
    3cf6:	4604      	mov	r4, r0
    3cf8:	b140      	cbz	r0, 3d0c <__sfmoreglue+0x28>
    3cfa:	2100      	movs	r1, #0
    3cfc:	e880 0042 	stmia.w	r0, {r1, r6}
    3d00:	300c      	adds	r0, #12
    3d02:	60a0      	str	r0, [r4, #8]
    3d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
    3d08:	f7ff f97f 	bl	300a <memset>
    3d0c:	4620      	mov	r0, r4
    3d0e:	bd70      	pop	{r4, r5, r6, pc}

00003d10 <_cleanup>:
    3d10:	4b01      	ldr	r3, [pc, #4]	; (3d18 <_cleanup+0x8>)
    3d12:	6818      	ldr	r0, [r3, #0]
    3d14:	f7ff bfe0 	b.w	3cd8 <_cleanup_r>
    3d18:	0000588c 	.word	0x0000588c

00003d1c <__sinit>:
    3d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d20:	6b84      	ldr	r4, [r0, #56]	; 0x38
    3d22:	4606      	mov	r6, r0
    3d24:	2c00      	cmp	r4, #0
    3d26:	d162      	bne.n	3dee <__sinit+0xd2>
    3d28:	4b32      	ldr	r3, [pc, #200]	; (3df4 <__sinit+0xd8>)
    3d2a:	63c3      	str	r3, [r0, #60]	; 0x3c
    3d2c:	2303      	movs	r3, #3
    3d2e:	6845      	ldr	r5, [r0, #4]
    3d30:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
    3d34:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
    3d38:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
    3d3c:	2304      	movs	r3, #4
    3d3e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
    3d42:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 3dfc <__sinit+0xe0>
    3d46:	81ab      	strh	r3, [r5, #12]
    3d48:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3e00 <__sinit+0xe4>
    3d4c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3e04 <__sinit+0xe8>
    3d50:	4f29      	ldr	r7, [pc, #164]	; (3df8 <__sinit+0xdc>)
    3d52:	602c      	str	r4, [r5, #0]
    3d54:	606c      	str	r4, [r5, #4]
    3d56:	60ac      	str	r4, [r5, #8]
    3d58:	666c      	str	r4, [r5, #100]	; 0x64
    3d5a:	81ec      	strh	r4, [r5, #14]
    3d5c:	612c      	str	r4, [r5, #16]
    3d5e:	616c      	str	r4, [r5, #20]
    3d60:	61ac      	str	r4, [r5, #24]
    3d62:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    3d66:	4621      	mov	r1, r4
    3d68:	2208      	movs	r2, #8
    3d6a:	f7ff f94e 	bl	300a <memset>
    3d6e:	61ed      	str	r5, [r5, #28]
    3d70:	f8c5 a020 	str.w	sl, [r5, #32]
    3d74:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    3d78:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    3d7c:	62ef      	str	r7, [r5, #44]	; 0x2c
    3d7e:	68b5      	ldr	r5, [r6, #8]
    3d80:	2309      	movs	r3, #9
    3d82:	f04f 0b01 	mov.w	fp, #1
    3d86:	81ab      	strh	r3, [r5, #12]
    3d88:	602c      	str	r4, [r5, #0]
    3d8a:	606c      	str	r4, [r5, #4]
    3d8c:	60ac      	str	r4, [r5, #8]
    3d8e:	666c      	str	r4, [r5, #100]	; 0x64
    3d90:	f8a5 b00e 	strh.w	fp, [r5, #14]
    3d94:	612c      	str	r4, [r5, #16]
    3d96:	616c      	str	r4, [r5, #20]
    3d98:	61ac      	str	r4, [r5, #24]
    3d9a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    3d9e:	4621      	mov	r1, r4
    3da0:	2208      	movs	r2, #8
    3da2:	f7ff f932 	bl	300a <memset>
    3da6:	61ed      	str	r5, [r5, #28]
    3da8:	f8c5 a020 	str.w	sl, [r5, #32]
    3dac:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    3db0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    3db4:	62ef      	str	r7, [r5, #44]	; 0x2c
    3db6:	68f5      	ldr	r5, [r6, #12]
    3db8:	2312      	movs	r3, #18
    3dba:	81ab      	strh	r3, [r5, #12]
    3dbc:	2302      	movs	r3, #2
    3dbe:	602c      	str	r4, [r5, #0]
    3dc0:	606c      	str	r4, [r5, #4]
    3dc2:	60ac      	str	r4, [r5, #8]
    3dc4:	666c      	str	r4, [r5, #100]	; 0x64
    3dc6:	81eb      	strh	r3, [r5, #14]
    3dc8:	612c      	str	r4, [r5, #16]
    3dca:	616c      	str	r4, [r5, #20]
    3dcc:	61ac      	str	r4, [r5, #24]
    3dce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    3dd2:	4621      	mov	r1, r4
    3dd4:	2208      	movs	r2, #8
    3dd6:	f7ff f918 	bl	300a <memset>
    3dda:	61ed      	str	r5, [r5, #28]
    3ddc:	f8c5 a020 	str.w	sl, [r5, #32]
    3de0:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    3de4:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
    3de8:	62ef      	str	r7, [r5, #44]	; 0x2c
    3dea:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
    3dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3df2:	bf00      	nop
    3df4:	00003cd9 	.word	0x00003cd9
    3df8:	00004e97 	.word	0x00004e97
    3dfc:	00004e15 	.word	0x00004e15
    3e00:	00004e3b 	.word	0x00004e3b
    3e04:	00004e73 	.word	0x00004e73

00003e08 <__sfp>:
    3e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e0a:	4b1c      	ldr	r3, [pc, #112]	; (3e7c <__sfp+0x74>)
    3e0c:	681e      	ldr	r6, [r3, #0]
    3e0e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3e10:	4607      	mov	r7, r0
    3e12:	b913      	cbnz	r3, 3e1a <__sfp+0x12>
    3e14:	4630      	mov	r0, r6
    3e16:	f7ff ff81 	bl	3d1c <__sinit>
    3e1a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
    3e1e:	68b4      	ldr	r4, [r6, #8]
    3e20:	6873      	ldr	r3, [r6, #4]
    3e22:	3b01      	subs	r3, #1
    3e24:	d404      	bmi.n	3e30 <__sfp+0x28>
    3e26:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    3e2a:	b175      	cbz	r5, 3e4a <__sfp+0x42>
    3e2c:	3468      	adds	r4, #104	; 0x68
    3e2e:	e7f8      	b.n	3e22 <__sfp+0x1a>
    3e30:	6833      	ldr	r3, [r6, #0]
    3e32:	b92b      	cbnz	r3, 3e40 <__sfp+0x38>
    3e34:	4638      	mov	r0, r7
    3e36:	2104      	movs	r1, #4
    3e38:	f7ff ff54 	bl	3ce4 <__sfmoreglue>
    3e3c:	6030      	str	r0, [r6, #0]
    3e3e:	b108      	cbz	r0, 3e44 <__sfp+0x3c>
    3e40:	6836      	ldr	r6, [r6, #0]
    3e42:	e7ec      	b.n	3e1e <__sfp+0x16>
    3e44:	230c      	movs	r3, #12
    3e46:	603b      	str	r3, [r7, #0]
    3e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3e4e:	81e3      	strh	r3, [r4, #14]
    3e50:	2301      	movs	r3, #1
    3e52:	81a3      	strh	r3, [r4, #12]
    3e54:	6665      	str	r5, [r4, #100]	; 0x64
    3e56:	6025      	str	r5, [r4, #0]
    3e58:	60a5      	str	r5, [r4, #8]
    3e5a:	6065      	str	r5, [r4, #4]
    3e5c:	6125      	str	r5, [r4, #16]
    3e5e:	6165      	str	r5, [r4, #20]
    3e60:	61a5      	str	r5, [r4, #24]
    3e62:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3e66:	4629      	mov	r1, r5
    3e68:	2208      	movs	r2, #8
    3e6a:	f7ff f8ce 	bl	300a <memset>
    3e6e:	6325      	str	r5, [r4, #48]	; 0x30
    3e70:	6365      	str	r5, [r4, #52]	; 0x34
    3e72:	6465      	str	r5, [r4, #68]	; 0x44
    3e74:	64a5      	str	r5, [r4, #72]	; 0x48
    3e76:	4620      	mov	r0, r4
    3e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e7a:	bf00      	nop
    3e7c:	0000588c 	.word	0x0000588c

00003e80 <__sfp_lock_acquire>:
    3e80:	4770      	bx	lr

00003e82 <__sfp_lock_release>:
    3e82:	4770      	bx	lr

00003e84 <__sinit_lock_acquire>:
    3e84:	4770      	bx	lr

00003e86 <__sinit_lock_release>:
    3e86:	4770      	bx	lr

00003e88 <__fp_lock_all>:
    3e88:	4b02      	ldr	r3, [pc, #8]	; (3e94 <__fp_lock_all+0xc>)
    3e8a:	4903      	ldr	r1, [pc, #12]	; (3e98 <__fp_lock_all+0x10>)
    3e8c:	6818      	ldr	r0, [r3, #0]
    3e8e:	f000 bae3 	b.w	4458 <_fwalk>
    3e92:	bf00      	nop
    3e94:	20000040 	.word	0x20000040
    3e98:	00003cd1 	.word	0x00003cd1

00003e9c <__fp_unlock_all>:
    3e9c:	4b02      	ldr	r3, [pc, #8]	; (3ea8 <__fp_unlock_all+0xc>)
    3e9e:	4903      	ldr	r1, [pc, #12]	; (3eac <__fp_unlock_all+0x10>)
    3ea0:	6818      	ldr	r0, [r3, #0]
    3ea2:	f000 bad9 	b.w	4458 <_fwalk>
    3ea6:	bf00      	nop
    3ea8:	20000040 	.word	0x20000040
    3eac:	00003cd5 	.word	0x00003cd5

00003eb0 <__libc_fini_array>:
    3eb0:	b538      	push	{r3, r4, r5, lr}
    3eb2:	4d08      	ldr	r5, [pc, #32]	; (3ed4 <__libc_fini_array+0x24>)
    3eb4:	4c08      	ldr	r4, [pc, #32]	; (3ed8 <__libc_fini_array+0x28>)
    3eb6:	1b64      	subs	r4, r4, r5
    3eb8:	10a4      	asrs	r4, r4, #2
    3eba:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    3ebe:	b124      	cbz	r4, 3eca <__libc_fini_array+0x1a>
    3ec0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    3ec4:	3c01      	subs	r4, #1
    3ec6:	4798      	blx	r3
    3ec8:	e7f9      	b.n	3ebe <__libc_fini_array+0xe>
    3eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3ece:	f001 bd11 	b.w	58f4 <_fini>
    3ed2:	bf00      	nop
    3ed4:	00005900 	.word	0x00005900
    3ed8:	00005904 	.word	0x00005904

00003edc <_fputwc_r>:
    3edc:	8993      	ldrh	r3, [r2, #12]
    3ede:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3ee2:	460e      	mov	r6, r1
    3ee4:	0499      	lsls	r1, r3, #18
    3ee6:	4680      	mov	r8, r0
    3ee8:	4614      	mov	r4, r2
    3eea:	d406      	bmi.n	3efa <_fputwc_r+0x1e>
    3eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3ef0:	8193      	strh	r3, [r2, #12]
    3ef2:	6e53      	ldr	r3, [r2, #100]	; 0x64
    3ef4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3ef8:	6653      	str	r3, [r2, #100]	; 0x64
    3efa:	f000 fb0b 	bl	4514 <__locale_mb_cur_max>
    3efe:	2801      	cmp	r0, #1
    3f00:	d106      	bne.n	3f10 <_fputwc_r+0x34>
    3f02:	1e73      	subs	r3, r6, #1
    3f04:	2bfe      	cmp	r3, #254	; 0xfe
    3f06:	d803      	bhi.n	3f10 <_fputwc_r+0x34>
    3f08:	f88d 6004 	strb.w	r6, [sp, #4]
    3f0c:	4607      	mov	r7, r0
    3f0e:	e00e      	b.n	3f2e <_fputwc_r+0x52>
    3f10:	4632      	mov	r2, r6
    3f12:	4640      	mov	r0, r8
    3f14:	a901      	add	r1, sp, #4
    3f16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    3f1a:	f001 f81d 	bl	4f58 <_wcrtomb_r>
    3f1e:	1c42      	adds	r2, r0, #1
    3f20:	4607      	mov	r7, r0
    3f22:	d104      	bne.n	3f2e <_fputwc_r+0x52>
    3f24:	89a3      	ldrh	r3, [r4, #12]
    3f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f2a:	81a3      	strh	r3, [r4, #12]
    3f2c:	e02b      	b.n	3f86 <_fputwc_r+0xaa>
    3f2e:	2500      	movs	r5, #0
    3f30:	42bd      	cmp	r5, r7
    3f32:	d024      	beq.n	3f7e <_fputwc_r+0xa2>
    3f34:	68a2      	ldr	r2, [r4, #8]
    3f36:	3a01      	subs	r2, #1
    3f38:	2a00      	cmp	r2, #0
    3f3a:	60a2      	str	r2, [r4, #8]
    3f3c:	ab01      	add	r3, sp, #4
    3f3e:	da16      	bge.n	3f6e <_fputwc_r+0x92>
    3f40:	69a1      	ldr	r1, [r4, #24]
    3f42:	428a      	cmp	r2, r1
    3f44:	db08      	blt.n	3f58 <_fputwc_r+0x7c>
    3f46:	6822      	ldr	r2, [r4, #0]
    3f48:	5d5b      	ldrb	r3, [r3, r5]
    3f4a:	7013      	strb	r3, [r2, #0]
    3f4c:	6823      	ldr	r3, [r4, #0]
    3f4e:	7819      	ldrb	r1, [r3, #0]
    3f50:	290a      	cmp	r1, #10
    3f52:	d110      	bne.n	3f76 <_fputwc_r+0x9a>
    3f54:	4640      	mov	r0, r8
    3f56:	e001      	b.n	3f5c <_fputwc_r+0x80>
    3f58:	5d59      	ldrb	r1, [r3, r5]
    3f5a:	4640      	mov	r0, r8
    3f5c:	4622      	mov	r2, r4
    3f5e:	f000 ffa9 	bl	4eb4 <__swbuf_r>
    3f62:	f1b0 33ff 	subs.w	r3, r0, #4294967295
    3f66:	4258      	negs	r0, r3
    3f68:	4158      	adcs	r0, r3
    3f6a:	b130      	cbz	r0, 3f7a <_fputwc_r+0x9e>
    3f6c:	e009      	b.n	3f82 <_fputwc_r+0xa6>
    3f6e:	6822      	ldr	r2, [r4, #0]
    3f70:	5d5b      	ldrb	r3, [r3, r5]
    3f72:	7013      	strb	r3, [r2, #0]
    3f74:	6823      	ldr	r3, [r4, #0]
    3f76:	3301      	adds	r3, #1
    3f78:	6023      	str	r3, [r4, #0]
    3f7a:	3501      	adds	r5, #1
    3f7c:	e7d8      	b.n	3f30 <_fputwc_r+0x54>
    3f7e:	4630      	mov	r0, r6
    3f80:	e001      	b.n	3f86 <_fputwc_r+0xaa>
    3f82:	f04f 30ff 	mov.w	r0, #4294967295
    3f86:	b002      	add	sp, #8
    3f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003f8c <fputwc>:
    3f8c:	4b08      	ldr	r3, [pc, #32]	; (3fb0 <fputwc+0x24>)
    3f8e:	b570      	push	{r4, r5, r6, lr}
    3f90:	681c      	ldr	r4, [r3, #0]
    3f92:	4606      	mov	r6, r0
    3f94:	460d      	mov	r5, r1
    3f96:	b124      	cbz	r4, 3fa2 <fputwc+0x16>
    3f98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3f9a:	b913      	cbnz	r3, 3fa2 <fputwc+0x16>
    3f9c:	4620      	mov	r0, r4
    3f9e:	f7ff febd 	bl	3d1c <__sinit>
    3fa2:	4620      	mov	r0, r4
    3fa4:	4631      	mov	r1, r6
    3fa6:	462a      	mov	r2, r5
    3fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3fac:	f7ff bf96 	b.w	3edc <_fputwc_r>
    3fb0:	20000040 	.word	0x20000040

00003fb4 <_malloc_trim_r>:
    3fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fb6:	4d23      	ldr	r5, [pc, #140]	; (4044 <_malloc_trim_r+0x90>)
    3fb8:	460e      	mov	r6, r1
    3fba:	4604      	mov	r4, r0
    3fbc:	f000 fd70 	bl	4aa0 <__malloc_lock>
    3fc0:	68ab      	ldr	r3, [r5, #8]
    3fc2:	685f      	ldr	r7, [r3, #4]
    3fc4:	f027 0703 	bic.w	r7, r7, #3
    3fc8:	1bbe      	subs	r6, r7, r6
    3fca:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
    3fce:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
    3fd2:	f026 060f 	bic.w	r6, r6, #15
    3fd6:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
    3fda:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    3fde:	da04      	bge.n	3fea <_malloc_trim_r+0x36>
    3fe0:	4620      	mov	r0, r4
    3fe2:	f000 fd5e 	bl	4aa2 <__malloc_unlock>
    3fe6:	2000      	movs	r0, #0
    3fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fea:	4620      	mov	r0, r4
    3fec:	2100      	movs	r1, #0
    3fee:	f000 ff01 	bl	4df4 <_sbrk_r>
    3ff2:	68ab      	ldr	r3, [r5, #8]
    3ff4:	443b      	add	r3, r7
    3ff6:	4298      	cmp	r0, r3
    3ff8:	d1f2      	bne.n	3fe0 <_malloc_trim_r+0x2c>
    3ffa:	4620      	mov	r0, r4
    3ffc:	4271      	negs	r1, r6
    3ffe:	f000 fef9 	bl	4df4 <_sbrk_r>
    4002:	3001      	adds	r0, #1
    4004:	d110      	bne.n	4028 <_malloc_trim_r+0x74>
    4006:	4620      	mov	r0, r4
    4008:	2100      	movs	r1, #0
    400a:	f000 fef3 	bl	4df4 <_sbrk_r>
    400e:	68ab      	ldr	r3, [r5, #8]
    4010:	1ac2      	subs	r2, r0, r3
    4012:	2a0f      	cmp	r2, #15
    4014:	dde4      	ble.n	3fe0 <_malloc_trim_r+0x2c>
    4016:	490c      	ldr	r1, [pc, #48]	; (4048 <_malloc_trim_r+0x94>)
    4018:	6809      	ldr	r1, [r1, #0]
    401a:	1a40      	subs	r0, r0, r1
    401c:	490b      	ldr	r1, [pc, #44]	; (404c <_malloc_trim_r+0x98>)
    401e:	f042 0201 	orr.w	r2, r2, #1
    4022:	6008      	str	r0, [r1, #0]
    4024:	605a      	str	r2, [r3, #4]
    4026:	e7db      	b.n	3fe0 <_malloc_trim_r+0x2c>
    4028:	68ab      	ldr	r3, [r5, #8]
    402a:	1bbf      	subs	r7, r7, r6
    402c:	f047 0701 	orr.w	r7, r7, #1
    4030:	605f      	str	r7, [r3, #4]
    4032:	4b06      	ldr	r3, [pc, #24]	; (404c <_malloc_trim_r+0x98>)
    4034:	681a      	ldr	r2, [r3, #0]
    4036:	4620      	mov	r0, r4
    4038:	1b96      	subs	r6, r2, r6
    403a:	601e      	str	r6, [r3, #0]
    403c:	f000 fd31 	bl	4aa2 <__malloc_unlock>
    4040:	2001      	movs	r0, #1
    4042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4044:	200004ec 	.word	0x200004ec
    4048:	200008f4 	.word	0x200008f4
    404c:	20000bf8 	.word	0x20000bf8

00004050 <_free_r>:
    4050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4052:	4606      	mov	r6, r0
    4054:	460d      	mov	r5, r1
    4056:	2900      	cmp	r1, #0
    4058:	f000 80a9 	beq.w	41ae <_free_r+0x15e>
    405c:	f000 fd20 	bl	4aa0 <__malloc_lock>
    4060:	f855 cc04 	ldr.w	ip, [r5, #-4]
    4064:	4c52      	ldr	r4, [pc, #328]	; (41b0 <_free_r+0x160>)
    4066:	f1a5 0308 	sub.w	r3, r5, #8
    406a:	f02c 0201 	bic.w	r2, ip, #1
    406e:	1898      	adds	r0, r3, r2
    4070:	68a1      	ldr	r1, [r4, #8]
    4072:	6847      	ldr	r7, [r0, #4]
    4074:	4288      	cmp	r0, r1
    4076:	f027 0703 	bic.w	r7, r7, #3
    407a:	f00c 0101 	and.w	r1, ip, #1
    407e:	d11b      	bne.n	40b8 <_free_r+0x68>
    4080:	443a      	add	r2, r7
    4082:	b939      	cbnz	r1, 4094 <_free_r+0x44>
    4084:	f855 1c08 	ldr.w	r1, [r5, #-8]
    4088:	1a5b      	subs	r3, r3, r1
    408a:	440a      	add	r2, r1
    408c:	6898      	ldr	r0, [r3, #8]
    408e:	68d9      	ldr	r1, [r3, #12]
    4090:	60c1      	str	r1, [r0, #12]
    4092:	6088      	str	r0, [r1, #8]
    4094:	f042 0101 	orr.w	r1, r2, #1
    4098:	6059      	str	r1, [r3, #4]
    409a:	60a3      	str	r3, [r4, #8]
    409c:	4b45      	ldr	r3, [pc, #276]	; (41b4 <_free_r+0x164>)
    409e:	681b      	ldr	r3, [r3, #0]
    40a0:	429a      	cmp	r2, r3
    40a2:	d304      	bcc.n	40ae <_free_r+0x5e>
    40a4:	4b44      	ldr	r3, [pc, #272]	; (41b8 <_free_r+0x168>)
    40a6:	4630      	mov	r0, r6
    40a8:	6819      	ldr	r1, [r3, #0]
    40aa:	f7ff ff83 	bl	3fb4 <_malloc_trim_r>
    40ae:	4630      	mov	r0, r6
    40b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    40b4:	f000 bcf5 	b.w	4aa2 <__malloc_unlock>
    40b8:	6047      	str	r7, [r0, #4]
    40ba:	b979      	cbnz	r1, 40dc <_free_r+0x8c>
    40bc:	f855 5c08 	ldr.w	r5, [r5, #-8]
    40c0:	1b5b      	subs	r3, r3, r5
    40c2:	442a      	add	r2, r5
    40c4:	689d      	ldr	r5, [r3, #8]
    40c6:	f104 0c08 	add.w	ip, r4, #8
    40ca:	4565      	cmp	r5, ip
    40cc:	d008      	beq.n	40e0 <_free_r+0x90>
    40ce:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    40d2:	f8c5 c00c 	str.w	ip, [r5, #12]
    40d6:	f8cc 5008 	str.w	r5, [ip, #8]
    40da:	e002      	b.n	40e2 <_free_r+0x92>
    40dc:	2100      	movs	r1, #0
    40de:	e000      	b.n	40e2 <_free_r+0x92>
    40e0:	2101      	movs	r1, #1
    40e2:	19c5      	adds	r5, r0, r7
    40e4:	686d      	ldr	r5, [r5, #4]
    40e6:	07ed      	lsls	r5, r5, #31
    40e8:	d40e      	bmi.n	4108 <_free_r+0xb8>
    40ea:	443a      	add	r2, r7
    40ec:	6885      	ldr	r5, [r0, #8]
    40ee:	b941      	cbnz	r1, 4102 <_free_r+0xb2>
    40f0:	4f32      	ldr	r7, [pc, #200]	; (41bc <_free_r+0x16c>)
    40f2:	42bd      	cmp	r5, r7
    40f4:	d105      	bne.n	4102 <_free_r+0xb2>
    40f6:	6163      	str	r3, [r4, #20]
    40f8:	6123      	str	r3, [r4, #16]
    40fa:	2101      	movs	r1, #1
    40fc:	60dd      	str	r5, [r3, #12]
    40fe:	609d      	str	r5, [r3, #8]
    4100:	e002      	b.n	4108 <_free_r+0xb8>
    4102:	68c0      	ldr	r0, [r0, #12]
    4104:	60e8      	str	r0, [r5, #12]
    4106:	6085      	str	r5, [r0, #8]
    4108:	f042 0001 	orr.w	r0, r2, #1
    410c:	6058      	str	r0, [r3, #4]
    410e:	509a      	str	r2, [r3, r2]
    4110:	2900      	cmp	r1, #0
    4112:	d1cc      	bne.n	40ae <_free_r+0x5e>
    4114:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4118:	d20e      	bcs.n	4138 <_free_r+0xe8>
    411a:	08d2      	lsrs	r2, r2, #3
    411c:	1091      	asrs	r1, r2, #2
    411e:	2001      	movs	r0, #1
    4120:	4088      	lsls	r0, r1
    4122:	6861      	ldr	r1, [r4, #4]
    4124:	4301      	orrs	r1, r0
    4126:	6061      	str	r1, [r4, #4]
    4128:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    412c:	68a2      	ldr	r2, [r4, #8]
    412e:	609a      	str	r2, [r3, #8]
    4130:	60dc      	str	r4, [r3, #12]
    4132:	60a3      	str	r3, [r4, #8]
    4134:	60d3      	str	r3, [r2, #12]
    4136:	e7ba      	b.n	40ae <_free_r+0x5e>
    4138:	0a51      	lsrs	r1, r2, #9
    413a:	2904      	cmp	r1, #4
    413c:	d802      	bhi.n	4144 <_free_r+0xf4>
    413e:	0991      	lsrs	r1, r2, #6
    4140:	3138      	adds	r1, #56	; 0x38
    4142:	e015      	b.n	4170 <_free_r+0x120>
    4144:	2914      	cmp	r1, #20
    4146:	d801      	bhi.n	414c <_free_r+0xfc>
    4148:	315b      	adds	r1, #91	; 0x5b
    414a:	e011      	b.n	4170 <_free_r+0x120>
    414c:	2954      	cmp	r1, #84	; 0x54
    414e:	d802      	bhi.n	4156 <_free_r+0x106>
    4150:	0b11      	lsrs	r1, r2, #12
    4152:	316e      	adds	r1, #110	; 0x6e
    4154:	e00c      	b.n	4170 <_free_r+0x120>
    4156:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
    415a:	d802      	bhi.n	4162 <_free_r+0x112>
    415c:	0bd1      	lsrs	r1, r2, #15
    415e:	3177      	adds	r1, #119	; 0x77
    4160:	e006      	b.n	4170 <_free_r+0x120>
    4162:	f240 5054 	movw	r0, #1364	; 0x554
    4166:	4281      	cmp	r1, r0
    4168:	bf9a      	itte	ls
    416a:	0c91      	lsrls	r1, r2, #18
    416c:	317c      	addls	r1, #124	; 0x7c
    416e:	217e      	movhi	r1, #126	; 0x7e
    4170:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    4174:	480e      	ldr	r0, [pc, #56]	; (41b0 <_free_r+0x160>)
    4176:	68a5      	ldr	r5, [r4, #8]
    4178:	42a5      	cmp	r5, r4
    417a:	d001      	beq.n	4180 <_free_r+0x130>
    417c:	4629      	mov	r1, r5
    417e:	e00b      	b.n	4198 <_free_r+0x148>
    4180:	2201      	movs	r2, #1
    4182:	1089      	asrs	r1, r1, #2
    4184:	fa02 f101 	lsl.w	r1, r2, r1
    4188:	6842      	ldr	r2, [r0, #4]
    418a:	430a      	orrs	r2, r1
    418c:	6042      	str	r2, [r0, #4]
    418e:	4629      	mov	r1, r5
    4190:	e008      	b.n	41a4 <_free_r+0x154>
    4192:	6889      	ldr	r1, [r1, #8]
    4194:	42a1      	cmp	r1, r4
    4196:	d004      	beq.n	41a2 <_free_r+0x152>
    4198:	6848      	ldr	r0, [r1, #4]
    419a:	f020 0003 	bic.w	r0, r0, #3
    419e:	4282      	cmp	r2, r0
    41a0:	d3f7      	bcc.n	4192 <_free_r+0x142>
    41a2:	68cd      	ldr	r5, [r1, #12]
    41a4:	60dd      	str	r5, [r3, #12]
    41a6:	6099      	str	r1, [r3, #8]
    41a8:	60ab      	str	r3, [r5, #8]
    41aa:	60cb      	str	r3, [r1, #12]
    41ac:	e77f      	b.n	40ae <_free_r+0x5e>
    41ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b0:	200004ec 	.word	0x200004ec
    41b4:	200008f8 	.word	0x200008f8
    41b8:	20000bf4 	.word	0x20000bf4
    41bc:	200004f4 	.word	0x200004f4

000041c0 <__sfvwrite_r>:
    41c0:	6893      	ldr	r3, [r2, #8]
    41c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41c6:	4680      	mov	r8, r0
    41c8:	460c      	mov	r4, r1
    41ca:	4691      	mov	r9, r2
    41cc:	b90b      	cbnz	r3, 41d2 <__sfvwrite_r+0x12>
    41ce:	2000      	movs	r0, #0
    41d0:	e13c      	b.n	444c <__sfvwrite_r+0x28c>
    41d2:	898b      	ldrh	r3, [r1, #12]
    41d4:	0718      	lsls	r0, r3, #28
    41d6:	d50e      	bpl.n	41f6 <__sfvwrite_r+0x36>
    41d8:	690b      	ldr	r3, [r1, #16]
    41da:	b163      	cbz	r3, 41f6 <__sfvwrite_r+0x36>
    41dc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    41e0:	f8d9 6000 	ldr.w	r6, [r9]
    41e4:	f00a 0c02 	and.w	ip, sl, #2
    41e8:	fa1f f38c 	uxth.w	r3, ip
    41ec:	b333      	cbz	r3, 423c <__sfvwrite_r+0x7c>
    41ee:	f04f 0a00 	mov.w	sl, #0
    41f2:	4657      	mov	r7, sl
    41f4:	e01b      	b.n	422e <__sfvwrite_r+0x6e>
    41f6:	4640      	mov	r0, r8
    41f8:	4621      	mov	r1, r4
    41fa:	f7ff fc4f 	bl	3a9c <__swsetup_r>
    41fe:	2800      	cmp	r0, #0
    4200:	d0ec      	beq.n	41dc <__sfvwrite_r+0x1c>
    4202:	e121      	b.n	4448 <__sfvwrite_r+0x288>
    4204:	4b93      	ldr	r3, [pc, #588]	; (4454 <__sfvwrite_r+0x294>)
    4206:	69e1      	ldr	r1, [r4, #28]
    4208:	6a65      	ldr	r5, [r4, #36]	; 0x24
    420a:	429f      	cmp	r7, r3
    420c:	bf38      	it	cc
    420e:	463b      	movcc	r3, r7
    4210:	4640      	mov	r0, r8
    4212:	4652      	mov	r2, sl
    4214:	47a8      	blx	r5
    4216:	2800      	cmp	r0, #0
    4218:	f340 8112 	ble.w	4440 <__sfvwrite_r+0x280>
    421c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    4220:	4482      	add	sl, r0
    4222:	1a3f      	subs	r7, r7, r0
    4224:	1a18      	subs	r0, r3, r0
    4226:	f8c9 0008 	str.w	r0, [r9, #8]
    422a:	2800      	cmp	r0, #0
    422c:	d0cf      	beq.n	41ce <__sfvwrite_r+0xe>
    422e:	2f00      	cmp	r7, #0
    4230:	d1e8      	bne.n	4204 <__sfvwrite_r+0x44>
    4232:	f8d6 a000 	ldr.w	sl, [r6]
    4236:	6877      	ldr	r7, [r6, #4]
    4238:	3608      	adds	r6, #8
    423a:	e7f8      	b.n	422e <__sfvwrite_r+0x6e>
    423c:	f01a 0a01 	ands.w	sl, sl, #1
    4240:	d004      	beq.n	424c <__sfvwrite_r+0x8c>
    4242:	469b      	mov	fp, r3
    4244:	9301      	str	r3, [sp, #4]
    4246:	461f      	mov	r7, r3
    4248:	469a      	mov	sl, r3
    424a:	e0bf      	b.n	43cc <__sfvwrite_r+0x20c>
    424c:	4655      	mov	r5, sl
    424e:	b925      	cbnz	r5, 425a <__sfvwrite_r+0x9a>
    4250:	f8d6 a000 	ldr.w	sl, [r6]
    4254:	6875      	ldr	r5, [r6, #4]
    4256:	3608      	adds	r6, #8
    4258:	e7f9      	b.n	424e <__sfvwrite_r+0x8e>
    425a:	89a2      	ldrh	r2, [r4, #12]
    425c:	68a7      	ldr	r7, [r4, #8]
    425e:	0591      	lsls	r1, r2, #22
    4260:	d552      	bpl.n	4308 <__sfvwrite_r+0x148>
    4262:	42bd      	cmp	r5, r7
    4264:	d342      	bcc.n	42ec <__sfvwrite_r+0x12c>
    4266:	f412 6f90 	tst.w	r2, #1152	; 0x480
    426a:	d03d      	beq.n	42e8 <__sfvwrite_r+0x128>
    426c:	6921      	ldr	r1, [r4, #16]
    426e:	6823      	ldr	r3, [r4, #0]
    4270:	1a5b      	subs	r3, r3, r1
    4272:	9301      	str	r3, [sp, #4]
    4274:	6963      	ldr	r3, [r4, #20]
    4276:	2002      	movs	r0, #2
    4278:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    427c:	fb93 fbf0 	sdiv	fp, r3, r0
    4280:	9b01      	ldr	r3, [sp, #4]
    4282:	1c58      	adds	r0, r3, #1
    4284:	4428      	add	r0, r5
    4286:	4583      	cmp	fp, r0
    4288:	bf38      	it	cc
    428a:	4683      	movcc	fp, r0
    428c:	0553      	lsls	r3, r2, #21
    428e:	4640      	mov	r0, r8
    4290:	d50f      	bpl.n	42b2 <__sfvwrite_r+0xf2>
    4292:	4659      	mov	r1, fp
    4294:	f000 f9d0 	bl	4638 <_malloc_r>
    4298:	4607      	mov	r7, r0
    429a:	b1b8      	cbz	r0, 42cc <__sfvwrite_r+0x10c>
    429c:	9a01      	ldr	r2, [sp, #4]
    429e:	6921      	ldr	r1, [r4, #16]
    42a0:	f7fe feaa 	bl	2ff8 <memcpy>
    42a4:	89a2      	ldrh	r2, [r4, #12]
    42a6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    42aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    42ae:	81a2      	strh	r2, [r4, #12]
    42b0:	e010      	b.n	42d4 <__sfvwrite_r+0x114>
    42b2:	465a      	mov	r2, fp
    42b4:	f000 fbf6 	bl	4aa4 <_realloc_r>
    42b8:	4607      	mov	r7, r0
    42ba:	b958      	cbnz	r0, 42d4 <__sfvwrite_r+0x114>
    42bc:	4640      	mov	r0, r8
    42be:	6921      	ldr	r1, [r4, #16]
    42c0:	f7ff fec6 	bl	4050 <_free_r>
    42c4:	89a3      	ldrh	r3, [r4, #12]
    42c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    42ca:	81a3      	strh	r3, [r4, #12]
    42cc:	230c      	movs	r3, #12
    42ce:	f8c8 3000 	str.w	r3, [r8]
    42d2:	e0b5      	b.n	4440 <__sfvwrite_r+0x280>
    42d4:	9b01      	ldr	r3, [sp, #4]
    42d6:	6127      	str	r7, [r4, #16]
    42d8:	441f      	add	r7, r3
    42da:	ebc3 030b 	rsb	r3, r3, fp
    42de:	6027      	str	r7, [r4, #0]
    42e0:	f8c4 b014 	str.w	fp, [r4, #20]
    42e4:	462f      	mov	r7, r5
    42e6:	60a3      	str	r3, [r4, #8]
    42e8:	42bd      	cmp	r5, r7
    42ea:	d200      	bcs.n	42ee <__sfvwrite_r+0x12e>
    42ec:	462f      	mov	r7, r5
    42ee:	463a      	mov	r2, r7
    42f0:	6820      	ldr	r0, [r4, #0]
    42f2:	4651      	mov	r1, sl
    42f4:	f000 fbb9 	bl	4a6a <memmove>
    42f8:	68a3      	ldr	r3, [r4, #8]
    42fa:	1bdb      	subs	r3, r3, r7
    42fc:	60a3      	str	r3, [r4, #8]
    42fe:	6823      	ldr	r3, [r4, #0]
    4300:	441f      	add	r7, r3
    4302:	6027      	str	r7, [r4, #0]
    4304:	462f      	mov	r7, r5
    4306:	e02a      	b.n	435e <__sfvwrite_r+0x19e>
    4308:	6820      	ldr	r0, [r4, #0]
    430a:	6923      	ldr	r3, [r4, #16]
    430c:	4298      	cmp	r0, r3
    430e:	d802      	bhi.n	4316 <__sfvwrite_r+0x156>
    4310:	6963      	ldr	r3, [r4, #20]
    4312:	429d      	cmp	r5, r3
    4314:	d213      	bcs.n	433e <__sfvwrite_r+0x17e>
    4316:	42bd      	cmp	r5, r7
    4318:	bf38      	it	cc
    431a:	462f      	movcc	r7, r5
    431c:	463a      	mov	r2, r7
    431e:	4651      	mov	r1, sl
    4320:	f000 fba3 	bl	4a6a <memmove>
    4324:	68a3      	ldr	r3, [r4, #8]
    4326:	6822      	ldr	r2, [r4, #0]
    4328:	1bdb      	subs	r3, r3, r7
    432a:	443a      	add	r2, r7
    432c:	60a3      	str	r3, [r4, #8]
    432e:	6022      	str	r2, [r4, #0]
    4330:	b9ab      	cbnz	r3, 435e <__sfvwrite_r+0x19e>
    4332:	4640      	mov	r0, r8
    4334:	4621      	mov	r1, r4
    4336:	f7ff fca7 	bl	3c88 <_fflush_r>
    433a:	b180      	cbz	r0, 435e <__sfvwrite_r+0x19e>
    433c:	e080      	b.n	4440 <__sfvwrite_r+0x280>
    433e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    4342:	4575      	cmp	r5, lr
    4344:	bf38      	it	cc
    4346:	46ae      	movcc	lr, r5
    4348:	fb9e fef3 	sdiv	lr, lr, r3
    434c:	6a67      	ldr	r7, [r4, #36]	; 0x24
    434e:	69e1      	ldr	r1, [r4, #28]
    4350:	4640      	mov	r0, r8
    4352:	4652      	mov	r2, sl
    4354:	fb03 f30e 	mul.w	r3, r3, lr
    4358:	47b8      	blx	r7
    435a:	1e07      	subs	r7, r0, #0
    435c:	dd70      	ble.n	4440 <__sfvwrite_r+0x280>
    435e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    4362:	44ba      	add	sl, r7
    4364:	1bed      	subs	r5, r5, r7
    4366:	1bdf      	subs	r7, r3, r7
    4368:	f8c9 7008 	str.w	r7, [r9, #8]
    436c:	2f00      	cmp	r7, #0
    436e:	f47f af6e 	bne.w	424e <__sfvwrite_r+0x8e>
    4372:	e72c      	b.n	41ce <__sfvwrite_r+0xe>
    4374:	9d01      	ldr	r5, [sp, #4]
    4376:	2d00      	cmp	r5, #0
    4378:	d031      	beq.n	43de <__sfvwrite_r+0x21e>
    437a:	6820      	ldr	r0, [r4, #0]
    437c:	6922      	ldr	r2, [r4, #16]
    437e:	68a5      	ldr	r5, [r4, #8]
    4380:	f8d4 e014 	ldr.w	lr, [r4, #20]
    4384:	45d3      	cmp	fp, sl
    4386:	bf34      	ite	cc
    4388:	465b      	movcc	r3, fp
    438a:	4653      	movcs	r3, sl
    438c:	4290      	cmp	r0, r2
    438e:	d936      	bls.n	43fe <__sfvwrite_r+0x23e>
    4390:	4475      	add	r5, lr
    4392:	42ab      	cmp	r3, r5
    4394:	dd33      	ble.n	43fe <__sfvwrite_r+0x23e>
    4396:	4639      	mov	r1, r7
    4398:	462a      	mov	r2, r5
    439a:	f000 fb66 	bl	4a6a <memmove>
    439e:	6823      	ldr	r3, [r4, #0]
    43a0:	442b      	add	r3, r5
    43a2:	6023      	str	r3, [r4, #0]
    43a4:	4640      	mov	r0, r8
    43a6:	4621      	mov	r1, r4
    43a8:	f7ff fc6e 	bl	3c88 <_fflush_r>
    43ac:	2800      	cmp	r0, #0
    43ae:	d147      	bne.n	4440 <__sfvwrite_r+0x280>
    43b0:	ebbb 0b05 	subs.w	fp, fp, r5
    43b4:	d03c      	beq.n	4430 <__sfvwrite_r+0x270>
    43b6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    43ba:	442f      	add	r7, r5
    43bc:	ebc5 0a0a 	rsb	sl, r5, sl
    43c0:	1b5d      	subs	r5, r3, r5
    43c2:	f8c9 5008 	str.w	r5, [r9, #8]
    43c6:	2d00      	cmp	r5, #0
    43c8:	f43f af01 	beq.w	41ce <__sfvwrite_r+0xe>
    43cc:	f1ba 0f00 	cmp.w	sl, #0
    43d0:	d1d0      	bne.n	4374 <__sfvwrite_r+0x1b4>
    43d2:	2500      	movs	r5, #0
    43d4:	e896 0480 	ldmia.w	r6, {r7, sl}
    43d8:	9501      	str	r5, [sp, #4]
    43da:	3608      	adds	r6, #8
    43dc:	e7f6      	b.n	43cc <__sfvwrite_r+0x20c>
    43de:	4638      	mov	r0, r7
    43e0:	210a      	movs	r1, #10
    43e2:	4652      	mov	r2, sl
    43e4:	f000 fb32 	bl	4a4c <memchr>
    43e8:	b120      	cbz	r0, 43f4 <__sfvwrite_r+0x234>
    43ea:	f100 0c01 	add.w	ip, r0, #1
    43ee:	ebc7 0b0c 	rsb	fp, r7, ip
    43f2:	e001      	b.n	43f8 <__sfvwrite_r+0x238>
    43f4:	f10a 0b01 	add.w	fp, sl, #1
    43f8:	2501      	movs	r5, #1
    43fa:	9501      	str	r5, [sp, #4]
    43fc:	e7bd      	b.n	437a <__sfvwrite_r+0x1ba>
    43fe:	4573      	cmp	r3, lr
    4400:	db08      	blt.n	4414 <__sfvwrite_r+0x254>
    4402:	6a65      	ldr	r5, [r4, #36]	; 0x24
    4404:	69e1      	ldr	r1, [r4, #28]
    4406:	4640      	mov	r0, r8
    4408:	463a      	mov	r2, r7
    440a:	4673      	mov	r3, lr
    440c:	47a8      	blx	r5
    440e:	1e05      	subs	r5, r0, #0
    4410:	dcce      	bgt.n	43b0 <__sfvwrite_r+0x1f0>
    4412:	e015      	b.n	4440 <__sfvwrite_r+0x280>
    4414:	461a      	mov	r2, r3
    4416:	4639      	mov	r1, r7
    4418:	9300      	str	r3, [sp, #0]
    441a:	f000 fb26 	bl	4a6a <memmove>
    441e:	9b00      	ldr	r3, [sp, #0]
    4420:	68a2      	ldr	r2, [r4, #8]
    4422:	1ad2      	subs	r2, r2, r3
    4424:	60a2      	str	r2, [r4, #8]
    4426:	6822      	ldr	r2, [r4, #0]
    4428:	441a      	add	r2, r3
    442a:	6022      	str	r2, [r4, #0]
    442c:	461d      	mov	r5, r3
    442e:	e7bf      	b.n	43b0 <__sfvwrite_r+0x1f0>
    4430:	4640      	mov	r0, r8
    4432:	4621      	mov	r1, r4
    4434:	f7ff fc28 	bl	3c88 <_fflush_r>
    4438:	b910      	cbnz	r0, 4440 <__sfvwrite_r+0x280>
    443a:	f8cd b004 	str.w	fp, [sp, #4]
    443e:	e7ba      	b.n	43b6 <__sfvwrite_r+0x1f6>
    4440:	89a3      	ldrh	r3, [r4, #12]
    4442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4446:	81a3      	strh	r3, [r4, #12]
    4448:	f04f 30ff 	mov.w	r0, #4294967295
    444c:	b003      	add	sp, #12
    444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4452:	bf00      	nop
    4454:	7ffffc00 	.word	0x7ffffc00

00004458 <_fwalk>:
    4458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    445c:	4688      	mov	r8, r1
    445e:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
    4462:	2600      	movs	r6, #0
    4464:	b18c      	cbz	r4, 448a <_fwalk+0x32>
    4466:	68a5      	ldr	r5, [r4, #8]
    4468:	6867      	ldr	r7, [r4, #4]
    446a:	3f01      	subs	r7, #1
    446c:	d40b      	bmi.n	4486 <_fwalk+0x2e>
    446e:	89ab      	ldrh	r3, [r5, #12]
    4470:	2b01      	cmp	r3, #1
    4472:	d906      	bls.n	4482 <_fwalk+0x2a>
    4474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    4478:	3301      	adds	r3, #1
    447a:	d002      	beq.n	4482 <_fwalk+0x2a>
    447c:	4628      	mov	r0, r5
    447e:	47c0      	blx	r8
    4480:	4306      	orrs	r6, r0
    4482:	3568      	adds	r5, #104	; 0x68
    4484:	e7f1      	b.n	446a <_fwalk+0x12>
    4486:	6824      	ldr	r4, [r4, #0]
    4488:	e7ec      	b.n	4464 <_fwalk+0xc>
    448a:	4630      	mov	r0, r6
    448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004490 <_fwalk_reent>:
    4490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4494:	4680      	mov	r8, r0
    4496:	4689      	mov	r9, r1
    4498:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
    449c:	2600      	movs	r6, #0
    449e:	b194      	cbz	r4, 44c6 <_fwalk_reent+0x36>
    44a0:	68a5      	ldr	r5, [r4, #8]
    44a2:	6867      	ldr	r7, [r4, #4]
    44a4:	3f01      	subs	r7, #1
    44a6:	d40c      	bmi.n	44c2 <_fwalk_reent+0x32>
    44a8:	89ab      	ldrh	r3, [r5, #12]
    44aa:	2b01      	cmp	r3, #1
    44ac:	d907      	bls.n	44be <_fwalk_reent+0x2e>
    44ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    44b2:	3301      	adds	r3, #1
    44b4:	d003      	beq.n	44be <_fwalk_reent+0x2e>
    44b6:	4640      	mov	r0, r8
    44b8:	4629      	mov	r1, r5
    44ba:	47c8      	blx	r9
    44bc:	4306      	orrs	r6, r0
    44be:	3568      	adds	r5, #104	; 0x68
    44c0:	e7f0      	b.n	44a4 <_fwalk_reent+0x14>
    44c2:	6824      	ldr	r4, [r4, #0]
    44c4:	e7eb      	b.n	449e <_fwalk_reent+0xe>
    44c6:	4630      	mov	r0, r6
    44c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000044cc <_setlocale_r>:
    44cc:	b510      	push	{r4, lr}
    44ce:	4614      	mov	r4, r2
    44d0:	b90a      	cbnz	r2, 44d6 <_setlocale_r+0xa>
    44d2:	480b      	ldr	r0, [pc, #44]	; (4500 <_setlocale_r+0x34>)
    44d4:	bd10      	pop	{r4, pc}
    44d6:	4610      	mov	r0, r2
    44d8:	490a      	ldr	r1, [pc, #40]	; (4504 <_setlocale_r+0x38>)
    44da:	f000 fce0 	bl	4e9e <strcmp>
    44de:	2800      	cmp	r0, #0
    44e0:	d0f7      	beq.n	44d2 <_setlocale_r+0x6>
    44e2:	4620      	mov	r0, r4
    44e4:	4906      	ldr	r1, [pc, #24]	; (4500 <_setlocale_r+0x34>)
    44e6:	f000 fcda 	bl	4e9e <strcmp>
    44ea:	2800      	cmp	r0, #0
    44ec:	d0f1      	beq.n	44d2 <_setlocale_r+0x6>
    44ee:	4620      	mov	r0, r4
    44f0:	4905      	ldr	r1, [pc, #20]	; (4508 <_setlocale_r+0x3c>)
    44f2:	f000 fcd4 	bl	4e9e <strcmp>
    44f6:	2800      	cmp	r0, #0
    44f8:	4801      	ldr	r0, [pc, #4]	; (4500 <_setlocale_r+0x34>)
    44fa:	bf18      	it	ne
    44fc:	2000      	movne	r0, #0
    44fe:	bd10      	pop	{r4, pc}
    4500:	00005890 	.word	0x00005890
    4504:	000058d6 	.word	0x000058d6
    4508:	00005893 	.word	0x00005893

0000450c <__locale_charset>:
    450c:	4800      	ldr	r0, [pc, #0]	; (4510 <__locale_charset+0x4>)
    450e:	4770      	bx	lr
    4510:	20000470 	.word	0x20000470

00004514 <__locale_mb_cur_max>:
    4514:	4b01      	ldr	r3, [pc, #4]	; (451c <__locale_mb_cur_max+0x8>)
    4516:	6a18      	ldr	r0, [r3, #32]
    4518:	4770      	bx	lr
    451a:	bf00      	nop
    451c:	20000470 	.word	0x20000470

00004520 <__locale_msgcharset>:
    4520:	4800      	ldr	r0, [pc, #0]	; (4524 <__locale_msgcharset+0x4>)
    4522:	4770      	bx	lr
    4524:	20000494 	.word	0x20000494

00004528 <__locale_cjk_lang>:
    4528:	2000      	movs	r0, #0
    452a:	4770      	bx	lr

0000452c <_localeconv_r>:
    452c:	4800      	ldr	r0, [pc, #0]	; (4530 <_localeconv_r+0x4>)
    452e:	4770      	bx	lr
    4530:	200004b4 	.word	0x200004b4

00004534 <setlocale>:
    4534:	460a      	mov	r2, r1
    4536:	4903      	ldr	r1, [pc, #12]	; (4544 <setlocale+0x10>)
    4538:	4603      	mov	r3, r0
    453a:	6808      	ldr	r0, [r1, #0]
    453c:	4619      	mov	r1, r3
    453e:	f7ff bfc5 	b.w	44cc <_setlocale_r>
    4542:	bf00      	nop
    4544:	20000040 	.word	0x20000040

00004548 <localeconv>:
    4548:	4800      	ldr	r0, [pc, #0]	; (454c <localeconv+0x4>)
    454a:	4770      	bx	lr
    454c:	200004b4 	.word	0x200004b4

00004550 <__smakebuf_r>:
    4550:	b5f0      	push	{r4, r5, r6, r7, lr}
    4552:	898b      	ldrh	r3, [r1, #12]
    4554:	079d      	lsls	r5, r3, #30
    4556:	b091      	sub	sp, #68	; 0x44
    4558:	4606      	mov	r6, r0
    455a:	460c      	mov	r4, r1
    455c:	d43a      	bmi.n	45d4 <__smakebuf_r+0x84>
    455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4562:	2900      	cmp	r1, #0
    4564:	da0b      	bge.n	457e <__smakebuf_r+0x2e>
    4566:	89a3      	ldrh	r3, [r4, #12]
    4568:	f013 0f80 	tst.w	r3, #128	; 0x80
    456c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    4570:	bf0c      	ite	eq
    4572:	f44f 6580 	moveq.w	r5, #1024	; 0x400
    4576:	2540      	movne	r5, #64	; 0x40
    4578:	81a3      	strh	r3, [r4, #12]
    457a:	2700      	movs	r7, #0
    457c:	e01f      	b.n	45be <__smakebuf_r+0x6e>
    457e:	aa01      	add	r2, sp, #4
    4580:	f000 fdf6 	bl	5170 <_fstat_r>
    4584:	2800      	cmp	r0, #0
    4586:	dbee      	blt.n	4566 <__smakebuf_r+0x16>
    4588:	9b02      	ldr	r3, [sp, #8]
    458a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    458e:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
    4592:	424f      	negs	r7, r1
    4594:	414f      	adcs	r7, r1
    4596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    459a:	89a3      	ldrh	r3, [r4, #12]
    459c:	d10a      	bne.n	45b4 <__smakebuf_r+0x64>
    459e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    45a0:	491b      	ldr	r1, [pc, #108]	; (4610 <__smakebuf_r+0xc0>)
    45a2:	428a      	cmp	r2, r1
    45a4:	d106      	bne.n	45b4 <__smakebuf_r+0x64>
    45a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    45aa:	f44f 6580 	mov.w	r5, #1024	; 0x400
    45ae:	81a3      	strh	r3, [r4, #12]
    45b0:	64e5      	str	r5, [r4, #76]	; 0x4c
    45b2:	e004      	b.n	45be <__smakebuf_r+0x6e>
    45b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    45b8:	81a3      	strh	r3, [r4, #12]
    45ba:	f44f 6580 	mov.w	r5, #1024	; 0x400
    45be:	4630      	mov	r0, r6
    45c0:	4629      	mov	r1, r5
    45c2:	f000 f839 	bl	4638 <_malloc_r>
    45c6:	b960      	cbnz	r0, 45e2 <__smakebuf_r+0x92>
    45c8:	89a3      	ldrh	r3, [r4, #12]
    45ca:	059a      	lsls	r2, r3, #22
    45cc:	d41d      	bmi.n	460a <__smakebuf_r+0xba>
    45ce:	f043 0302 	orr.w	r3, r3, #2
    45d2:	81a3      	strh	r3, [r4, #12]
    45d4:	f104 0343 	add.w	r3, r4, #67	; 0x43
    45d8:	6023      	str	r3, [r4, #0]
    45da:	6123      	str	r3, [r4, #16]
    45dc:	2301      	movs	r3, #1
    45de:	6163      	str	r3, [r4, #20]
    45e0:	e013      	b.n	460a <__smakebuf_r+0xba>
    45e2:	4b0c      	ldr	r3, [pc, #48]	; (4614 <__smakebuf_r+0xc4>)
    45e4:	63f3      	str	r3, [r6, #60]	; 0x3c
    45e6:	89a3      	ldrh	r3, [r4, #12]
    45e8:	6020      	str	r0, [r4, #0]
    45ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    45ee:	81a3      	strh	r3, [r4, #12]
    45f0:	6120      	str	r0, [r4, #16]
    45f2:	6165      	str	r5, [r4, #20]
    45f4:	b14f      	cbz	r7, 460a <__smakebuf_r+0xba>
    45f6:	4630      	mov	r0, r6
    45f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    45fc:	f000 fdca 	bl	5194 <_isatty_r>
    4600:	b118      	cbz	r0, 460a <__smakebuf_r+0xba>
    4602:	89a3      	ldrh	r3, [r4, #12]
    4604:	f043 0301 	orr.w	r3, r3, #1
    4608:	81a3      	strh	r3, [r4, #12]
    460a:	b011      	add	sp, #68	; 0x44
    460c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    460e:	bf00      	nop
    4610:	00004e73 	.word	0x00004e73
    4614:	00003cd9 	.word	0x00003cd9

00004618 <malloc>:
    4618:	4b02      	ldr	r3, [pc, #8]	; (4624 <malloc+0xc>)
    461a:	4601      	mov	r1, r0
    461c:	6818      	ldr	r0, [r3, #0]
    461e:	f000 b80b 	b.w	4638 <_malloc_r>
    4622:	bf00      	nop
    4624:	20000040 	.word	0x20000040

00004628 <free>:
    4628:	4b02      	ldr	r3, [pc, #8]	; (4634 <free+0xc>)
    462a:	4601      	mov	r1, r0
    462c:	6818      	ldr	r0, [r3, #0]
    462e:	f7ff bd0f 	b.w	4050 <_free_r>
    4632:	bf00      	nop
    4634:	20000040 	.word	0x20000040

00004638 <_malloc_r>:
    4638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    463c:	f101 040b 	add.w	r4, r1, #11
    4640:	2c16      	cmp	r4, #22
    4642:	4607      	mov	r7, r0
    4644:	d903      	bls.n	464e <_malloc_r+0x16>
    4646:	f034 0407 	bics.w	r4, r4, #7
    464a:	d501      	bpl.n	4650 <_malloc_r+0x18>
    464c:	e002      	b.n	4654 <_malloc_r+0x1c>
    464e:	2410      	movs	r4, #16
    4650:	428c      	cmp	r4, r1
    4652:	d202      	bcs.n	465a <_malloc_r+0x22>
    4654:	230c      	movs	r3, #12
    4656:	603b      	str	r3, [r7, #0]
    4658:	e1e0      	b.n	4a1c <_malloc_r+0x3e4>
    465a:	4638      	mov	r0, r7
    465c:	f000 fa20 	bl	4aa0 <__malloc_lock>
    4660:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
    4664:	4da4      	ldr	r5, [pc, #656]	; (48f8 <_malloc_r+0x2c0>)
    4666:	d214      	bcs.n	4692 <_malloc_r+0x5a>
    4668:	08e2      	lsrs	r2, r4, #3
    466a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    466e:	68de      	ldr	r6, [r3, #12]
    4670:	429e      	cmp	r6, r3
    4672:	d106      	bne.n	4682 <_malloc_r+0x4a>
    4674:	f106 0308 	add.w	r3, r6, #8
    4678:	6976      	ldr	r6, [r6, #20]
    467a:	429e      	cmp	r6, r3
    467c:	bf08      	it	eq
    467e:	3202      	addeq	r2, #2
    4680:	d043      	beq.n	470a <_malloc_r+0xd2>
    4682:	6873      	ldr	r3, [r6, #4]
    4684:	68f2      	ldr	r2, [r6, #12]
    4686:	68b1      	ldr	r1, [r6, #8]
    4688:	f023 0303 	bic.w	r3, r3, #3
    468c:	60ca      	str	r2, [r1, #12]
    468e:	6091      	str	r1, [r2, #8]
    4690:	e05d      	b.n	474e <_malloc_r+0x116>
    4692:	0a62      	lsrs	r2, r4, #9
    4694:	d01a      	beq.n	46cc <_malloc_r+0x94>
    4696:	2a04      	cmp	r2, #4
    4698:	d802      	bhi.n	46a0 <_malloc_r+0x68>
    469a:	09a2      	lsrs	r2, r4, #6
    469c:	3238      	adds	r2, #56	; 0x38
    469e:	e018      	b.n	46d2 <_malloc_r+0x9a>
    46a0:	2a14      	cmp	r2, #20
    46a2:	d801      	bhi.n	46a8 <_malloc_r+0x70>
    46a4:	325b      	adds	r2, #91	; 0x5b
    46a6:	e014      	b.n	46d2 <_malloc_r+0x9a>
    46a8:	2a54      	cmp	r2, #84	; 0x54
    46aa:	d802      	bhi.n	46b2 <_malloc_r+0x7a>
    46ac:	0b22      	lsrs	r2, r4, #12
    46ae:	326e      	adds	r2, #110	; 0x6e
    46b0:	e00f      	b.n	46d2 <_malloc_r+0x9a>
    46b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    46b6:	d802      	bhi.n	46be <_malloc_r+0x86>
    46b8:	0be2      	lsrs	r2, r4, #15
    46ba:	3277      	adds	r2, #119	; 0x77
    46bc:	e009      	b.n	46d2 <_malloc_r+0x9a>
    46be:	f240 5354 	movw	r3, #1364	; 0x554
    46c2:	429a      	cmp	r2, r3
    46c4:	d804      	bhi.n	46d0 <_malloc_r+0x98>
    46c6:	0ca2      	lsrs	r2, r4, #18
    46c8:	327c      	adds	r2, #124	; 0x7c
    46ca:	e002      	b.n	46d2 <_malloc_r+0x9a>
    46cc:	223f      	movs	r2, #63	; 0x3f
    46ce:	e000      	b.n	46d2 <_malloc_r+0x9a>
    46d0:	227e      	movs	r2, #126	; 0x7e
    46d2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    46d6:	68de      	ldr	r6, [r3, #12]
    46d8:	429e      	cmp	r6, r3
    46da:	d015      	beq.n	4708 <_malloc_r+0xd0>
    46dc:	6871      	ldr	r1, [r6, #4]
    46de:	f021 0103 	bic.w	r1, r1, #3
    46e2:	1b08      	subs	r0, r1, r4
    46e4:	280f      	cmp	r0, #15
    46e6:	dd01      	ble.n	46ec <_malloc_r+0xb4>
    46e8:	3a01      	subs	r2, #1
    46ea:	e00d      	b.n	4708 <_malloc_r+0xd0>
    46ec:	2800      	cmp	r0, #0
    46ee:	db09      	blt.n	4704 <_malloc_r+0xcc>
    46f0:	68f3      	ldr	r3, [r6, #12]
    46f2:	68b2      	ldr	r2, [r6, #8]
    46f4:	60d3      	str	r3, [r2, #12]
    46f6:	609a      	str	r2, [r3, #8]
    46f8:	1873      	adds	r3, r6, r1
    46fa:	685a      	ldr	r2, [r3, #4]
    46fc:	f042 0201 	orr.w	r2, r2, #1
    4700:	605a      	str	r2, [r3, #4]
    4702:	e196      	b.n	4a32 <_malloc_r+0x3fa>
    4704:	68f6      	ldr	r6, [r6, #12]
    4706:	e7e7      	b.n	46d8 <_malloc_r+0xa0>
    4708:	3201      	adds	r2, #1
    470a:	497b      	ldr	r1, [pc, #492]	; (48f8 <_malloc_r+0x2c0>)
    470c:	692e      	ldr	r6, [r5, #16]
    470e:	f101 0008 	add.w	r0, r1, #8
    4712:	4286      	cmp	r6, r0
    4714:	4686      	mov	lr, r0
    4716:	d06d      	beq.n	47f4 <_malloc_r+0x1bc>
    4718:	6873      	ldr	r3, [r6, #4]
    471a:	f023 0303 	bic.w	r3, r3, #3
    471e:	ebc4 0c03 	rsb	ip, r4, r3
    4722:	f1bc 0f0f 	cmp.w	ip, #15
    4726:	dd0d      	ble.n	4744 <_malloc_r+0x10c>
    4728:	1933      	adds	r3, r6, r4
    472a:	f04c 0201 	orr.w	r2, ip, #1
    472e:	f044 0401 	orr.w	r4, r4, #1
    4732:	6074      	str	r4, [r6, #4]
    4734:	614b      	str	r3, [r1, #20]
    4736:	610b      	str	r3, [r1, #16]
    4738:	60d8      	str	r0, [r3, #12]
    473a:	6098      	str	r0, [r3, #8]
    473c:	605a      	str	r2, [r3, #4]
    473e:	f843 c00c 	str.w	ip, [r3, ip]
    4742:	e176      	b.n	4a32 <_malloc_r+0x3fa>
    4744:	f1bc 0f00 	cmp.w	ip, #0
    4748:	6148      	str	r0, [r1, #20]
    474a:	6108      	str	r0, [r1, #16]
    474c:	db01      	blt.n	4752 <_malloc_r+0x11a>
    474e:	4433      	add	r3, r6
    4750:	e7d3      	b.n	46fa <_malloc_r+0xc2>
    4752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4756:	d211      	bcs.n	477c <_malloc_r+0x144>
    4758:	08db      	lsrs	r3, r3, #3
    475a:	1098      	asrs	r0, r3, #2
    475c:	f04f 0c01 	mov.w	ip, #1
    4760:	fa0c fc00 	lsl.w	ip, ip, r0
    4764:	6848      	ldr	r0, [r1, #4]
    4766:	ea4c 0000 	orr.w	r0, ip, r0
    476a:	6048      	str	r0, [r1, #4]
    476c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    4770:	688b      	ldr	r3, [r1, #8]
    4772:	60b3      	str	r3, [r6, #8]
    4774:	60f1      	str	r1, [r6, #12]
    4776:	608e      	str	r6, [r1, #8]
    4778:	60de      	str	r6, [r3, #12]
    477a:	e03b      	b.n	47f4 <_malloc_r+0x1bc>
    477c:	0a58      	lsrs	r0, r3, #9
    477e:	2804      	cmp	r0, #4
    4780:	d802      	bhi.n	4788 <_malloc_r+0x150>
    4782:	0998      	lsrs	r0, r3, #6
    4784:	3038      	adds	r0, #56	; 0x38
    4786:	e015      	b.n	47b4 <_malloc_r+0x17c>
    4788:	2814      	cmp	r0, #20
    478a:	d801      	bhi.n	4790 <_malloc_r+0x158>
    478c:	305b      	adds	r0, #91	; 0x5b
    478e:	e011      	b.n	47b4 <_malloc_r+0x17c>
    4790:	2854      	cmp	r0, #84	; 0x54
    4792:	d802      	bhi.n	479a <_malloc_r+0x162>
    4794:	0b18      	lsrs	r0, r3, #12
    4796:	306e      	adds	r0, #110	; 0x6e
    4798:	e00c      	b.n	47b4 <_malloc_r+0x17c>
    479a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
    479e:	d802      	bhi.n	47a6 <_malloc_r+0x16e>
    47a0:	0bd8      	lsrs	r0, r3, #15
    47a2:	3077      	adds	r0, #119	; 0x77
    47a4:	e006      	b.n	47b4 <_malloc_r+0x17c>
    47a6:	f240 5154 	movw	r1, #1364	; 0x554
    47aa:	4288      	cmp	r0, r1
    47ac:	bf9a      	itte	ls
    47ae:	0c98      	lsrls	r0, r3, #18
    47b0:	307c      	addls	r0, #124	; 0x7c
    47b2:	207e      	movhi	r0, #126	; 0x7e
    47b4:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
    47b8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 48f8 <_malloc_r+0x2c0>
    47bc:	f8dc 1008 	ldr.w	r1, [ip, #8]
    47c0:	4561      	cmp	r1, ip
    47c2:	d10d      	bne.n	47e0 <_malloc_r+0x1a8>
    47c4:	2301      	movs	r3, #1
    47c6:	1080      	asrs	r0, r0, #2
    47c8:	fa03 f000 	lsl.w	r0, r3, r0
    47cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    47d0:	4303      	orrs	r3, r0
    47d2:	f8c8 3004 	str.w	r3, [r8, #4]
    47d6:	460b      	mov	r3, r1
    47d8:	e008      	b.n	47ec <_malloc_r+0x1b4>
    47da:	6889      	ldr	r1, [r1, #8]
    47dc:	4561      	cmp	r1, ip
    47de:	d004      	beq.n	47ea <_malloc_r+0x1b2>
    47e0:	6848      	ldr	r0, [r1, #4]
    47e2:	f020 0003 	bic.w	r0, r0, #3
    47e6:	4283      	cmp	r3, r0
    47e8:	d3f7      	bcc.n	47da <_malloc_r+0x1a2>
    47ea:	68cb      	ldr	r3, [r1, #12]
    47ec:	60f3      	str	r3, [r6, #12]
    47ee:	60b1      	str	r1, [r6, #8]
    47f0:	609e      	str	r6, [r3, #8]
    47f2:	60ce      	str	r6, [r1, #12]
    47f4:	2101      	movs	r1, #1
    47f6:	1093      	asrs	r3, r2, #2
    47f8:	fa01 f303 	lsl.w	r3, r1, r3
    47fc:	6869      	ldr	r1, [r5, #4]
    47fe:	428b      	cmp	r3, r1
    4800:	d85e      	bhi.n	48c0 <_malloc_r+0x288>
    4802:	420b      	tst	r3, r1
    4804:	d106      	bne.n	4814 <_malloc_r+0x1dc>
    4806:	f022 0203 	bic.w	r2, r2, #3
    480a:	005b      	lsls	r3, r3, #1
    480c:	420b      	tst	r3, r1
    480e:	f102 0204 	add.w	r2, r2, #4
    4812:	d0fa      	beq.n	480a <_malloc_r+0x1d2>
    4814:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
    4818:	4680      	mov	r8, r0
    481a:	4694      	mov	ip, r2
    481c:	f8d8 600c 	ldr.w	r6, [r8, #12]
    4820:	4546      	cmp	r6, r8
    4822:	d02d      	beq.n	4880 <_malloc_r+0x248>
    4824:	6871      	ldr	r1, [r6, #4]
    4826:	f021 0903 	bic.w	r9, r1, #3
    482a:	ebc4 0109 	rsb	r1, r4, r9
    482e:	290f      	cmp	r1, #15
    4830:	dd13      	ble.n	485a <_malloc_r+0x222>
    4832:	1933      	adds	r3, r6, r4
    4834:	f044 0401 	orr.w	r4, r4, #1
    4838:	68f2      	ldr	r2, [r6, #12]
    483a:	6074      	str	r4, [r6, #4]
    483c:	f856 0f08 	ldr.w	r0, [r6, #8]!
    4840:	60c2      	str	r2, [r0, #12]
    4842:	6090      	str	r0, [r2, #8]
    4844:	f041 0201 	orr.w	r2, r1, #1
    4848:	616b      	str	r3, [r5, #20]
    484a:	612b      	str	r3, [r5, #16]
    484c:	f8c3 e00c 	str.w	lr, [r3, #12]
    4850:	f8c3 e008 	str.w	lr, [r3, #8]
    4854:	605a      	str	r2, [r3, #4]
    4856:	5059      	str	r1, [r3, r1]
    4858:	e00c      	b.n	4874 <_malloc_r+0x23c>
    485a:	2900      	cmp	r1, #0
    485c:	db0e      	blt.n	487c <_malloc_r+0x244>
    485e:	eb06 0109 	add.w	r1, r6, r9
    4862:	684b      	ldr	r3, [r1, #4]
    4864:	f043 0301 	orr.w	r3, r3, #1
    4868:	604b      	str	r3, [r1, #4]
    486a:	68f3      	ldr	r3, [r6, #12]
    486c:	f856 2f08 	ldr.w	r2, [r6, #8]!
    4870:	60d3      	str	r3, [r2, #12]
    4872:	609a      	str	r2, [r3, #8]
    4874:	4638      	mov	r0, r7
    4876:	f000 f914 	bl	4aa2 <__malloc_unlock>
    487a:	e0de      	b.n	4a3a <_malloc_r+0x402>
    487c:	68f6      	ldr	r6, [r6, #12]
    487e:	e7cf      	b.n	4820 <_malloc_r+0x1e8>
    4880:	f10c 0c01 	add.w	ip, ip, #1
    4884:	f01c 0f03 	tst.w	ip, #3
    4888:	f108 0808 	add.w	r8, r8, #8
    488c:	d1c6      	bne.n	481c <_malloc_r+0x1e4>
    488e:	0791      	lsls	r1, r2, #30
    4890:	d104      	bne.n	489c <_malloc_r+0x264>
    4892:	686a      	ldr	r2, [r5, #4]
    4894:	ea22 0203 	bic.w	r2, r2, r3
    4898:	606a      	str	r2, [r5, #4]
    489a:	e006      	b.n	48aa <_malloc_r+0x272>
    489c:	f1a0 0108 	sub.w	r1, r0, #8
    48a0:	6800      	ldr	r0, [r0, #0]
    48a2:	4288      	cmp	r0, r1
    48a4:	f102 32ff 	add.w	r2, r2, #4294967295
    48a8:	d0f1      	beq.n	488e <_malloc_r+0x256>
    48aa:	6869      	ldr	r1, [r5, #4]
    48ac:	005b      	lsls	r3, r3, #1
    48ae:	428b      	cmp	r3, r1
    48b0:	d806      	bhi.n	48c0 <_malloc_r+0x288>
    48b2:	b12b      	cbz	r3, 48c0 <_malloc_r+0x288>
    48b4:	4662      	mov	r2, ip
    48b6:	420b      	tst	r3, r1
    48b8:	d1ac      	bne.n	4814 <_malloc_r+0x1dc>
    48ba:	3204      	adds	r2, #4
    48bc:	005b      	lsls	r3, r3, #1
    48be:	e7fa      	b.n	48b6 <_malloc_r+0x27e>
    48c0:	f8d5 9008 	ldr.w	r9, [r5, #8]
    48c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    48c8:	f023 0b03 	bic.w	fp, r3, #3
    48cc:	45a3      	cmp	fp, r4
    48ce:	d304      	bcc.n	48da <_malloc_r+0x2a2>
    48d0:	ebc4 030b 	rsb	r3, r4, fp
    48d4:	2b0f      	cmp	r3, #15
    48d6:	f300 80a3 	bgt.w	4a20 <_malloc_r+0x3e8>
    48da:	4908      	ldr	r1, [pc, #32]	; (48fc <_malloc_r+0x2c4>)
    48dc:	680a      	ldr	r2, [r1, #0]
    48de:	eb04 0a02 	add.w	sl, r4, r2
    48e2:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
    48e6:	3201      	adds	r2, #1
    48e8:	eb09 030b 	add.w	r3, r9, fp
    48ec:	4688      	mov	r8, r1
    48ee:	d107      	bne.n	4900 <_malloc_r+0x2c8>
    48f0:	f10a 0a10 	add.w	sl, sl, #16
    48f4:	e00c      	b.n	4910 <_malloc_r+0x2d8>
    48f6:	bf00      	nop
    48f8:	200004ec 	.word	0x200004ec
    48fc:	20000bf4 	.word	0x20000bf4
    4900:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    4904:	f10a 0a0f 	add.w	sl, sl, #15
    4908:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    490c:	f02a 0a0f 	bic.w	sl, sl, #15
    4910:	4638      	mov	r0, r7
    4912:	4651      	mov	r1, sl
    4914:	9301      	str	r3, [sp, #4]
    4916:	f000 fa6d 	bl	4df4 <_sbrk_r>
    491a:	1c42      	adds	r2, r0, #1
    491c:	4606      	mov	r6, r0
    491e:	9b01      	ldr	r3, [sp, #4]
    4920:	d06f      	beq.n	4a02 <_malloc_r+0x3ca>
    4922:	4298      	cmp	r0, r3
    4924:	d201      	bcs.n	492a <_malloc_r+0x2f2>
    4926:	45a9      	cmp	r9, r5
    4928:	d16b      	bne.n	4a02 <_malloc_r+0x3ca>
    492a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    492e:	429e      	cmp	r6, r3
    4930:	4452      	add	r2, sl
    4932:	f8c8 2004 	str.w	r2, [r8, #4]
    4936:	d108      	bne.n	494a <_malloc_r+0x312>
    4938:	f3c6 010b 	ubfx	r1, r6, #0, #12
    493c:	b929      	cbnz	r1, 494a <_malloc_r+0x312>
    493e:	68ab      	ldr	r3, [r5, #8]
    4940:	44da      	add	sl, fp
    4942:	f04a 0201 	orr.w	r2, sl, #1
    4946:	605a      	str	r2, [r3, #4]
    4948:	e04d      	b.n	49e6 <_malloc_r+0x3ae>
    494a:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
    494e:	3101      	adds	r1, #1
    4950:	d103      	bne.n	495a <_malloc_r+0x322>
    4952:	4b3c      	ldr	r3, [pc, #240]	; (4a44 <_malloc_r+0x40c>)
    4954:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
    4958:	e003      	b.n	4962 <_malloc_r+0x32a>
    495a:	1af3      	subs	r3, r6, r3
    495c:	441a      	add	r2, r3
    495e:	f8c8 2004 	str.w	r2, [r8, #4]
    4962:	f016 0307 	ands.w	r3, r6, #7
    4966:	bf1c      	itt	ne
    4968:	f1c3 0308 	rsbne	r3, r3, #8
    496c:	18f6      	addne	r6, r6, r3
    496e:	44b2      	add	sl, r6
    4970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    4974:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    4978:	ebca 0a03 	rsb	sl, sl, r3
    497c:	4651      	mov	r1, sl
    497e:	4638      	mov	r0, r7
    4980:	f000 fa38 	bl	4df4 <_sbrk_r>
    4984:	1c43      	adds	r3, r0, #1
    4986:	bf04      	itt	eq
    4988:	4630      	moveq	r0, r6
    498a:	f04f 0a00 	moveq.w	sl, #0
    498e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4992:	60ae      	str	r6, [r5, #8]
    4994:	1b80      	subs	r0, r0, r6
    4996:	4450      	add	r0, sl
    4998:	4453      	add	r3, sl
    499a:	f040 0001 	orr.w	r0, r0, #1
    499e:	45a9      	cmp	r9, r5
    49a0:	f8c8 3004 	str.w	r3, [r8, #4]
    49a4:	6070      	str	r0, [r6, #4]
    49a6:	d01e      	beq.n	49e6 <_malloc_r+0x3ae>
    49a8:	f1bb 0f0f 	cmp.w	fp, #15
    49ac:	d802      	bhi.n	49b4 <_malloc_r+0x37c>
    49ae:	2301      	movs	r3, #1
    49b0:	6073      	str	r3, [r6, #4]
    49b2:	e026      	b.n	4a02 <_malloc_r+0x3ca>
    49b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    49b8:	f1ab 0b0c 	sub.w	fp, fp, #12
    49bc:	f02b 0b07 	bic.w	fp, fp, #7
    49c0:	f003 0301 	and.w	r3, r3, #1
    49c4:	ea4b 0303 	orr.w	r3, fp, r3
    49c8:	f8c9 3004 	str.w	r3, [r9, #4]
    49cc:	eb09 030b 	add.w	r3, r9, fp
    49d0:	2205      	movs	r2, #5
    49d2:	f1bb 0f0f 	cmp.w	fp, #15
    49d6:	605a      	str	r2, [r3, #4]
    49d8:	609a      	str	r2, [r3, #8]
    49da:	d904      	bls.n	49e6 <_malloc_r+0x3ae>
    49dc:	4638      	mov	r0, r7
    49de:	f109 0108 	add.w	r1, r9, #8
    49e2:	f7ff fb35 	bl	4050 <_free_r>
    49e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    49ea:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    49ee:	4293      	cmp	r3, r2
    49f0:	bf84      	itt	hi
    49f2:	4a15      	ldrhi	r2, [pc, #84]	; (4a48 <_malloc_r+0x410>)
    49f4:	62d3      	strhi	r3, [r2, #44]	; 0x2c
    49f6:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    49fa:	4293      	cmp	r3, r2
    49fc:	bf84      	itt	hi
    49fe:	4a12      	ldrhi	r2, [pc, #72]	; (4a48 <_malloc_r+0x410>)
    4a00:	6313      	strhi	r3, [r2, #48]	; 0x30
    4a02:	68ab      	ldr	r3, [r5, #8]
    4a04:	685a      	ldr	r2, [r3, #4]
    4a06:	f022 0203 	bic.w	r2, r2, #3
    4a0a:	42a2      	cmp	r2, r4
    4a0c:	ebc4 0302 	rsb	r3, r4, r2
    4a10:	d301      	bcc.n	4a16 <_malloc_r+0x3de>
    4a12:	2b0f      	cmp	r3, #15
    4a14:	dc04      	bgt.n	4a20 <_malloc_r+0x3e8>
    4a16:	4638      	mov	r0, r7
    4a18:	f000 f843 	bl	4aa2 <__malloc_unlock>
    4a1c:	2600      	movs	r6, #0
    4a1e:	e00c      	b.n	4a3a <_malloc_r+0x402>
    4a20:	68ae      	ldr	r6, [r5, #8]
    4a22:	f044 0201 	orr.w	r2, r4, #1
    4a26:	4434      	add	r4, r6
    4a28:	f043 0301 	orr.w	r3, r3, #1
    4a2c:	6072      	str	r2, [r6, #4]
    4a2e:	60ac      	str	r4, [r5, #8]
    4a30:	6063      	str	r3, [r4, #4]
    4a32:	4638      	mov	r0, r7
    4a34:	f000 f835 	bl	4aa2 <__malloc_unlock>
    4a38:	3608      	adds	r6, #8
    4a3a:	4630      	mov	r0, r6
    4a3c:	b003      	add	sp, #12
    4a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a42:	bf00      	nop
    4a44:	200004ec 	.word	0x200004ec
    4a48:	20000bf4 	.word	0x20000bf4

00004a4c <memchr>:
    4a4c:	b510      	push	{r4, lr}
    4a4e:	b2c9      	uxtb	r1, r1
    4a50:	4402      	add	r2, r0
    4a52:	4290      	cmp	r0, r2
    4a54:	4603      	mov	r3, r0
    4a56:	d006      	beq.n	4a66 <memchr+0x1a>
    4a58:	781c      	ldrb	r4, [r3, #0]
    4a5a:	428c      	cmp	r4, r1
    4a5c:	f100 0001 	add.w	r0, r0, #1
    4a60:	d1f7      	bne.n	4a52 <memchr+0x6>
    4a62:	4618      	mov	r0, r3
    4a64:	bd10      	pop	{r4, pc}
    4a66:	2000      	movs	r0, #0
    4a68:	bd10      	pop	{r4, pc}

00004a6a <memmove>:
    4a6a:	4281      	cmp	r1, r0
    4a6c:	b570      	push	{r4, r5, r6, lr}
    4a6e:	d301      	bcc.n	4a74 <memmove+0xa>
    4a70:	2300      	movs	r3, #0
    4a72:	e00e      	b.n	4a92 <memmove+0x28>
    4a74:	188c      	adds	r4, r1, r2
    4a76:	42a0      	cmp	r0, r4
    4a78:	d2fa      	bcs.n	4a70 <memmove+0x6>
    4a7a:	1885      	adds	r5, r0, r2
    4a7c:	4613      	mov	r3, r2
    4a7e:	f113 33ff 	adds.w	r3, r3, #4294967295
    4a82:	d305      	bcc.n	4a90 <memmove+0x26>
    4a84:	4251      	negs	r1, r2
    4a86:	1866      	adds	r6, r4, r1
    4a88:	4429      	add	r1, r5
    4a8a:	5cf6      	ldrb	r6, [r6, r3]
    4a8c:	54ce      	strb	r6, [r1, r3]
    4a8e:	e7f6      	b.n	4a7e <memmove+0x14>
    4a90:	bd70      	pop	{r4, r5, r6, pc}
    4a92:	4293      	cmp	r3, r2
    4a94:	d003      	beq.n	4a9e <memmove+0x34>
    4a96:	5ccc      	ldrb	r4, [r1, r3]
    4a98:	54c4      	strb	r4, [r0, r3]
    4a9a:	3301      	adds	r3, #1
    4a9c:	e7f9      	b.n	4a92 <memmove+0x28>
    4a9e:	bd70      	pop	{r4, r5, r6, pc}

00004aa0 <__malloc_lock>:
    4aa0:	4770      	bx	lr

00004aa2 <__malloc_unlock>:
    4aa2:	4770      	bx	lr

00004aa4 <_realloc_r>:
    4aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aa8:	4681      	mov	r9, r0
    4aaa:	460c      	mov	r4, r1
    4aac:	b929      	cbnz	r1, 4aba <_realloc_r+0x16>
    4aae:	4611      	mov	r1, r2
    4ab0:	b003      	add	sp, #12
    4ab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ab6:	f7ff bdbf 	b.w	4638 <_malloc_r>
    4aba:	9201      	str	r2, [sp, #4]
    4abc:	f7ff fff0 	bl	4aa0 <__malloc_lock>
    4ac0:	9a01      	ldr	r2, [sp, #4]
    4ac2:	f854 5c04 	ldr.w	r5, [r4, #-4]
    4ac6:	f102 070b 	add.w	r7, r2, #11
    4aca:	2f16      	cmp	r7, #22
    4acc:	f1a4 0808 	sub.w	r8, r4, #8
    4ad0:	f025 0603 	bic.w	r6, r5, #3
    4ad4:	d903      	bls.n	4ade <_realloc_r+0x3a>
    4ad6:	f037 0707 	bics.w	r7, r7, #7
    4ada:	d501      	bpl.n	4ae0 <_realloc_r+0x3c>
    4adc:	e002      	b.n	4ae4 <_realloc_r+0x40>
    4ade:	2710      	movs	r7, #16
    4ae0:	4297      	cmp	r7, r2
    4ae2:	d204      	bcs.n	4aee <_realloc_r+0x4a>
    4ae4:	230c      	movs	r3, #12
    4ae6:	f8c9 3000 	str.w	r3, [r9]
    4aea:	2000      	movs	r0, #0
    4aec:	e17e      	b.n	4dec <_realloc_r+0x348>
    4aee:	42be      	cmp	r6, r7
    4af0:	f280 8154 	bge.w	4d9c <_realloc_r+0x2f8>
    4af4:	49a2      	ldr	r1, [pc, #648]	; (4d80 <_realloc_r+0x2dc>)
    4af6:	f8d1 e008 	ldr.w	lr, [r1, #8]
    4afa:	eb08 0306 	add.w	r3, r8, r6
    4afe:	4573      	cmp	r3, lr
    4b00:	468b      	mov	fp, r1
    4b02:	6858      	ldr	r0, [r3, #4]
    4b04:	d005      	beq.n	4b12 <_realloc_r+0x6e>
    4b06:	f020 0101 	bic.w	r1, r0, #1
    4b0a:	4419      	add	r1, r3
    4b0c:	6849      	ldr	r1, [r1, #4]
    4b0e:	07c9      	lsls	r1, r1, #31
    4b10:	d425      	bmi.n	4b5e <_realloc_r+0xba>
    4b12:	f020 0003 	bic.w	r0, r0, #3
    4b16:	4573      	cmp	r3, lr
    4b18:	eb00 0106 	add.w	r1, r0, r6
    4b1c:	d117      	bne.n	4b4e <_realloc_r+0xaa>
    4b1e:	f107 0c10 	add.w	ip, r7, #16
    4b22:	4561      	cmp	r1, ip
    4b24:	db1d      	blt.n	4b62 <_realloc_r+0xbe>
    4b26:	eb08 0507 	add.w	r5, r8, r7
    4b2a:	1bc9      	subs	r1, r1, r7
    4b2c:	f041 0101 	orr.w	r1, r1, #1
    4b30:	f8cb 5008 	str.w	r5, [fp, #8]
    4b34:	6069      	str	r1, [r5, #4]
    4b36:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4b3a:	f003 0301 	and.w	r3, r3, #1
    4b3e:	431f      	orrs	r7, r3
    4b40:	4648      	mov	r0, r9
    4b42:	f844 7c04 	str.w	r7, [r4, #-4]
    4b46:	f7ff ffac 	bl	4aa2 <__malloc_unlock>
    4b4a:	4620      	mov	r0, r4
    4b4c:	e14e      	b.n	4dec <_realloc_r+0x348>
    4b4e:	42b9      	cmp	r1, r7
    4b50:	db07      	blt.n	4b62 <_realloc_r+0xbe>
    4b52:	68da      	ldr	r2, [r3, #12]
    4b54:	689b      	ldr	r3, [r3, #8]
    4b56:	460e      	mov	r6, r1
    4b58:	60da      	str	r2, [r3, #12]
    4b5a:	6093      	str	r3, [r2, #8]
    4b5c:	e11e      	b.n	4d9c <_realloc_r+0x2f8>
    4b5e:	2000      	movs	r0, #0
    4b60:	4603      	mov	r3, r0
    4b62:	07e9      	lsls	r1, r5, #31
    4b64:	f100 80c9 	bmi.w	4cfa <_realloc_r+0x256>
    4b68:	f854 5c08 	ldr.w	r5, [r4, #-8]
    4b6c:	ebc5 0508 	rsb	r5, r5, r8
    4b70:	6869      	ldr	r1, [r5, #4]
    4b72:	f021 0103 	bic.w	r1, r1, #3
    4b76:	eb01 0a06 	add.w	sl, r1, r6
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	f000 8088 	beq.w	4c90 <_realloc_r+0x1ec>
    4b80:	4573      	cmp	r3, lr
    4b82:	d14b      	bne.n	4c1c <_realloc_r+0x178>
    4b84:	eb0a 0300 	add.w	r3, sl, r0
    4b88:	f107 0110 	add.w	r1, r7, #16
    4b8c:	428b      	cmp	r3, r1
    4b8e:	db7f      	blt.n	4c90 <_realloc_r+0x1ec>
    4b90:	46a8      	mov	r8, r5
    4b92:	68ea      	ldr	r2, [r5, #12]
    4b94:	f858 1f08 	ldr.w	r1, [r8, #8]!
    4b98:	60ca      	str	r2, [r1, #12]
    4b9a:	6091      	str	r1, [r2, #8]
    4b9c:	1f32      	subs	r2, r6, #4
    4b9e:	2a24      	cmp	r2, #36	; 0x24
    4ba0:	d825      	bhi.n	4bee <_realloc_r+0x14a>
    4ba2:	2a13      	cmp	r2, #19
    4ba4:	d91b      	bls.n	4bde <_realloc_r+0x13a>
    4ba6:	6821      	ldr	r1, [r4, #0]
    4ba8:	60a9      	str	r1, [r5, #8]
    4baa:	6861      	ldr	r1, [r4, #4]
    4bac:	60e9      	str	r1, [r5, #12]
    4bae:	2a1b      	cmp	r2, #27
    4bb0:	d803      	bhi.n	4bba <_realloc_r+0x116>
    4bb2:	f105 0210 	add.w	r2, r5, #16
    4bb6:	3408      	adds	r4, #8
    4bb8:	e012      	b.n	4be0 <_realloc_r+0x13c>
    4bba:	68a1      	ldr	r1, [r4, #8]
    4bbc:	6129      	str	r1, [r5, #16]
    4bbe:	68e1      	ldr	r1, [r4, #12]
    4bc0:	6169      	str	r1, [r5, #20]
    4bc2:	2a24      	cmp	r2, #36	; 0x24
    4bc4:	d003      	beq.n	4bce <_realloc_r+0x12a>
    4bc6:	f105 0218 	add.w	r2, r5, #24
    4bca:	3410      	adds	r4, #16
    4bcc:	e008      	b.n	4be0 <_realloc_r+0x13c>
    4bce:	6922      	ldr	r2, [r4, #16]
    4bd0:	61aa      	str	r2, [r5, #24]
    4bd2:	6961      	ldr	r1, [r4, #20]
    4bd4:	61e9      	str	r1, [r5, #28]
    4bd6:	f105 0220 	add.w	r2, r5, #32
    4bda:	3418      	adds	r4, #24
    4bdc:	e000      	b.n	4be0 <_realloc_r+0x13c>
    4bde:	4642      	mov	r2, r8
    4be0:	6821      	ldr	r1, [r4, #0]
    4be2:	6011      	str	r1, [r2, #0]
    4be4:	6861      	ldr	r1, [r4, #4]
    4be6:	6051      	str	r1, [r2, #4]
    4be8:	68a1      	ldr	r1, [r4, #8]
    4bea:	6091      	str	r1, [r2, #8]
    4bec:	e005      	b.n	4bfa <_realloc_r+0x156>
    4bee:	4640      	mov	r0, r8
    4bf0:	4621      	mov	r1, r4
    4bf2:	9301      	str	r3, [sp, #4]
    4bf4:	f7ff ff39 	bl	4a6a <memmove>
    4bf8:	9b01      	ldr	r3, [sp, #4]
    4bfa:	19ea      	adds	r2, r5, r7
    4bfc:	1bdb      	subs	r3, r3, r7
    4bfe:	f043 0301 	orr.w	r3, r3, #1
    4c02:	f8cb 2008 	str.w	r2, [fp, #8]
    4c06:	6053      	str	r3, [r2, #4]
    4c08:	686b      	ldr	r3, [r5, #4]
    4c0a:	f003 0301 	and.w	r3, r3, #1
    4c0e:	431f      	orrs	r7, r3
    4c10:	4648      	mov	r0, r9
    4c12:	606f      	str	r7, [r5, #4]
    4c14:	f7ff ff45 	bl	4aa2 <__malloc_unlock>
    4c18:	4640      	mov	r0, r8
    4c1a:	e0e7      	b.n	4dec <_realloc_r+0x348>
    4c1c:	eb0a 0b00 	add.w	fp, sl, r0
    4c20:	45bb      	cmp	fp, r7
    4c22:	db35      	blt.n	4c90 <_realloc_r+0x1ec>
    4c24:	68da      	ldr	r2, [r3, #12]
    4c26:	689b      	ldr	r3, [r3, #8]
    4c28:	4628      	mov	r0, r5
    4c2a:	60da      	str	r2, [r3, #12]
    4c2c:	6093      	str	r3, [r2, #8]
    4c2e:	f850 2f08 	ldr.w	r2, [r0, #8]!
    4c32:	68eb      	ldr	r3, [r5, #12]
    4c34:	60d3      	str	r3, [r2, #12]
    4c36:	609a      	str	r2, [r3, #8]
    4c38:	1f32      	subs	r2, r6, #4
    4c3a:	2a24      	cmp	r2, #36	; 0x24
    4c3c:	d823      	bhi.n	4c86 <_realloc_r+0x1e2>
    4c3e:	2a13      	cmp	r2, #19
    4c40:	d91a      	bls.n	4c78 <_realloc_r+0x1d4>
    4c42:	6823      	ldr	r3, [r4, #0]
    4c44:	60ab      	str	r3, [r5, #8]
    4c46:	6863      	ldr	r3, [r4, #4]
    4c48:	60eb      	str	r3, [r5, #12]
    4c4a:	2a1b      	cmp	r2, #27
    4c4c:	d803      	bhi.n	4c56 <_realloc_r+0x1b2>
    4c4e:	f105 0010 	add.w	r0, r5, #16
    4c52:	3408      	adds	r4, #8
    4c54:	e010      	b.n	4c78 <_realloc_r+0x1d4>
    4c56:	68a3      	ldr	r3, [r4, #8]
    4c58:	612b      	str	r3, [r5, #16]
    4c5a:	68e3      	ldr	r3, [r4, #12]
    4c5c:	616b      	str	r3, [r5, #20]
    4c5e:	2a24      	cmp	r2, #36	; 0x24
    4c60:	d003      	beq.n	4c6a <_realloc_r+0x1c6>
    4c62:	f105 0018 	add.w	r0, r5, #24
    4c66:	3410      	adds	r4, #16
    4c68:	e006      	b.n	4c78 <_realloc_r+0x1d4>
    4c6a:	6923      	ldr	r3, [r4, #16]
    4c6c:	61ab      	str	r3, [r5, #24]
    4c6e:	6963      	ldr	r3, [r4, #20]
    4c70:	61eb      	str	r3, [r5, #28]
    4c72:	f105 0020 	add.w	r0, r5, #32
    4c76:	3418      	adds	r4, #24
    4c78:	6823      	ldr	r3, [r4, #0]
    4c7a:	6003      	str	r3, [r0, #0]
    4c7c:	6863      	ldr	r3, [r4, #4]
    4c7e:	6043      	str	r3, [r0, #4]
    4c80:	68a3      	ldr	r3, [r4, #8]
    4c82:	6083      	str	r3, [r0, #8]
    4c84:	e002      	b.n	4c8c <_realloc_r+0x1e8>
    4c86:	4621      	mov	r1, r4
    4c88:	f7ff feef 	bl	4a6a <memmove>
    4c8c:	465e      	mov	r6, fp
    4c8e:	e02e      	b.n	4cee <_realloc_r+0x24a>
    4c90:	45ba      	cmp	sl, r7
    4c92:	db32      	blt.n	4cfa <_realloc_r+0x256>
    4c94:	4628      	mov	r0, r5
    4c96:	68eb      	ldr	r3, [r5, #12]
    4c98:	f850 2f08 	ldr.w	r2, [r0, #8]!
    4c9c:	60d3      	str	r3, [r2, #12]
    4c9e:	609a      	str	r2, [r3, #8]
    4ca0:	1f32      	subs	r2, r6, #4
    4ca2:	2a24      	cmp	r2, #36	; 0x24
    4ca4:	d825      	bhi.n	4cf2 <_realloc_r+0x24e>
    4ca6:	2a13      	cmp	r2, #19
    4ca8:	d91a      	bls.n	4ce0 <_realloc_r+0x23c>
    4caa:	6823      	ldr	r3, [r4, #0]
    4cac:	60ab      	str	r3, [r5, #8]
    4cae:	6863      	ldr	r3, [r4, #4]
    4cb0:	60eb      	str	r3, [r5, #12]
    4cb2:	2a1b      	cmp	r2, #27
    4cb4:	d803      	bhi.n	4cbe <_realloc_r+0x21a>
    4cb6:	f105 0010 	add.w	r0, r5, #16
    4cba:	3408      	adds	r4, #8
    4cbc:	e010      	b.n	4ce0 <_realloc_r+0x23c>
    4cbe:	68a3      	ldr	r3, [r4, #8]
    4cc0:	612b      	str	r3, [r5, #16]
    4cc2:	68e3      	ldr	r3, [r4, #12]
    4cc4:	616b      	str	r3, [r5, #20]
    4cc6:	2a24      	cmp	r2, #36	; 0x24
    4cc8:	d003      	beq.n	4cd2 <_realloc_r+0x22e>
    4cca:	f105 0018 	add.w	r0, r5, #24
    4cce:	3410      	adds	r4, #16
    4cd0:	e006      	b.n	4ce0 <_realloc_r+0x23c>
    4cd2:	6923      	ldr	r3, [r4, #16]
    4cd4:	61ab      	str	r3, [r5, #24]
    4cd6:	6963      	ldr	r3, [r4, #20]
    4cd8:	61eb      	str	r3, [r5, #28]
    4cda:	f105 0020 	add.w	r0, r5, #32
    4cde:	3418      	adds	r4, #24
    4ce0:	6823      	ldr	r3, [r4, #0]
    4ce2:	6003      	str	r3, [r0, #0]
    4ce4:	6863      	ldr	r3, [r4, #4]
    4ce6:	6043      	str	r3, [r0, #4]
    4ce8:	68a3      	ldr	r3, [r4, #8]
    4cea:	6083      	str	r3, [r0, #8]
    4cec:	4656      	mov	r6, sl
    4cee:	46a8      	mov	r8, r5
    4cf0:	e054      	b.n	4d9c <_realloc_r+0x2f8>
    4cf2:	4621      	mov	r1, r4
    4cf4:	f7ff feb9 	bl	4a6a <memmove>
    4cf8:	e7f8      	b.n	4cec <_realloc_r+0x248>
    4cfa:	4648      	mov	r0, r9
    4cfc:	4611      	mov	r1, r2
    4cfe:	f7ff fc9b 	bl	4638 <_malloc_r>
    4d02:	4605      	mov	r5, r0
    4d04:	2800      	cmp	r0, #0
    4d06:	d044      	beq.n	4d92 <_realloc_r+0x2ee>
    4d08:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4d0c:	f023 0301 	bic.w	r3, r3, #1
    4d10:	f1a0 0208 	sub.w	r2, r0, #8
    4d14:	4443      	add	r3, r8
    4d16:	429a      	cmp	r2, r3
    4d18:	d105      	bne.n	4d26 <_realloc_r+0x282>
    4d1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4d1e:	f023 0303 	bic.w	r3, r3, #3
    4d22:	441e      	add	r6, r3
    4d24:	e03a      	b.n	4d9c <_realloc_r+0x2f8>
    4d26:	1f32      	subs	r2, r6, #4
    4d28:	2a24      	cmp	r2, #36	; 0x24
    4d2a:	d82b      	bhi.n	4d84 <_realloc_r+0x2e0>
    4d2c:	2a13      	cmp	r2, #19
    4d2e:	d91e      	bls.n	4d6e <_realloc_r+0x2ca>
    4d30:	6823      	ldr	r3, [r4, #0]
    4d32:	6003      	str	r3, [r0, #0]
    4d34:	6863      	ldr	r3, [r4, #4]
    4d36:	6043      	str	r3, [r0, #4]
    4d38:	2a1b      	cmp	r2, #27
    4d3a:	d804      	bhi.n	4d46 <_realloc_r+0x2a2>
    4d3c:	f100 0308 	add.w	r3, r0, #8
    4d40:	f104 0208 	add.w	r2, r4, #8
    4d44:	e015      	b.n	4d72 <_realloc_r+0x2ce>
    4d46:	68a3      	ldr	r3, [r4, #8]
    4d48:	6083      	str	r3, [r0, #8]
    4d4a:	68e3      	ldr	r3, [r4, #12]
    4d4c:	60c3      	str	r3, [r0, #12]
    4d4e:	2a24      	cmp	r2, #36	; 0x24
    4d50:	d004      	beq.n	4d5c <_realloc_r+0x2b8>
    4d52:	f100 0310 	add.w	r3, r0, #16
    4d56:	f104 0210 	add.w	r2, r4, #16
    4d5a:	e00a      	b.n	4d72 <_realloc_r+0x2ce>
    4d5c:	6923      	ldr	r3, [r4, #16]
    4d5e:	6103      	str	r3, [r0, #16]
    4d60:	6961      	ldr	r1, [r4, #20]
    4d62:	6141      	str	r1, [r0, #20]
    4d64:	f100 0318 	add.w	r3, r0, #24
    4d68:	f104 0218 	add.w	r2, r4, #24
    4d6c:	e001      	b.n	4d72 <_realloc_r+0x2ce>
    4d6e:	4603      	mov	r3, r0
    4d70:	4622      	mov	r2, r4
    4d72:	6811      	ldr	r1, [r2, #0]
    4d74:	6019      	str	r1, [r3, #0]
    4d76:	6851      	ldr	r1, [r2, #4]
    4d78:	6059      	str	r1, [r3, #4]
    4d7a:	6892      	ldr	r2, [r2, #8]
    4d7c:	609a      	str	r2, [r3, #8]
    4d7e:	e004      	b.n	4d8a <_realloc_r+0x2e6>
    4d80:	200004ec 	.word	0x200004ec
    4d84:	4621      	mov	r1, r4
    4d86:	f7ff fe70 	bl	4a6a <memmove>
    4d8a:	4648      	mov	r0, r9
    4d8c:	4621      	mov	r1, r4
    4d8e:	f7ff f95f 	bl	4050 <_free_r>
    4d92:	4648      	mov	r0, r9
    4d94:	f7ff fe85 	bl	4aa2 <__malloc_unlock>
    4d98:	4628      	mov	r0, r5
    4d9a:	e027      	b.n	4dec <_realloc_r+0x348>
    4d9c:	1bf3      	subs	r3, r6, r7
    4d9e:	2b0f      	cmp	r3, #15
    4da0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4da4:	d913      	bls.n	4dce <_realloc_r+0x32a>
    4da6:	eb08 0107 	add.w	r1, r8, r7
    4daa:	f002 0201 	and.w	r2, r2, #1
    4dae:	4317      	orrs	r7, r2
    4db0:	f043 0201 	orr.w	r2, r3, #1
    4db4:	440b      	add	r3, r1
    4db6:	f8c8 7004 	str.w	r7, [r8, #4]
    4dba:	604a      	str	r2, [r1, #4]
    4dbc:	685a      	ldr	r2, [r3, #4]
    4dbe:	f042 0201 	orr.w	r2, r2, #1
    4dc2:	605a      	str	r2, [r3, #4]
    4dc4:	4648      	mov	r0, r9
    4dc6:	3108      	adds	r1, #8
    4dc8:	f7ff f942 	bl	4050 <_free_r>
    4dcc:	e009      	b.n	4de2 <_realloc_r+0x33e>
    4dce:	f002 0201 	and.w	r2, r2, #1
    4dd2:	4332      	orrs	r2, r6
    4dd4:	4446      	add	r6, r8
    4dd6:	f8c8 2004 	str.w	r2, [r8, #4]
    4dda:	6873      	ldr	r3, [r6, #4]
    4ddc:	f043 0301 	orr.w	r3, r3, #1
    4de0:	6073      	str	r3, [r6, #4]
    4de2:	4648      	mov	r0, r9
    4de4:	f7ff fe5d 	bl	4aa2 <__malloc_unlock>
    4de8:	f108 0008 	add.w	r0, r8, #8
    4dec:	b003      	add	sp, #12
    4dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4df2:	bf00      	nop

00004df4 <_sbrk_r>:
    4df4:	b538      	push	{r3, r4, r5, lr}
    4df6:	4c06      	ldr	r4, [pc, #24]	; (4e10 <_sbrk_r+0x1c>)
    4df8:	2300      	movs	r3, #0
    4dfa:	4605      	mov	r5, r0
    4dfc:	4608      	mov	r0, r1
    4dfe:	6023      	str	r3, [r4, #0]
    4e00:	f7fd fda2 	bl	2948 <_sbrk>
    4e04:	1c43      	adds	r3, r0, #1
    4e06:	d102      	bne.n	4e0e <_sbrk_r+0x1a>
    4e08:	6823      	ldr	r3, [r4, #0]
    4e0a:	b103      	cbz	r3, 4e0e <_sbrk_r+0x1a>
    4e0c:	602b      	str	r3, [r5, #0]
    4e0e:	bd38      	pop	{r3, r4, r5, pc}
    4e10:	20000c3c 	.word	0x20000c3c

00004e14 <__sread>:
    4e14:	b510      	push	{r4, lr}
    4e16:	460c      	mov	r4, r1
    4e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4e1c:	f000 f9dc 	bl	51d8 <_read_r>
    4e20:	2800      	cmp	r0, #0
    4e22:	db03      	blt.n	4e2c <__sread+0x18>
    4e24:	6d23      	ldr	r3, [r4, #80]	; 0x50
    4e26:	4403      	add	r3, r0
    4e28:	6523      	str	r3, [r4, #80]	; 0x50
    4e2a:	bd10      	pop	{r4, pc}
    4e2c:	89a3      	ldrh	r3, [r4, #12]
    4e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e32:	81a3      	strh	r3, [r4, #12]
    4e34:	bd10      	pop	{r4, pc}

00004e36 <__seofread>:
    4e36:	2000      	movs	r0, #0
    4e38:	4770      	bx	lr

00004e3a <__swrite>:
    4e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e3e:	461d      	mov	r5, r3
    4e40:	898b      	ldrh	r3, [r1, #12]
    4e42:	05db      	lsls	r3, r3, #23
    4e44:	4607      	mov	r7, r0
    4e46:	460c      	mov	r4, r1
    4e48:	4616      	mov	r6, r2
    4e4a:	d505      	bpl.n	4e58 <__swrite+0x1e>
    4e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4e50:	2200      	movs	r2, #0
    4e52:	2302      	movs	r3, #2
    4e54:	f000 f9ae 	bl	51b4 <_lseek_r>
    4e58:	89a3      	ldrh	r3, [r4, #12]
    4e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    4e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e62:	81a3      	strh	r3, [r4, #12]
    4e64:	4638      	mov	r0, r7
    4e66:	4632      	mov	r2, r6
    4e68:	462b      	mov	r3, r5
    4e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e6e:	f000 b8cb 	b.w	5008 <_write_r>

00004e72 <__sseek>:
    4e72:	b510      	push	{r4, lr}
    4e74:	460c      	mov	r4, r1
    4e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4e7a:	f000 f99b 	bl	51b4 <_lseek_r>
    4e7e:	1c43      	adds	r3, r0, #1
    4e80:	89a3      	ldrh	r3, [r4, #12]
    4e82:	d103      	bne.n	4e8c <__sseek+0x1a>
    4e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e88:	81a3      	strh	r3, [r4, #12]
    4e8a:	bd10      	pop	{r4, pc}
    4e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4e90:	81a3      	strh	r3, [r4, #12]
    4e92:	6520      	str	r0, [r4, #80]	; 0x50
    4e94:	bd10      	pop	{r4, pc}

00004e96 <__sclose>:
    4e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    4e9a:	f000 b913 	b.w	50c4 <_close_r>

00004e9e <strcmp>:
    4e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
    4ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
    4ea6:	2a01      	cmp	r2, #1
    4ea8:	bf28      	it	cs
    4eaa:	429a      	cmpcs	r2, r3
    4eac:	d0f7      	beq.n	4e9e <strcmp>
    4eae:	1ad0      	subs	r0, r2, r3
    4eb0:	4770      	bx	lr
	...

00004eb4 <__swbuf_r>:
    4eb4:	b570      	push	{r4, r5, r6, lr}
    4eb6:	460d      	mov	r5, r1
    4eb8:	4614      	mov	r4, r2
    4eba:	4606      	mov	r6, r0
    4ebc:	b118      	cbz	r0, 4ec6 <__swbuf_r+0x12>
    4ebe:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4ec0:	b90b      	cbnz	r3, 4ec6 <__swbuf_r+0x12>
    4ec2:	f7fe ff2b 	bl	3d1c <__sinit>
    4ec6:	69a3      	ldr	r3, [r4, #24]
    4ec8:	60a3      	str	r3, [r4, #8]
    4eca:	89a3      	ldrh	r3, [r4, #12]
    4ecc:	0719      	lsls	r1, r3, #28
    4ece:	d50d      	bpl.n	4eec <__swbuf_r+0x38>
    4ed0:	6923      	ldr	r3, [r4, #16]
    4ed2:	b15b      	cbz	r3, 4eec <__swbuf_r+0x38>
    4ed4:	89a3      	ldrh	r3, [r4, #12]
    4ed6:	049a      	lsls	r2, r3, #18
    4ed8:	b2ed      	uxtb	r5, r5
    4eda:	d410      	bmi.n	4efe <__swbuf_r+0x4a>
    4edc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4ee0:	81a3      	strh	r3, [r4, #12]
    4ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    4ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4ee8:	6663      	str	r3, [r4, #100]	; 0x64
    4eea:	e008      	b.n	4efe <__swbuf_r+0x4a>
    4eec:	4630      	mov	r0, r6
    4eee:	4621      	mov	r1, r4
    4ef0:	f7fe fdd4 	bl	3a9c <__swsetup_r>
    4ef4:	2800      	cmp	r0, #0
    4ef6:	d0ed      	beq.n	4ed4 <__swbuf_r+0x20>
    4ef8:	f04f 30ff 	mov.w	r0, #4294967295
    4efc:	bd70      	pop	{r4, r5, r6, pc}
    4efe:	6923      	ldr	r3, [r4, #16]
    4f00:	6820      	ldr	r0, [r4, #0]
    4f02:	1ac0      	subs	r0, r0, r3
    4f04:	6963      	ldr	r3, [r4, #20]
    4f06:	4298      	cmp	r0, r3
    4f08:	db05      	blt.n	4f16 <__swbuf_r+0x62>
    4f0a:	4630      	mov	r0, r6
    4f0c:	4621      	mov	r1, r4
    4f0e:	f7fe febb 	bl	3c88 <_fflush_r>
    4f12:	2800      	cmp	r0, #0
    4f14:	d1f0      	bne.n	4ef8 <__swbuf_r+0x44>
    4f16:	68a3      	ldr	r3, [r4, #8]
    4f18:	3b01      	subs	r3, #1
    4f1a:	60a3      	str	r3, [r4, #8]
    4f1c:	6823      	ldr	r3, [r4, #0]
    4f1e:	1c5a      	adds	r2, r3, #1
    4f20:	6022      	str	r2, [r4, #0]
    4f22:	701d      	strb	r5, [r3, #0]
    4f24:	6963      	ldr	r3, [r4, #20]
    4f26:	3001      	adds	r0, #1
    4f28:	4298      	cmp	r0, r3
    4f2a:	d004      	beq.n	4f36 <__swbuf_r+0x82>
    4f2c:	89a3      	ldrh	r3, [r4, #12]
    4f2e:	07db      	lsls	r3, r3, #31
    4f30:	d507      	bpl.n	4f42 <__swbuf_r+0x8e>
    4f32:	2d0a      	cmp	r5, #10
    4f34:	d105      	bne.n	4f42 <__swbuf_r+0x8e>
    4f36:	4630      	mov	r0, r6
    4f38:	4621      	mov	r1, r4
    4f3a:	f7fe fea5 	bl	3c88 <_fflush_r>
    4f3e:	2800      	cmp	r0, #0
    4f40:	d1da      	bne.n	4ef8 <__swbuf_r+0x44>
    4f42:	4628      	mov	r0, r5
    4f44:	bd70      	pop	{r4, r5, r6, pc}

00004f46 <__swbuf>:
    4f46:	460a      	mov	r2, r1
    4f48:	4902      	ldr	r1, [pc, #8]	; (4f54 <__swbuf+0xe>)
    4f4a:	4603      	mov	r3, r0
    4f4c:	6808      	ldr	r0, [r1, #0]
    4f4e:	4619      	mov	r1, r3
    4f50:	f7ff bfb0 	b.w	4eb4 <__swbuf_r>
    4f54:	20000040 	.word	0x20000040

00004f58 <_wcrtomb_r>:
    4f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f5c:	461d      	mov	r5, r3
    4f5e:	4b10      	ldr	r3, [pc, #64]	; (4fa0 <_wcrtomb_r+0x48>)
    4f60:	b086      	sub	sp, #24
    4f62:	4604      	mov	r4, r0
    4f64:	4690      	mov	r8, r2
    4f66:	460e      	mov	r6, r1
    4f68:	681f      	ldr	r7, [r3, #0]
    4f6a:	b939      	cbnz	r1, 4f7c <_wcrtomb_r+0x24>
    4f6c:	f7ff face 	bl	450c <__locale_charset>
    4f70:	9500      	str	r5, [sp, #0]
    4f72:	4603      	mov	r3, r0
    4f74:	a903      	add	r1, sp, #12
    4f76:	4620      	mov	r0, r4
    4f78:	4632      	mov	r2, r6
    4f7a:	e006      	b.n	4f8a <_wcrtomb_r+0x32>
    4f7c:	f7ff fac6 	bl	450c <__locale_charset>
    4f80:	9500      	str	r5, [sp, #0]
    4f82:	4603      	mov	r3, r0
    4f84:	4631      	mov	r1, r6
    4f86:	4620      	mov	r0, r4
    4f88:	4642      	mov	r2, r8
    4f8a:	47b8      	blx	r7
    4f8c:	1c43      	adds	r3, r0, #1
    4f8e:	d103      	bne.n	4f98 <_wcrtomb_r+0x40>
    4f90:	2300      	movs	r3, #0
    4f92:	602b      	str	r3, [r5, #0]
    4f94:	238a      	movs	r3, #138	; 0x8a
    4f96:	6023      	str	r3, [r4, #0]
    4f98:	b006      	add	sp, #24
    4f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f9e:	bf00      	nop
    4fa0:	200008fc 	.word	0x200008fc

00004fa4 <wcrtomb>:
    4fa4:	b530      	push	{r4, r5, lr}
    4fa6:	4613      	mov	r3, r2
    4fa8:	4a04      	ldr	r2, [pc, #16]	; (4fbc <wcrtomb+0x18>)
    4faa:	4605      	mov	r5, r0
    4fac:	460c      	mov	r4, r1
    4fae:	6810      	ldr	r0, [r2, #0]
    4fb0:	4629      	mov	r1, r5
    4fb2:	4622      	mov	r2, r4
    4fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    4fb8:	f7ff bfce 	b.w	4f58 <_wcrtomb_r>
    4fbc:	20000040 	.word	0x20000040

00004fc0 <__ascii_wctomb>:
    4fc0:	b149      	cbz	r1, 4fd6 <__ascii_wctomb+0x16>
    4fc2:	2aff      	cmp	r2, #255	; 0xff
    4fc4:	d904      	bls.n	4fd0 <__ascii_wctomb+0x10>
    4fc6:	238a      	movs	r3, #138	; 0x8a
    4fc8:	6003      	str	r3, [r0, #0]
    4fca:	f04f 30ff 	mov.w	r0, #4294967295
    4fce:	4770      	bx	lr
    4fd0:	700a      	strb	r2, [r1, #0]
    4fd2:	2001      	movs	r0, #1
    4fd4:	4770      	bx	lr
    4fd6:	4608      	mov	r0, r1
    4fd8:	4770      	bx	lr

00004fda <_wctomb_r>:
    4fda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4fde:	4698      	mov	r8, r3
    4fe0:	4b08      	ldr	r3, [pc, #32]	; (5004 <_wctomb_r+0x2a>)
    4fe2:	4605      	mov	r5, r0
    4fe4:	681c      	ldr	r4, [r3, #0]
    4fe6:	460f      	mov	r7, r1
    4fe8:	4616      	mov	r6, r2
    4fea:	f7ff fa8f 	bl	450c <__locale_charset>
    4fee:	f8cd 8000 	str.w	r8, [sp]
    4ff2:	4603      	mov	r3, r0
    4ff4:	4639      	mov	r1, r7
    4ff6:	4628      	mov	r0, r5
    4ff8:	4632      	mov	r2, r6
    4ffa:	47a0      	blx	r4
    4ffc:	b002      	add	sp, #8
    4ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5002:	bf00      	nop
    5004:	200008fc 	.word	0x200008fc

00005008 <_write_r>:
    5008:	b538      	push	{r3, r4, r5, lr}
    500a:	4c07      	ldr	r4, [pc, #28]	; (5028 <_write_r+0x20>)
    500c:	4605      	mov	r5, r0
    500e:	2000      	movs	r0, #0
    5010:	6020      	str	r0, [r4, #0]
    5012:	4608      	mov	r0, r1
    5014:	4611      	mov	r1, r2
    5016:	461a      	mov	r2, r3
    5018:	f7fb ff38 	bl	e8c <_write>
    501c:	1c43      	adds	r3, r0, #1
    501e:	d102      	bne.n	5026 <_write_r+0x1e>
    5020:	6823      	ldr	r3, [r4, #0]
    5022:	b103      	cbz	r3, 5026 <_write_r+0x1e>
    5024:	602b      	str	r3, [r5, #0]
    5026:	bd38      	pop	{r3, r4, r5, pc}
    5028:	20000c3c 	.word	0x20000c3c

0000502c <__register_exitproc>:
    502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5030:	4698      	mov	r8, r3
    5032:	4b22      	ldr	r3, [pc, #136]	; (50bc <__register_exitproc+0x90>)
    5034:	681c      	ldr	r4, [r3, #0]
    5036:	4606      	mov	r6, r0
    5038:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    503c:	460f      	mov	r7, r1
    503e:	4691      	mov	r9, r2
    5040:	b918      	cbnz	r0, 504a <__register_exitproc+0x1e>
    5042:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    5046:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    504a:	6843      	ldr	r3, [r0, #4]
    504c:	2b1f      	cmp	r3, #31
    504e:	dd16      	ble.n	507e <__register_exitproc+0x52>
    5050:	4b1b      	ldr	r3, [pc, #108]	; (50c0 <__register_exitproc+0x94>)
    5052:	b91b      	cbnz	r3, 505c <__register_exitproc+0x30>
    5054:	f04f 30ff 	mov.w	r0, #4294967295
    5058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    505c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5060:	f7ff fada 	bl	4618 <malloc>
    5064:	2800      	cmp	r0, #0
    5066:	d0f5      	beq.n	5054 <__register_exitproc+0x28>
    5068:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    506c:	6001      	str	r1, [r0, #0]
    506e:	2500      	movs	r5, #0
    5070:	6045      	str	r5, [r0, #4]
    5072:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    5076:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    507a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    507e:	6844      	ldr	r4, [r0, #4]
    5080:	b19e      	cbz	r6, 50aa <__register_exitproc+0x7e>
    5082:	eb00 0584 	add.w	r5, r0, r4, lsl #2
    5086:	2201      	movs	r2, #1
    5088:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
    508c:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    5090:	40a2      	lsls	r2, r4
    5092:	4311      	orrs	r1, r2
    5094:	2e02      	cmp	r6, #2
    5096:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    509a:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    509e:	d104      	bne.n	50aa <__register_exitproc+0x7e>
    50a0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    50a4:	431a      	orrs	r2, r3
    50a6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    50aa:	1c63      	adds	r3, r4, #1
    50ac:	3402      	adds	r4, #2
    50ae:	6043      	str	r3, [r0, #4]
    50b0:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
    50b4:	2000      	movs	r0, #0
    50b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50ba:	bf00      	nop
    50bc:	0000588c 	.word	0x0000588c
    50c0:	00004619 	.word	0x00004619

000050c4 <_close_r>:
    50c4:	b538      	push	{r3, r4, r5, lr}
    50c6:	4c06      	ldr	r4, [pc, #24]	; (50e0 <_close_r+0x1c>)
    50c8:	2300      	movs	r3, #0
    50ca:	4605      	mov	r5, r0
    50cc:	4608      	mov	r0, r1
    50ce:	6023      	str	r3, [r4, #0]
    50d0:	f7fd fc54 	bl	297c <_close>
    50d4:	1c43      	adds	r3, r0, #1
    50d6:	d102      	bne.n	50de <_close_r+0x1a>
    50d8:	6823      	ldr	r3, [r4, #0]
    50da:	b103      	cbz	r3, 50de <_close_r+0x1a>
    50dc:	602b      	str	r3, [r5, #0]
    50de:	bd38      	pop	{r3, r4, r5, pc}
    50e0:	20000c3c 	.word	0x20000c3c

000050e4 <_fclose_r>:
    50e4:	b570      	push	{r4, r5, r6, lr}
    50e6:	4605      	mov	r5, r0
    50e8:	460c      	mov	r4, r1
    50ea:	b909      	cbnz	r1, 50f0 <_fclose_r+0xc>
    50ec:	2000      	movs	r0, #0
    50ee:	bd70      	pop	{r4, r5, r6, pc}
    50f0:	b118      	cbz	r0, 50fa <_fclose_r+0x16>
    50f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    50f4:	b90b      	cbnz	r3, 50fa <_fclose_r+0x16>
    50f6:	f7fe fe11 	bl	3d1c <__sinit>
    50fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    50fe:	2b00      	cmp	r3, #0
    5100:	d0f4      	beq.n	50ec <_fclose_r+0x8>
    5102:	4628      	mov	r0, r5
    5104:	4621      	mov	r1, r4
    5106:	f7fe fdbf 	bl	3c88 <_fflush_r>
    510a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    510c:	4606      	mov	r6, r0
    510e:	b133      	cbz	r3, 511e <_fclose_r+0x3a>
    5110:	4628      	mov	r0, r5
    5112:	69e1      	ldr	r1, [r4, #28]
    5114:	4798      	blx	r3
    5116:	2800      	cmp	r0, #0
    5118:	bfb8      	it	lt
    511a:	f04f 36ff 	movlt.w	r6, #4294967295
    511e:	89a3      	ldrh	r3, [r4, #12]
    5120:	061b      	lsls	r3, r3, #24
    5122:	d503      	bpl.n	512c <_fclose_r+0x48>
    5124:	4628      	mov	r0, r5
    5126:	6921      	ldr	r1, [r4, #16]
    5128:	f7fe ff92 	bl	4050 <_free_r>
    512c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    512e:	b141      	cbz	r1, 5142 <_fclose_r+0x5e>
    5130:	f104 0340 	add.w	r3, r4, #64	; 0x40
    5134:	4299      	cmp	r1, r3
    5136:	d002      	beq.n	513e <_fclose_r+0x5a>
    5138:	4628      	mov	r0, r5
    513a:	f7fe ff89 	bl	4050 <_free_r>
    513e:	2300      	movs	r3, #0
    5140:	6323      	str	r3, [r4, #48]	; 0x30
    5142:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5144:	b121      	cbz	r1, 5150 <_fclose_r+0x6c>
    5146:	4628      	mov	r0, r5
    5148:	f7fe ff82 	bl	4050 <_free_r>
    514c:	2300      	movs	r3, #0
    514e:	6463      	str	r3, [r4, #68]	; 0x44
    5150:	f7fe fe96 	bl	3e80 <__sfp_lock_acquire>
    5154:	2300      	movs	r3, #0
    5156:	81a3      	strh	r3, [r4, #12]
    5158:	f7fe fe93 	bl	3e82 <__sfp_lock_release>
    515c:	4630      	mov	r0, r6
    515e:	bd70      	pop	{r4, r5, r6, pc}

00005160 <fclose>:
    5160:	4b02      	ldr	r3, [pc, #8]	; (516c <fclose+0xc>)
    5162:	4601      	mov	r1, r0
    5164:	6818      	ldr	r0, [r3, #0]
    5166:	f7ff bfbd 	b.w	50e4 <_fclose_r>
    516a:	bf00      	nop
    516c:	20000040 	.word	0x20000040

00005170 <_fstat_r>:
    5170:	b538      	push	{r3, r4, r5, lr}
    5172:	4c07      	ldr	r4, [pc, #28]	; (5190 <_fstat_r+0x20>)
    5174:	2300      	movs	r3, #0
    5176:	4605      	mov	r5, r0
    5178:	4608      	mov	r0, r1
    517a:	4611      	mov	r1, r2
    517c:	6023      	str	r3, [r4, #0]
    517e:	f7fd fc01 	bl	2984 <_fstat>
    5182:	1c43      	adds	r3, r0, #1
    5184:	d102      	bne.n	518c <_fstat_r+0x1c>
    5186:	6823      	ldr	r3, [r4, #0]
    5188:	b103      	cbz	r3, 518c <_fstat_r+0x1c>
    518a:	602b      	str	r3, [r5, #0]
    518c:	bd38      	pop	{r3, r4, r5, pc}
    518e:	bf00      	nop
    5190:	20000c3c 	.word	0x20000c3c

00005194 <_isatty_r>:
    5194:	b538      	push	{r3, r4, r5, lr}
    5196:	4c06      	ldr	r4, [pc, #24]	; (51b0 <_isatty_r+0x1c>)
    5198:	2300      	movs	r3, #0
    519a:	4605      	mov	r5, r0
    519c:	4608      	mov	r0, r1
    519e:	6023      	str	r3, [r4, #0]
    51a0:	f7fd fbf6 	bl	2990 <_isatty>
    51a4:	1c43      	adds	r3, r0, #1
    51a6:	d102      	bne.n	51ae <_isatty_r+0x1a>
    51a8:	6823      	ldr	r3, [r4, #0]
    51aa:	b103      	cbz	r3, 51ae <_isatty_r+0x1a>
    51ac:	602b      	str	r3, [r5, #0]
    51ae:	bd38      	pop	{r3, r4, r5, pc}
    51b0:	20000c3c 	.word	0x20000c3c

000051b4 <_lseek_r>:
    51b4:	b538      	push	{r3, r4, r5, lr}
    51b6:	4c07      	ldr	r4, [pc, #28]	; (51d4 <_lseek_r+0x20>)
    51b8:	4605      	mov	r5, r0
    51ba:	2000      	movs	r0, #0
    51bc:	6020      	str	r0, [r4, #0]
    51be:	4608      	mov	r0, r1
    51c0:	4611      	mov	r1, r2
    51c2:	461a      	mov	r2, r3
    51c4:	f7fd fbe6 	bl	2994 <_lseek>
    51c8:	1c43      	adds	r3, r0, #1
    51ca:	d102      	bne.n	51d2 <_lseek_r+0x1e>
    51cc:	6823      	ldr	r3, [r4, #0]
    51ce:	b103      	cbz	r3, 51d2 <_lseek_r+0x1e>
    51d0:	602b      	str	r3, [r5, #0]
    51d2:	bd38      	pop	{r3, r4, r5, pc}
    51d4:	20000c3c 	.word	0x20000c3c

000051d8 <_read_r>:
    51d8:	b538      	push	{r3, r4, r5, lr}
    51da:	4c07      	ldr	r4, [pc, #28]	; (51f8 <_read_r+0x20>)
    51dc:	4605      	mov	r5, r0
    51de:	2000      	movs	r0, #0
    51e0:	6020      	str	r0, [r4, #0]
    51e2:	4608      	mov	r0, r1
    51e4:	4611      	mov	r1, r2
    51e6:	461a      	mov	r2, r3
    51e8:	f7fb fe30 	bl	e4c <_read>
    51ec:	1c43      	adds	r3, r0, #1
    51ee:	d102      	bne.n	51f6 <_read_r+0x1e>
    51f0:	6823      	ldr	r3, [r4, #0]
    51f2:	b103      	cbz	r3, 51f6 <_read_r+0x1e>
    51f4:	602b      	str	r3, [r5, #0]
    51f6:	bd38      	pop	{r3, r4, r5, pc}
    51f8:	20000c3c 	.word	0x20000c3c

000051fc <__aeabi_uldivmod>:
    51fc:	b94b      	cbnz	r3, 5212 <__aeabi_uldivmod+0x16>
    51fe:	b942      	cbnz	r2, 5212 <__aeabi_uldivmod+0x16>
    5200:	2900      	cmp	r1, #0
    5202:	bf08      	it	eq
    5204:	2800      	cmpeq	r0, #0
    5206:	d002      	beq.n	520e <__aeabi_uldivmod+0x12>
    5208:	f04f 31ff 	mov.w	r1, #4294967295
    520c:	4608      	mov	r0, r1
    520e:	f000 b83b 	b.w	5288 <__aeabi_idiv0>
    5212:	b082      	sub	sp, #8
    5214:	46ec      	mov	ip, sp
    5216:	e92d 5000 	stmdb	sp!, {ip, lr}
    521a:	f000 f81d 	bl	5258 <__gnu_uldivmod_helper>
    521e:	f8dd e004 	ldr.w	lr, [sp, #4]
    5222:	b002      	add	sp, #8
    5224:	bc0c      	pop	{r2, r3}
    5226:	4770      	bx	lr

00005228 <__gnu_ldivmod_helper>:
    5228:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    522c:	9e06      	ldr	r6, [sp, #24]
    522e:	4614      	mov	r4, r2
    5230:	461d      	mov	r5, r3
    5232:	4680      	mov	r8, r0
    5234:	4689      	mov	r9, r1
    5236:	f000 f829 	bl	528c <__divdi3>
    523a:	fb04 f301 	mul.w	r3, r4, r1
    523e:	fb00 3305 	mla	r3, r0, r5, r3
    5242:	fba4 4500 	umull	r4, r5, r4, r0
    5246:	441d      	add	r5, r3
    5248:	ebb8 0404 	subs.w	r4, r8, r4
    524c:	eb69 0505 	sbc.w	r5, r9, r5
    5250:	e9c6 4500 	strd	r4, r5, [r6]
    5254:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00005258 <__gnu_uldivmod_helper>:
    5258:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    525c:	9e06      	ldr	r6, [sp, #24]
    525e:	4614      	mov	r4, r2
    5260:	4680      	mov	r8, r0
    5262:	4689      	mov	r9, r1
    5264:	461d      	mov	r5, r3
    5266:	f000 f95d 	bl	5524 <__udivdi3>
    526a:	fb00 f505 	mul.w	r5, r0, r5
    526e:	fb04 5301 	mla	r3, r4, r1, r5
    5272:	fba0 4504 	umull	r4, r5, r0, r4
    5276:	441d      	add	r5, r3
    5278:	ebb8 0404 	subs.w	r4, r8, r4
    527c:	eb69 0505 	sbc.w	r5, r9, r5
    5280:	e9c6 4500 	strd	r4, r5, [r6]
    5284:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00005288 <__aeabi_idiv0>:
    5288:	4770      	bx	lr
    528a:	bf00      	nop

0000528c <__divdi3>:
    528c:	2900      	cmp	r1, #0
    528e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5292:	f2c0 809f 	blt.w	53d4 <__divdi3+0x148>
    5296:	2400      	movs	r4, #0
    5298:	2b00      	cmp	r3, #0
    529a:	f2c0 8096 	blt.w	53ca <__divdi3+0x13e>
    529e:	4615      	mov	r5, r2
    52a0:	4606      	mov	r6, r0
    52a2:	460f      	mov	r7, r1
    52a4:	2b00      	cmp	r3, #0
    52a6:	d13e      	bne.n	5326 <__divdi3+0x9a>
    52a8:	428a      	cmp	r2, r1
    52aa:	d957      	bls.n	535c <__divdi3+0xd0>
    52ac:	fab2 f382 	clz	r3, r2
    52b0:	b14b      	cbz	r3, 52c6 <__divdi3+0x3a>
    52b2:	f1c3 0220 	rsb	r2, r3, #32
    52b6:	fa01 f703 	lsl.w	r7, r1, r3
    52ba:	fa20 f202 	lsr.w	r2, r0, r2
    52be:	409d      	lsls	r5, r3
    52c0:	4317      	orrs	r7, r2
    52c2:	fa00 f603 	lsl.w	r6, r0, r3
    52c6:	0c29      	lsrs	r1, r5, #16
    52c8:	fbb7 f2f1 	udiv	r2, r7, r1
    52cc:	0c33      	lsrs	r3, r6, #16
    52ce:	fb01 7c12 	mls	ip, r1, r2, r7
    52d2:	b2a8      	uxth	r0, r5
    52d4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
    52d8:	fb00 f302 	mul.w	r3, r0, r2
    52dc:	42bb      	cmp	r3, r7
    52de:	d909      	bls.n	52f4 <__divdi3+0x68>
    52e0:	197f      	adds	r7, r7, r5
    52e2:	f102 3cff 	add.w	ip, r2, #4294967295
    52e6:	f080 8101 	bcs.w	54ec <__divdi3+0x260>
    52ea:	42bb      	cmp	r3, r7
    52ec:	f240 80fe 	bls.w	54ec <__divdi3+0x260>
    52f0:	3a02      	subs	r2, #2
    52f2:	442f      	add	r7, r5
    52f4:	1aff      	subs	r7, r7, r3
    52f6:	fbb7 f3f1 	udiv	r3, r7, r1
    52fa:	b2b6      	uxth	r6, r6
    52fc:	fb01 7113 	mls	r1, r1, r3, r7
    5300:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    5304:	fb00 f003 	mul.w	r0, r0, r3
    5308:	4288      	cmp	r0, r1
    530a:	d908      	bls.n	531e <__divdi3+0x92>
    530c:	1949      	adds	r1, r1, r5
    530e:	f103 37ff 	add.w	r7, r3, #4294967295
    5312:	f080 80ed 	bcs.w	54f0 <__divdi3+0x264>
    5316:	4288      	cmp	r0, r1
    5318:	f240 80ea 	bls.w	54f0 <__divdi3+0x264>
    531c:	3b02      	subs	r3, #2
    531e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5322:	2300      	movs	r3, #0
    5324:	e003      	b.n	532e <__divdi3+0xa2>
    5326:	428b      	cmp	r3, r1
    5328:	d90a      	bls.n	5340 <__divdi3+0xb4>
    532a:	2300      	movs	r3, #0
    532c:	461a      	mov	r2, r3
    532e:	4610      	mov	r0, r2
    5330:	4619      	mov	r1, r3
    5332:	b114      	cbz	r4, 533a <__divdi3+0xae>
    5334:	4240      	negs	r0, r0
    5336:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    533a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    533e:	4770      	bx	lr
    5340:	fab3 f883 	clz	r8, r3
    5344:	f1b8 0f00 	cmp.w	r8, #0
    5348:	f040 8084 	bne.w	5454 <__divdi3+0x1c8>
    534c:	428b      	cmp	r3, r1
    534e:	d302      	bcc.n	5356 <__divdi3+0xca>
    5350:	4282      	cmp	r2, r0
    5352:	f200 80de 	bhi.w	5512 <__divdi3+0x286>
    5356:	2300      	movs	r3, #0
    5358:	2201      	movs	r2, #1
    535a:	e7e8      	b.n	532e <__divdi3+0xa2>
    535c:	b912      	cbnz	r2, 5364 <__divdi3+0xd8>
    535e:	2301      	movs	r3, #1
    5360:	fbb3 f5f2 	udiv	r5, r3, r2
    5364:	fab5 f285 	clz	r2, r5
    5368:	2a00      	cmp	r2, #0
    536a:	d139      	bne.n	53e0 <__divdi3+0x154>
    536c:	1b7f      	subs	r7, r7, r5
    536e:	0c28      	lsrs	r0, r5, #16
    5370:	fa1f fc85 	uxth.w	ip, r5
    5374:	2301      	movs	r3, #1
    5376:	fbb7 f1f0 	udiv	r1, r7, r0
    537a:	0c32      	lsrs	r2, r6, #16
    537c:	fb00 7711 	mls	r7, r0, r1, r7
    5380:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
    5384:	fb0c f201 	mul.w	r2, ip, r1
    5388:	42ba      	cmp	r2, r7
    538a:	d907      	bls.n	539c <__divdi3+0x110>
    538c:	197f      	adds	r7, r7, r5
    538e:	f101 38ff 	add.w	r8, r1, #4294967295
    5392:	d202      	bcs.n	539a <__divdi3+0x10e>
    5394:	42ba      	cmp	r2, r7
    5396:	f200 80c1 	bhi.w	551c <__divdi3+0x290>
    539a:	4641      	mov	r1, r8
    539c:	1abf      	subs	r7, r7, r2
    539e:	fbb7 f2f0 	udiv	r2, r7, r0
    53a2:	b2b6      	uxth	r6, r6
    53a4:	fb00 7012 	mls	r0, r0, r2, r7
    53a8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    53ac:	fb0c fc02 	mul.w	ip, ip, r2
    53b0:	4584      	cmp	ip, r0
    53b2:	d907      	bls.n	53c4 <__divdi3+0x138>
    53b4:	1940      	adds	r0, r0, r5
    53b6:	f102 37ff 	add.w	r7, r2, #4294967295
    53ba:	d202      	bcs.n	53c2 <__divdi3+0x136>
    53bc:	4584      	cmp	ip, r0
    53be:	f200 80ab 	bhi.w	5518 <__divdi3+0x28c>
    53c2:	463a      	mov	r2, r7
    53c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    53c8:	e7b1      	b.n	532e <__divdi3+0xa2>
    53ca:	43e4      	mvns	r4, r4
    53cc:	4252      	negs	r2, r2
    53ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    53d2:	e764      	b.n	529e <__divdi3+0x12>
    53d4:	4240      	negs	r0, r0
    53d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    53da:	f04f 34ff 	mov.w	r4, #4294967295
    53de:	e75b      	b.n	5298 <__divdi3+0xc>
    53e0:	4095      	lsls	r5, r2
    53e2:	f1c2 0320 	rsb	r3, r2, #32
    53e6:	fa27 f103 	lsr.w	r1, r7, r3
    53ea:	0c28      	lsrs	r0, r5, #16
    53ec:	fa26 f303 	lsr.w	r3, r6, r3
    53f0:	4097      	lsls	r7, r2
    53f2:	fbb1 f8f0 	udiv	r8, r1, r0
    53f6:	431f      	orrs	r7, r3
    53f8:	0c3b      	lsrs	r3, r7, #16
    53fa:	fb00 1118 	mls	r1, r0, r8, r1
    53fe:	fa1f fc85 	uxth.w	ip, r5
    5402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    5406:	fb0c f308 	mul.w	r3, ip, r8
    540a:	428b      	cmp	r3, r1
    540c:	fa06 f602 	lsl.w	r6, r6, r2
    5410:	d908      	bls.n	5424 <__divdi3+0x198>
    5412:	1949      	adds	r1, r1, r5
    5414:	f108 32ff 	add.w	r2, r8, #4294967295
    5418:	d279      	bcs.n	550e <__divdi3+0x282>
    541a:	428b      	cmp	r3, r1
    541c:	d977      	bls.n	550e <__divdi3+0x282>
    541e:	f1a8 0802 	sub.w	r8, r8, #2
    5422:	4429      	add	r1, r5
    5424:	1ac9      	subs	r1, r1, r3
    5426:	fbb1 f3f0 	udiv	r3, r1, r0
    542a:	b2bf      	uxth	r7, r7
    542c:	fb00 1113 	mls	r1, r0, r3, r1
    5430:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    5434:	fb0c f203 	mul.w	r2, ip, r3
    5438:	42ba      	cmp	r2, r7
    543a:	d907      	bls.n	544c <__divdi3+0x1c0>
    543c:	197f      	adds	r7, r7, r5
    543e:	f103 31ff 	add.w	r1, r3, #4294967295
    5442:	d260      	bcs.n	5506 <__divdi3+0x27a>
    5444:	42ba      	cmp	r2, r7
    5446:	d95e      	bls.n	5506 <__divdi3+0x27a>
    5448:	3b02      	subs	r3, #2
    544a:	442f      	add	r7, r5
    544c:	1abf      	subs	r7, r7, r2
    544e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    5452:	e790      	b.n	5376 <__divdi3+0xea>
    5454:	f1c8 0220 	rsb	r2, r8, #32
    5458:	fa03 fc08 	lsl.w	ip, r3, r8
    545c:	fa25 f302 	lsr.w	r3, r5, r2
    5460:	ea43 0c0c 	orr.w	ip, r3, ip
    5464:	ea4f 491c 	mov.w	r9, ip, lsr #16
    5468:	fa21 f302 	lsr.w	r3, r1, r2
    546c:	fa01 f708 	lsl.w	r7, r1, r8
    5470:	fa20 f202 	lsr.w	r2, r0, r2
    5474:	fbb3 f1f9 	udiv	r1, r3, r9
    5478:	4317      	orrs	r7, r2
    547a:	fb09 3311 	mls	r3, r9, r1, r3
    547e:	0c3a      	lsrs	r2, r7, #16
    5480:	fa1f fb8c 	uxth.w	fp, ip
    5484:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    5488:	fb0b fa01 	mul.w	sl, fp, r1
    548c:	459a      	cmp	sl, r3
    548e:	fa05 f008 	lsl.w	r0, r5, r8
    5492:	d908      	bls.n	54a6 <__divdi3+0x21a>
    5494:	eb13 030c 	adds.w	r3, r3, ip
    5498:	f101 32ff 	add.w	r2, r1, #4294967295
    549c:	d235      	bcs.n	550a <__divdi3+0x27e>
    549e:	459a      	cmp	sl, r3
    54a0:	d933      	bls.n	550a <__divdi3+0x27e>
    54a2:	3902      	subs	r1, #2
    54a4:	4463      	add	r3, ip
    54a6:	ebca 0303 	rsb	r3, sl, r3
    54aa:	fbb3 f2f9 	udiv	r2, r3, r9
    54ae:	fb09 3312 	mls	r3, r9, r2, r3
    54b2:	b2bf      	uxth	r7, r7
    54b4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    54b8:	fb0b f902 	mul.w	r9, fp, r2
    54bc:	45b9      	cmp	r9, r7
    54be:	d908      	bls.n	54d2 <__divdi3+0x246>
    54c0:	eb17 070c 	adds.w	r7, r7, ip
    54c4:	f102 33ff 	add.w	r3, r2, #4294967295
    54c8:	d21b      	bcs.n	5502 <__divdi3+0x276>
    54ca:	45b9      	cmp	r9, r7
    54cc:	d919      	bls.n	5502 <__divdi3+0x276>
    54ce:	3a02      	subs	r2, #2
    54d0:	4467      	add	r7, ip
    54d2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
    54d6:	fba5 0100 	umull	r0, r1, r5, r0
    54da:	ebc9 0707 	rsb	r7, r9, r7
    54de:	428f      	cmp	r7, r1
    54e0:	f04f 0300 	mov.w	r3, #0
    54e4:	d30a      	bcc.n	54fc <__divdi3+0x270>
    54e6:	d005      	beq.n	54f4 <__divdi3+0x268>
    54e8:	462a      	mov	r2, r5
    54ea:	e720      	b.n	532e <__divdi3+0xa2>
    54ec:	4662      	mov	r2, ip
    54ee:	e701      	b.n	52f4 <__divdi3+0x68>
    54f0:	463b      	mov	r3, r7
    54f2:	e714      	b.n	531e <__divdi3+0x92>
    54f4:	fa06 f608 	lsl.w	r6, r6, r8
    54f8:	4286      	cmp	r6, r0
    54fa:	d2f5      	bcs.n	54e8 <__divdi3+0x25c>
    54fc:	1e6a      	subs	r2, r5, #1
    54fe:	2300      	movs	r3, #0
    5500:	e715      	b.n	532e <__divdi3+0xa2>
    5502:	461a      	mov	r2, r3
    5504:	e7e5      	b.n	54d2 <__divdi3+0x246>
    5506:	460b      	mov	r3, r1
    5508:	e7a0      	b.n	544c <__divdi3+0x1c0>
    550a:	4611      	mov	r1, r2
    550c:	e7cb      	b.n	54a6 <__divdi3+0x21a>
    550e:	4690      	mov	r8, r2
    5510:	e788      	b.n	5424 <__divdi3+0x198>
    5512:	4643      	mov	r3, r8
    5514:	4642      	mov	r2, r8
    5516:	e70a      	b.n	532e <__divdi3+0xa2>
    5518:	3a02      	subs	r2, #2
    551a:	e753      	b.n	53c4 <__divdi3+0x138>
    551c:	3902      	subs	r1, #2
    551e:	442f      	add	r7, r5
    5520:	e73c      	b.n	539c <__divdi3+0x110>
    5522:	bf00      	nop

00005524 <__udivdi3>:
    5524:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5528:	4614      	mov	r4, r2
    552a:	4605      	mov	r5, r0
    552c:	460e      	mov	r6, r1
    552e:	2b00      	cmp	r3, #0
    5530:	d143      	bne.n	55ba <__udivdi3+0x96>
    5532:	428a      	cmp	r2, r1
    5534:	d953      	bls.n	55de <__udivdi3+0xba>
    5536:	fab2 f782 	clz	r7, r2
    553a:	b157      	cbz	r7, 5552 <__udivdi3+0x2e>
    553c:	f1c7 0620 	rsb	r6, r7, #32
    5540:	fa20 f606 	lsr.w	r6, r0, r6
    5544:	fa01 f307 	lsl.w	r3, r1, r7
    5548:	fa02 f407 	lsl.w	r4, r2, r7
    554c:	431e      	orrs	r6, r3
    554e:	fa00 f507 	lsl.w	r5, r0, r7
    5552:	0c21      	lsrs	r1, r4, #16
    5554:	fbb6 f2f1 	udiv	r2, r6, r1
    5558:	0c2b      	lsrs	r3, r5, #16
    555a:	fb01 6712 	mls	r7, r1, r2, r6
    555e:	b2a0      	uxth	r0, r4
    5560:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
    5564:	fb00 f302 	mul.w	r3, r0, r2
    5568:	42b3      	cmp	r3, r6
    556a:	d909      	bls.n	5580 <__udivdi3+0x5c>
    556c:	1936      	adds	r6, r6, r4
    556e:	f102 37ff 	add.w	r7, r2, #4294967295
    5572:	f080 80f6 	bcs.w	5762 <__udivdi3+0x23e>
    5576:	42b3      	cmp	r3, r6
    5578:	f240 80f3 	bls.w	5762 <__udivdi3+0x23e>
    557c:	3a02      	subs	r2, #2
    557e:	4426      	add	r6, r4
    5580:	1af6      	subs	r6, r6, r3
    5582:	fbb6 f3f1 	udiv	r3, r6, r1
    5586:	b2ad      	uxth	r5, r5
    5588:	fb01 6113 	mls	r1, r1, r3, r6
    558c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    5590:	fb00 f003 	mul.w	r0, r0, r3
    5594:	4288      	cmp	r0, r1
    5596:	d908      	bls.n	55aa <__udivdi3+0x86>
    5598:	1909      	adds	r1, r1, r4
    559a:	f103 36ff 	add.w	r6, r3, #4294967295
    559e:	f080 80e2 	bcs.w	5766 <__udivdi3+0x242>
    55a2:	4288      	cmp	r0, r1
    55a4:	f240 80df 	bls.w	5766 <__udivdi3+0x242>
    55a8:	3b02      	subs	r3, #2
    55aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    55ae:	2300      	movs	r3, #0
    55b0:	4610      	mov	r0, r2
    55b2:	4619      	mov	r1, r3
    55b4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    55b8:	4770      	bx	lr
    55ba:	428b      	cmp	r3, r1
    55bc:	d84a      	bhi.n	5654 <__udivdi3+0x130>
    55be:	fab3 f683 	clz	r6, r3
    55c2:	2e00      	cmp	r6, #0
    55c4:	d14d      	bne.n	5662 <__udivdi3+0x13e>
    55c6:	428b      	cmp	r3, r1
    55c8:	d302      	bcc.n	55d0 <__udivdi3+0xac>
    55ca:	4282      	cmp	r2, r0
    55cc:	f200 80d6 	bhi.w	577c <__udivdi3+0x258>
    55d0:	2300      	movs	r3, #0
    55d2:	2201      	movs	r2, #1
    55d4:	4610      	mov	r0, r2
    55d6:	4619      	mov	r1, r3
    55d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    55dc:	4770      	bx	lr
    55de:	b912      	cbnz	r2, 55e6 <__udivdi3+0xc2>
    55e0:	2401      	movs	r4, #1
    55e2:	fbb4 f4f2 	udiv	r4, r4, r2
    55e6:	fab4 f284 	clz	r2, r4
    55ea:	2a00      	cmp	r2, #0
    55ec:	d17c      	bne.n	56e8 <__udivdi3+0x1c4>
    55ee:	1b09      	subs	r1, r1, r4
    55f0:	0c26      	lsrs	r6, r4, #16
    55f2:	b2a7      	uxth	r7, r4
    55f4:	2301      	movs	r3, #1
    55f6:	fbb1 f0f6 	udiv	r0, r1, r6
    55fa:	0c2a      	lsrs	r2, r5, #16
    55fc:	fb06 1110 	mls	r1, r6, r0, r1
    5600:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    5604:	fb07 f200 	mul.w	r2, r7, r0
    5608:	428a      	cmp	r2, r1
    560a:	d907      	bls.n	561c <__udivdi3+0xf8>
    560c:	1909      	adds	r1, r1, r4
    560e:	f100 3cff 	add.w	ip, r0, #4294967295
    5612:	d202      	bcs.n	561a <__udivdi3+0xf6>
    5614:	428a      	cmp	r2, r1
    5616:	f200 80c3 	bhi.w	57a0 <__udivdi3+0x27c>
    561a:	4660      	mov	r0, ip
    561c:	1a89      	subs	r1, r1, r2
    561e:	fbb1 f2f6 	udiv	r2, r1, r6
    5622:	b2ad      	uxth	r5, r5
    5624:	fb06 1112 	mls	r1, r6, r2, r1
    5628:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    562c:	fb07 f702 	mul.w	r7, r7, r2
    5630:	42af      	cmp	r7, r5
    5632:	d908      	bls.n	5646 <__udivdi3+0x122>
    5634:	192c      	adds	r4, r5, r4
    5636:	f102 31ff 	add.w	r1, r2, #4294967295
    563a:	f080 8096 	bcs.w	576a <__udivdi3+0x246>
    563e:	42a7      	cmp	r7, r4
    5640:	f240 8093 	bls.w	576a <__udivdi3+0x246>
    5644:	3a02      	subs	r2, #2
    5646:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    564a:	4610      	mov	r0, r2
    564c:	4619      	mov	r1, r3
    564e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5652:	4770      	bx	lr
    5654:	2300      	movs	r3, #0
    5656:	461a      	mov	r2, r3
    5658:	4610      	mov	r0, r2
    565a:	4619      	mov	r1, r3
    565c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5660:	4770      	bx	lr
    5662:	f1c6 0520 	rsb	r5, r6, #32
    5666:	fa22 f405 	lsr.w	r4, r2, r5
    566a:	40b3      	lsls	r3, r6
    566c:	431c      	orrs	r4, r3
    566e:	ea4f 4814 	mov.w	r8, r4, lsr #16
    5672:	fa21 f305 	lsr.w	r3, r1, r5
    5676:	fa01 f706 	lsl.w	r7, r1, r6
    567a:	fa20 f505 	lsr.w	r5, r0, r5
    567e:	fbb3 fcf8 	udiv	ip, r3, r8
    5682:	432f      	orrs	r7, r5
    5684:	fb08 331c 	mls	r3, r8, ip, r3
    5688:	0c3d      	lsrs	r5, r7, #16
    568a:	fa1f fa84 	uxth.w	sl, r4
    568e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5692:	fb0a f90c 	mul.w	r9, sl, ip
    5696:	4599      	cmp	r9, r3
    5698:	fa02 fb06 	lsl.w	fp, r2, r6
    569c:	d904      	bls.n	56a8 <__udivdi3+0x184>
    569e:	191b      	adds	r3, r3, r4
    56a0:	f10c 32ff 	add.w	r2, ip, #4294967295
    56a4:	d36d      	bcc.n	5782 <__udivdi3+0x25e>
    56a6:	4694      	mov	ip, r2
    56a8:	ebc9 0303 	rsb	r3, r9, r3
    56ac:	fbb3 f5f8 	udiv	r5, r3, r8
    56b0:	fb08 3315 	mls	r3, r8, r5, r3
    56b4:	b2bf      	uxth	r7, r7
    56b6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    56ba:	fb0a f805 	mul.w	r8, sl, r5
    56be:	45b8      	cmp	r8, r7
    56c0:	d904      	bls.n	56cc <__udivdi3+0x1a8>
    56c2:	193f      	adds	r7, r7, r4
    56c4:	f105 33ff 	add.w	r3, r5, #4294967295
    56c8:	d361      	bcc.n	578e <__udivdi3+0x26a>
    56ca:	461d      	mov	r5, r3
    56cc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
    56d0:	fbac 230b 	umull	r2, r3, ip, fp
    56d4:	ebc8 0707 	rsb	r7, r8, r7
    56d8:	429f      	cmp	r7, r3
    56da:	f04f 0500 	mov.w	r5, #0
    56de:	d349      	bcc.n	5774 <__udivdi3+0x250>
    56e0:	d045      	beq.n	576e <__udivdi3+0x24a>
    56e2:	4662      	mov	r2, ip
    56e4:	462b      	mov	r3, r5
    56e6:	e763      	b.n	55b0 <__udivdi3+0x8c>
    56e8:	4094      	lsls	r4, r2
    56ea:	f1c2 0320 	rsb	r3, r2, #32
    56ee:	fa21 fc03 	lsr.w	ip, r1, r3
    56f2:	0c26      	lsrs	r6, r4, #16
    56f4:	fa20 f303 	lsr.w	r3, r0, r3
    56f8:	fa01 f502 	lsl.w	r5, r1, r2
    56fc:	fbbc f8f6 	udiv	r8, ip, r6
    5700:	ea43 0105 	orr.w	r1, r3, r5
    5704:	0c0b      	lsrs	r3, r1, #16
    5706:	fb06 cc18 	mls	ip, r6, r8, ip
    570a:	b2a7      	uxth	r7, r4
    570c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
    5710:	fb07 f308 	mul.w	r3, r7, r8
    5714:	4563      	cmp	r3, ip
    5716:	fa00 f502 	lsl.w	r5, r0, r2
    571a:	d909      	bls.n	5730 <__udivdi3+0x20c>
    571c:	eb1c 0c04 	adds.w	ip, ip, r4
    5720:	f108 32ff 	add.w	r2, r8, #4294967295
    5724:	d23a      	bcs.n	579c <__udivdi3+0x278>
    5726:	4563      	cmp	r3, ip
    5728:	d938      	bls.n	579c <__udivdi3+0x278>
    572a:	f1a8 0802 	sub.w	r8, r8, #2
    572e:	44a4      	add	ip, r4
    5730:	ebc3 0c0c 	rsb	ip, r3, ip
    5734:	fbbc f3f6 	udiv	r3, ip, r6
    5738:	b289      	uxth	r1, r1
    573a:	fb06 cc13 	mls	ip, r6, r3, ip
    573e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    5742:	fb07 f203 	mul.w	r2, r7, r3
    5746:	428a      	cmp	r2, r1
    5748:	d907      	bls.n	575a <__udivdi3+0x236>
    574a:	1909      	adds	r1, r1, r4
    574c:	f103 30ff 	add.w	r0, r3, #4294967295
    5750:	d222      	bcs.n	5798 <__udivdi3+0x274>
    5752:	428a      	cmp	r2, r1
    5754:	d920      	bls.n	5798 <__udivdi3+0x274>
    5756:	3b02      	subs	r3, #2
    5758:	4421      	add	r1, r4
    575a:	1a89      	subs	r1, r1, r2
    575c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    5760:	e749      	b.n	55f6 <__udivdi3+0xd2>
    5762:	463a      	mov	r2, r7
    5764:	e70c      	b.n	5580 <__udivdi3+0x5c>
    5766:	4633      	mov	r3, r6
    5768:	e71f      	b.n	55aa <__udivdi3+0x86>
    576a:	460a      	mov	r2, r1
    576c:	e76b      	b.n	5646 <__udivdi3+0x122>
    576e:	40b0      	lsls	r0, r6
    5770:	4290      	cmp	r0, r2
    5772:	d2b6      	bcs.n	56e2 <__udivdi3+0x1be>
    5774:	f10c 32ff 	add.w	r2, ip, #4294967295
    5778:	2300      	movs	r3, #0
    577a:	e719      	b.n	55b0 <__udivdi3+0x8c>
    577c:	4633      	mov	r3, r6
    577e:	4632      	mov	r2, r6
    5780:	e716      	b.n	55b0 <__udivdi3+0x8c>
    5782:	4599      	cmp	r9, r3
    5784:	d98f      	bls.n	56a6 <__udivdi3+0x182>
    5786:	f1ac 0c02 	sub.w	ip, ip, #2
    578a:	4423      	add	r3, r4
    578c:	e78c      	b.n	56a8 <__udivdi3+0x184>
    578e:	45b8      	cmp	r8, r7
    5790:	d99b      	bls.n	56ca <__udivdi3+0x1a6>
    5792:	3d02      	subs	r5, #2
    5794:	4427      	add	r7, r4
    5796:	e799      	b.n	56cc <__udivdi3+0x1a8>
    5798:	4603      	mov	r3, r0
    579a:	e7de      	b.n	575a <__udivdi3+0x236>
    579c:	4690      	mov	r8, r2
    579e:	e7c7      	b.n	5730 <__udivdi3+0x20c>
    57a0:	3802      	subs	r0, #2
    57a2:	4421      	add	r1, r4
    57a4:	e73a      	b.n	561c <__udivdi3+0xf8>
    57a6:	bf00      	nop
    57a8:	75746553 	.word	0x75746553
    57ac:	52492070 	.word	0x52492070
    57b0:	61632051 	.word	0x61632051
    57b4:	61626c6c 	.word	0x61626c6c
    57b8:	005f6b63 	.word	0x005f6b63
    57bc:	69616620 	.word	0x69616620
    57c0:	6572756c 	.word	0x6572756c
    57c4:	000a0d21 	.word	0x000a0d21
    57c8:	203a4152 	.word	0x203a4152
    57cc:	00000000 	.word	0x00000000
    57d0:	00000a0d 	.word	0x00000a0d
    57d4:	203a4252 	.word	0x203a4252
    57d8:	00000000 	.word	0x00000000
    57dc:	203a4352 	.word	0x203a4352
    57e0:	00000000 	.word	0x00000000
    57e4:	2c304354 	.word	0x2c304354
    57e8:	61684320 	.word	0x61684320
    57ec:	6c656e6e 	.word	0x6c656e6e
    57f0:	73203020 	.word	0x73203020
    57f4:	70757465 	.word	0x70757465
    57f8:	0000003a 	.word	0x0000003a
    57fc:	2c304354 	.word	0x2c304354
    5800:	61684320 	.word	0x61684320
    5804:	6c656e6e 	.word	0x6c656e6e
    5808:	73203120 	.word	0x73203120
    580c:	70757465 	.word	0x70757465
    5810:	0000003a 	.word	0x0000003a
    5814:	2c304354 	.word	0x2c304354
    5818:	61684320 	.word	0x61684320
    581c:	6c656e6e 	.word	0x6c656e6e
    5820:	73203220 	.word	0x73203220
    5824:	70757465 	.word	0x70757465
    5828:	0000003a 	.word	0x0000003a
    582c:	2c314354 	.word	0x2c314354
    5830:	61684320 	.word	0x61684320
    5834:	6c656e6e 	.word	0x6c656e6e
    5838:	73203020 	.word	0x73203020
    583c:	70757465 	.word	0x70757465
    5840:	0000003a 	.word	0x0000003a
    5844:	2c314354 	.word	0x2c314354
    5848:	61684320 	.word	0x61684320
    584c:	6c656e6e 	.word	0x6c656e6e
    5850:	73203120 	.word	0x73203120
    5854:	70757465 	.word	0x70757465
    5858:	0000003a 	.word	0x0000003a
    585c:	2c314354 	.word	0x2c314354
    5860:	61684320 	.word	0x61684320
    5864:	6c656e6e 	.word	0x6c656e6e
    5868:	73203220 	.word	0x73203220
    586c:	70757465 	.word	0x70757465
    5870:	0000003a 	.word	0x0000003a
    5874:	0d2d382d 	.word	0x0d2d382d
    5878:	00000000 	.word	0x00000000
    587c:	0d2d392d 	.word	0x0d2d392d
    5880:	00000000 	.word	0x00000000
    5884:	0000002c 	.word	0x0000002c
    5888:	0000000d 	.word	0x0000000d

0000588c <_global_impure_ptr>:
    588c:	20000048 000a0043                       H.. C...

00005894 <blanks.6701>:
    5894:	20202020 20202020 20202020 20202020                     

000058a4 <zeroes.6702>:
    58a4:	30303030 30303030 30303030 30303030     0000000000000000
    58b4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    58c4:	32313000 36353433 61393837 65646362     .0123456789abcde
    58d4:	4f500066 00584953 0000002e              f.POSIX.....

000058e0 <_init>:
    58e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58e2:	bf00      	nop
    58e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    58e6:	bc08      	pop	{r3}
    58e8:	469e      	mov	lr, r3
    58ea:	4770      	bx	lr

000058ec <__init_array_start>:
    58ec:	00003b51 	.word	0x00003b51

000058f0 <__frame_dummy_init_array_entry>:
    58f0:	000001f9                                ....

000058f4 <_fini>:
    58f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58f6:	bf00      	nop
    58f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    58fa:	bc08      	pop	{r3}
    58fc:	469e      	mov	lr, r3
    58fe:	4770      	bx	lr

00005900 <__fini_array_start>:
    5900:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
20000000:	4a07      	ldr	r2, [pc, #28]	; (20000020 <bpm_ps_no_halt_exec+0x20>)
20000002:	4b08      	ldr	r3, [pc, #32]	; (20000024 <bpm_ps_no_halt_exec+0x24>)
20000004:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000006:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000008:	4619      	mov	r1, r3
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000a:	4a07      	ldr	r2, [pc, #28]	; (20000028 <bpm_ps_no_halt_exec+0x28>)
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000000c:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000000e:	6813      	ldr	r3, [r2, #0]
20000010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
20000014:	f010 0001 	ands.w	r0, r0, #1
20000018:	d101      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
2000001a:	2b00      	cmp	r3, #0
2000001c:	d0f6      	beq.n	2000000c <bpm_ps_no_halt_exec+0xc>
	return b_psok;
}
2000001e:	4770      	bx	lr
20000020:	aa00001c 	.word	0xaa00001c
20000024:	400f0000 	.word	0x400f0000
20000028:	e000e010 	.word	0xe000e010

2000002c <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
2000002c:	f3bf 8f5f 	dmb	sy
20000030:	3801      	subs	r0, #1
20000032:	d1fb      	bne.n	2000002c <portable_delay_cycles>
20000034:	4770      	bx	lr
20000036:	bf00      	nop

20000038 <g_interrupt_enabled>:
20000038:	0001 0000                                   ....

2000003c <flashcalw_wait_until_ready>:
2000003c:	2689 0000                                   .&..

20000040 <_impure_ptr>:
20000040:	0048 2000 0000 0000                         H.. ....

20000048 <impure_data>:
20000048:	0000 0000 0334 2000 039c 2000 0404 2000     ....4.. ... ... 
	...
2000007c:	5890 0000 0000 0000 0000 0000 0000 0000     .X..............
	...
200000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000470 <lc_ctype_charset>:
20000470:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000490 <__mb_cur_max>:
20000490:	0001 0000                                   ....

20000494 <lc_message_charset>:
20000494:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004b4 <lconv>:
200004b4:	58dc 0000 5893 0000 5893 0000 5893 0000     .X...X...X...X..
200004c4:	5893 0000 5893 0000 5893 0000 5893 0000     .X...X...X...X..
200004d4:	5893 0000 5893 0000 ffff ffff ffff ffff     .X...X..........
200004e4:	ffff ffff ffff 0000                         ........

200004ec <__malloc_av_>:
	...
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 

200008f4 <__malloc_sbrk_base>:
200008f4:	ffff ffff                                   ....

200008f8 <__malloc_trim_threshold>:
200008f8:	0000 0002                                   ....

200008fc <__wctomb>:
200008fc:	4fc1 0000                                   .O..
